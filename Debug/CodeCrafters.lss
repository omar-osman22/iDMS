
CodeCrafters.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003fa  00800100  0000488c  00004920  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000488c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008004fa  008004fa  00004d1a  2**0
                  ALLOC
  3 .stab         00004818  00000000  00000000  00004d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b90  00000000  00000000  00009534  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000b0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000b244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000b417  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000d426  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000e596  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000f598  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000f738  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000f9fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000102a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e8       	ldi	r30, 0x8C	; 140
      a0:	f8 e4       	ldi	r31, 0x48	; 72
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3f       	cpi	r26, 0xFA	; 250
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	15 e0       	ldi	r17, 0x05	; 5
      b4:	aa ef       	ldi	r26, 0xFA	; 250
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 30       	cpi	r26, 0x08	; 8
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 a5 20 	call	0x414a	; 0x414a <main>
      c6:	0c 94 44 24 	jmp	0x4888	; 0x4888 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__fixunssfsi>:
      ce:	ef 92       	push	r14
      d0:	ff 92       	push	r15
      d2:	0f 93       	push	r16
      d4:	1f 93       	push	r17
      d6:	7b 01       	movw	r14, r22
      d8:	8c 01       	movw	r16, r24
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	40 e0       	ldi	r20, 0x00	; 0
      e0:	5f e4       	ldi	r21, 0x4F	; 79
      e2:	0e 94 67 03 	call	0x6ce	; 0x6ce <__gesf2>
      e6:	88 23       	and	r24, r24
      e8:	8c f0       	brlt	.+34     	; 0x10c <__fixunssfsi+0x3e>
      ea:	c8 01       	movw	r24, r16
      ec:	b7 01       	movw	r22, r14
      ee:	20 e0       	ldi	r18, 0x00	; 0
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	5f e4       	ldi	r21, 0x4F	; 79
      f6:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
      fa:	0e 94 c7 03 	call	0x78e	; 0x78e <__fixsfsi>
      fe:	9b 01       	movw	r18, r22
     100:	ac 01       	movw	r20, r24
     102:	20 50       	subi	r18, 0x00	; 0
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	50 48       	sbci	r21, 0x80	; 128
     10a:	06 c0       	rjmp	.+12     	; 0x118 <__fixunssfsi+0x4a>
     10c:	c8 01       	movw	r24, r16
     10e:	b7 01       	movw	r22, r14
     110:	0e 94 c7 03 	call	0x78e	; 0x78e <__fixsfsi>
     114:	9b 01       	movw	r18, r22
     116:	ac 01       	movw	r20, r24
     118:	b9 01       	movw	r22, r18
     11a:	ca 01       	movw	r24, r20
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	08 95       	ret

00000126 <_fpadd_parts>:
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	e9 e9       	ldi	r30, 0x99	; 153
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	0c 94 b8 22 	jmp	0x4570	; 0x4570 <__prologue_saves__>
     132:	dc 01       	movw	r26, r24
     134:	2b 01       	movw	r4, r22
     136:	fa 01       	movw	r30, r20
     138:	9c 91       	ld	r25, X
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	08 f4       	brcc	.+2      	; 0x140 <_fpadd_parts+0x1a>
     13e:	39 c1       	rjmp	.+626    	; 0x3b2 <_fpadd_parts+0x28c>
     140:	eb 01       	movw	r28, r22
     142:	88 81       	ld	r24, Y
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	08 f4       	brcc	.+2      	; 0x14a <_fpadd_parts+0x24>
     148:	33 c1       	rjmp	.+614    	; 0x3b0 <_fpadd_parts+0x28a>
     14a:	94 30       	cpi	r25, 0x04	; 4
     14c:	69 f4       	brne	.+26     	; 0x168 <_fpadd_parts+0x42>
     14e:	84 30       	cpi	r24, 0x04	; 4
     150:	09 f0       	breq	.+2      	; 0x154 <_fpadd_parts+0x2e>
     152:	2f c1       	rjmp	.+606    	; 0x3b2 <_fpadd_parts+0x28c>
     154:	11 96       	adiw	r26, 0x01	; 1
     156:	9c 91       	ld	r25, X
     158:	11 97       	sbiw	r26, 0x01	; 1
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	98 17       	cp	r25, r24
     15e:	09 f4       	brne	.+2      	; 0x162 <_fpadd_parts+0x3c>
     160:	28 c1       	rjmp	.+592    	; 0x3b2 <_fpadd_parts+0x28c>
     162:	a7 ef       	ldi	r26, 0xF7	; 247
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	25 c1       	rjmp	.+586    	; 0x3b2 <_fpadd_parts+0x28c>
     168:	84 30       	cpi	r24, 0x04	; 4
     16a:	09 f4       	brne	.+2      	; 0x16e <_fpadd_parts+0x48>
     16c:	21 c1       	rjmp	.+578    	; 0x3b0 <_fpadd_parts+0x28a>
     16e:	82 30       	cpi	r24, 0x02	; 2
     170:	a9 f4       	brne	.+42     	; 0x19c <_fpadd_parts+0x76>
     172:	92 30       	cpi	r25, 0x02	; 2
     174:	09 f0       	breq	.+2      	; 0x178 <_fpadd_parts+0x52>
     176:	1d c1       	rjmp	.+570    	; 0x3b2 <_fpadd_parts+0x28c>
     178:	9a 01       	movw	r18, r20
     17a:	ad 01       	movw	r20, r26
     17c:	88 e0       	ldi	r24, 0x08	; 8
     17e:	ea 01       	movw	r28, r20
     180:	09 90       	ld	r0, Y+
     182:	ae 01       	movw	r20, r28
     184:	e9 01       	movw	r28, r18
     186:	09 92       	st	Y+, r0
     188:	9e 01       	movw	r18, r28
     18a:	81 50       	subi	r24, 0x01	; 1
     18c:	c1 f7       	brne	.-16     	; 0x17e <_fpadd_parts+0x58>
     18e:	e2 01       	movw	r28, r4
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	11 96       	adiw	r26, 0x01	; 1
     194:	9c 91       	ld	r25, X
     196:	89 23       	and	r24, r25
     198:	81 83       	std	Z+1, r24	; 0x01
     19a:	08 c1       	rjmp	.+528    	; 0x3ac <_fpadd_parts+0x286>
     19c:	92 30       	cpi	r25, 0x02	; 2
     19e:	09 f4       	brne	.+2      	; 0x1a2 <_fpadd_parts+0x7c>
     1a0:	07 c1       	rjmp	.+526    	; 0x3b0 <_fpadd_parts+0x28a>
     1a2:	12 96       	adiw	r26, 0x02	; 2
     1a4:	2d 90       	ld	r2, X+
     1a6:	3c 90       	ld	r3, X
     1a8:	13 97       	sbiw	r26, 0x03	; 3
     1aa:	eb 01       	movw	r28, r22
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	9b 81       	ldd	r25, Y+3	; 0x03
     1b0:	14 96       	adiw	r26, 0x04	; 4
     1b2:	ad 90       	ld	r10, X+
     1b4:	bd 90       	ld	r11, X+
     1b6:	cd 90       	ld	r12, X+
     1b8:	dc 90       	ld	r13, X
     1ba:	17 97       	sbiw	r26, 0x07	; 7
     1bc:	ec 80       	ldd	r14, Y+4	; 0x04
     1be:	fd 80       	ldd	r15, Y+5	; 0x05
     1c0:	0e 81       	ldd	r16, Y+6	; 0x06
     1c2:	1f 81       	ldd	r17, Y+7	; 0x07
     1c4:	91 01       	movw	r18, r2
     1c6:	28 1b       	sub	r18, r24
     1c8:	39 0b       	sbc	r19, r25
     1ca:	b9 01       	movw	r22, r18
     1cc:	37 ff       	sbrs	r19, 7
     1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <_fpadd_parts+0xb2>
     1d0:	66 27       	eor	r22, r22
     1d2:	77 27       	eor	r23, r23
     1d4:	62 1b       	sub	r22, r18
     1d6:	73 0b       	sbc	r23, r19
     1d8:	60 32       	cpi	r22, 0x20	; 32
     1da:	71 05       	cpc	r23, r1
     1dc:	0c f0       	brlt	.+2      	; 0x1e0 <_fpadd_parts+0xba>
     1de:	61 c0       	rjmp	.+194    	; 0x2a2 <_fpadd_parts+0x17c>
     1e0:	12 16       	cp	r1, r18
     1e2:	13 06       	cpc	r1, r19
     1e4:	6c f5       	brge	.+90     	; 0x240 <_fpadd_parts+0x11a>
     1e6:	37 01       	movw	r6, r14
     1e8:	48 01       	movw	r8, r16
     1ea:	06 2e       	mov	r0, r22
     1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <_fpadd_parts+0xd0>
     1ee:	96 94       	lsr	r9
     1f0:	87 94       	ror	r8
     1f2:	77 94       	ror	r7
     1f4:	67 94       	ror	r6
     1f6:	0a 94       	dec	r0
     1f8:	d2 f7       	brpl	.-12     	; 0x1ee <_fpadd_parts+0xc8>
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0xe6>
     204:	22 0f       	add	r18, r18
     206:	33 1f       	adc	r19, r19
     208:	44 1f       	adc	r20, r20
     20a:	55 1f       	adc	r21, r21
     20c:	6a 95       	dec	r22
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0xde>
     210:	21 50       	subi	r18, 0x01	; 1
     212:	30 40       	sbci	r19, 0x00	; 0
     214:	40 40       	sbci	r20, 0x00	; 0
     216:	50 40       	sbci	r21, 0x00	; 0
     218:	2e 21       	and	r18, r14
     21a:	3f 21       	and	r19, r15
     21c:	40 23       	and	r20, r16
     21e:	51 23       	and	r21, r17
     220:	21 15       	cp	r18, r1
     222:	31 05       	cpc	r19, r1
     224:	41 05       	cpc	r20, r1
     226:	51 05       	cpc	r21, r1
     228:	21 f0       	breq	.+8      	; 0x232 <_fpadd_parts+0x10c>
     22a:	21 e0       	ldi	r18, 0x01	; 1
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	79 01       	movw	r14, r18
     234:	8a 01       	movw	r16, r20
     236:	e6 28       	or	r14, r6
     238:	f7 28       	or	r15, r7
     23a:	08 29       	or	r16, r8
     23c:	19 29       	or	r17, r9
     23e:	3c c0       	rjmp	.+120    	; 0x2b8 <_fpadd_parts+0x192>
     240:	23 2b       	or	r18, r19
     242:	d1 f1       	breq	.+116    	; 0x2b8 <_fpadd_parts+0x192>
     244:	26 0e       	add	r2, r22
     246:	37 1e       	adc	r3, r23
     248:	35 01       	movw	r6, r10
     24a:	46 01       	movw	r8, r12
     24c:	06 2e       	mov	r0, r22
     24e:	04 c0       	rjmp	.+8      	; 0x258 <_fpadd_parts+0x132>
     250:	96 94       	lsr	r9
     252:	87 94       	ror	r8
     254:	77 94       	ror	r7
     256:	67 94       	ror	r6
     258:	0a 94       	dec	r0
     25a:	d2 f7       	brpl	.-12     	; 0x250 <_fpadd_parts+0x12a>
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	04 c0       	rjmp	.+8      	; 0x26e <_fpadd_parts+0x148>
     266:	22 0f       	add	r18, r18
     268:	33 1f       	adc	r19, r19
     26a:	44 1f       	adc	r20, r20
     26c:	55 1f       	adc	r21, r21
     26e:	6a 95       	dec	r22
     270:	d2 f7       	brpl	.-12     	; 0x266 <_fpadd_parts+0x140>
     272:	21 50       	subi	r18, 0x01	; 1
     274:	30 40       	sbci	r19, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	50 40       	sbci	r21, 0x00	; 0
     27a:	2a 21       	and	r18, r10
     27c:	3b 21       	and	r19, r11
     27e:	4c 21       	and	r20, r12
     280:	5d 21       	and	r21, r13
     282:	21 15       	cp	r18, r1
     284:	31 05       	cpc	r19, r1
     286:	41 05       	cpc	r20, r1
     288:	51 05       	cpc	r21, r1
     28a:	21 f0       	breq	.+8      	; 0x294 <_fpadd_parts+0x16e>
     28c:	21 e0       	ldi	r18, 0x01	; 1
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	59 01       	movw	r10, r18
     296:	6a 01       	movw	r12, r20
     298:	a6 28       	or	r10, r6
     29a:	b7 28       	or	r11, r7
     29c:	c8 28       	or	r12, r8
     29e:	d9 28       	or	r13, r9
     2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <_fpadd_parts+0x192>
     2a2:	82 15       	cp	r24, r2
     2a4:	93 05       	cpc	r25, r3
     2a6:	2c f0       	brlt	.+10     	; 0x2b2 <_fpadd_parts+0x18c>
     2a8:	1c 01       	movw	r2, r24
     2aa:	aa 24       	eor	r10, r10
     2ac:	bb 24       	eor	r11, r11
     2ae:	65 01       	movw	r12, r10
     2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <_fpadd_parts+0x192>
     2b2:	ee 24       	eor	r14, r14
     2b4:	ff 24       	eor	r15, r15
     2b6:	87 01       	movw	r16, r14
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	9c 91       	ld	r25, X
     2bc:	d2 01       	movw	r26, r4
     2be:	11 96       	adiw	r26, 0x01	; 1
     2c0:	8c 91       	ld	r24, X
     2c2:	98 17       	cp	r25, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <_fpadd_parts+0x1a2>
     2c6:	45 c0       	rjmp	.+138    	; 0x352 <_fpadd_parts+0x22c>
     2c8:	99 23       	and	r25, r25
     2ca:	39 f0       	breq	.+14     	; 0x2da <_fpadd_parts+0x1b4>
     2cc:	a8 01       	movw	r20, r16
     2ce:	97 01       	movw	r18, r14
     2d0:	2a 19       	sub	r18, r10
     2d2:	3b 09       	sbc	r19, r11
     2d4:	4c 09       	sbc	r20, r12
     2d6:	5d 09       	sbc	r21, r13
     2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <_fpadd_parts+0x1c0>
     2da:	a6 01       	movw	r20, r12
     2dc:	95 01       	movw	r18, r10
     2de:	2e 19       	sub	r18, r14
     2e0:	3f 09       	sbc	r19, r15
     2e2:	40 0b       	sbc	r20, r16
     2e4:	51 0b       	sbc	r21, r17
     2e6:	57 fd       	sbrc	r21, 7
     2e8:	08 c0       	rjmp	.+16     	; 0x2fa <_fpadd_parts+0x1d4>
     2ea:	11 82       	std	Z+1, r1	; 0x01
     2ec:	33 82       	std	Z+3, r3	; 0x03
     2ee:	22 82       	std	Z+2, r2	; 0x02
     2f0:	24 83       	std	Z+4, r18	; 0x04
     2f2:	35 83       	std	Z+5, r19	; 0x05
     2f4:	46 83       	std	Z+6, r20	; 0x06
     2f6:	57 83       	std	Z+7, r21	; 0x07
     2f8:	1d c0       	rjmp	.+58     	; 0x334 <_fpadd_parts+0x20e>
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	81 83       	std	Z+1, r24	; 0x01
     2fe:	33 82       	std	Z+3, r3	; 0x03
     300:	22 82       	std	Z+2, r2	; 0x02
     302:	88 27       	eor	r24, r24
     304:	99 27       	eor	r25, r25
     306:	dc 01       	movw	r26, r24
     308:	82 1b       	sub	r24, r18
     30a:	93 0b       	sbc	r25, r19
     30c:	a4 0b       	sbc	r26, r20
     30e:	b5 0b       	sbc	r27, r21
     310:	84 83       	std	Z+4, r24	; 0x04
     312:	95 83       	std	Z+5, r25	; 0x05
     314:	a6 83       	std	Z+6, r26	; 0x06
     316:	b7 83       	std	Z+7, r27	; 0x07
     318:	0d c0       	rjmp	.+26     	; 0x334 <_fpadd_parts+0x20e>
     31a:	22 0f       	add	r18, r18
     31c:	33 1f       	adc	r19, r19
     31e:	44 1f       	adc	r20, r20
     320:	55 1f       	adc	r21, r21
     322:	24 83       	std	Z+4, r18	; 0x04
     324:	35 83       	std	Z+5, r19	; 0x05
     326:	46 83       	std	Z+6, r20	; 0x06
     328:	57 83       	std	Z+7, r21	; 0x07
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	93 83       	std	Z+3, r25	; 0x03
     332:	82 83       	std	Z+2, r24	; 0x02
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	da 01       	movw	r26, r20
     33e:	c9 01       	movw	r24, r18
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	a1 09       	sbc	r26, r1
     344:	b1 09       	sbc	r27, r1
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	9f 4f       	sbci	r25, 0xFF	; 255
     34a:	af 4f       	sbci	r26, 0xFF	; 255
     34c:	bf 43       	sbci	r27, 0x3F	; 63
     34e:	28 f3       	brcs	.-54     	; 0x31a <_fpadd_parts+0x1f4>
     350:	0b c0       	rjmp	.+22     	; 0x368 <_fpadd_parts+0x242>
     352:	91 83       	std	Z+1, r25	; 0x01
     354:	33 82       	std	Z+3, r3	; 0x03
     356:	22 82       	std	Z+2, r2	; 0x02
     358:	ea 0c       	add	r14, r10
     35a:	fb 1c       	adc	r15, r11
     35c:	0c 1d       	adc	r16, r12
     35e:	1d 1d       	adc	r17, r13
     360:	e4 82       	std	Z+4, r14	; 0x04
     362:	f5 82       	std	Z+5, r15	; 0x05
     364:	06 83       	std	Z+6, r16	; 0x06
     366:	17 83       	std	Z+7, r17	; 0x07
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	80 83       	st	Z, r24
     36c:	24 81       	ldd	r18, Z+4	; 0x04
     36e:	35 81       	ldd	r19, Z+5	; 0x05
     370:	46 81       	ldd	r20, Z+6	; 0x06
     372:	57 81       	ldd	r21, Z+7	; 0x07
     374:	57 ff       	sbrs	r21, 7
     376:	1a c0       	rjmp	.+52     	; 0x3ac <_fpadd_parts+0x286>
     378:	c9 01       	movw	r24, r18
     37a:	aa 27       	eor	r26, r26
     37c:	97 fd       	sbrc	r25, 7
     37e:	a0 95       	com	r26
     380:	ba 2f       	mov	r27, r26
     382:	81 70       	andi	r24, 0x01	; 1
     384:	90 70       	andi	r25, 0x00	; 0
     386:	a0 70       	andi	r26, 0x00	; 0
     388:	b0 70       	andi	r27, 0x00	; 0
     38a:	56 95       	lsr	r21
     38c:	47 95       	ror	r20
     38e:	37 95       	ror	r19
     390:	27 95       	ror	r18
     392:	82 2b       	or	r24, r18
     394:	93 2b       	or	r25, r19
     396:	a4 2b       	or	r26, r20
     398:	b5 2b       	or	r27, r21
     39a:	84 83       	std	Z+4, r24	; 0x04
     39c:	95 83       	std	Z+5, r25	; 0x05
     39e:	a6 83       	std	Z+6, r26	; 0x06
     3a0:	b7 83       	std	Z+7, r27	; 0x07
     3a2:	82 81       	ldd	r24, Z+2	; 0x02
     3a4:	93 81       	ldd	r25, Z+3	; 0x03
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	93 83       	std	Z+3, r25	; 0x03
     3aa:	82 83       	std	Z+2, r24	; 0x02
     3ac:	df 01       	movw	r26, r30
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <_fpadd_parts+0x28c>
     3b0:	d2 01       	movw	r26, r4
     3b2:	cd 01       	movw	r24, r26
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	e2 e1       	ldi	r30, 0x12	; 18
     3ba:	0c 94 d4 22 	jmp	0x45a8	; 0x45a8 <__epilogue_restores__>

000003be <__subsf3>:
     3be:	a0 e2       	ldi	r26, 0x20	; 32
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	e5 ee       	ldi	r30, 0xE5	; 229
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	0c 94 c4 22 	jmp	0x4588	; 0x4588 <__prologue_saves__+0x18>
     3ca:	69 83       	std	Y+1, r22	; 0x01
     3cc:	7a 83       	std	Y+2, r23	; 0x02
     3ce:	8b 83       	std	Y+3, r24	; 0x03
     3d0:	9c 83       	std	Y+4, r25	; 0x04
     3d2:	2d 83       	std	Y+5, r18	; 0x05
     3d4:	3e 83       	std	Y+6, r19	; 0x06
     3d6:	4f 83       	std	Y+7, r20	; 0x07
     3d8:	58 87       	std	Y+8, r21	; 0x08
     3da:	e9 e0       	ldi	r30, 0x09	; 9
     3dc:	ee 2e       	mov	r14, r30
     3de:	f1 2c       	mov	r15, r1
     3e0:	ec 0e       	add	r14, r28
     3e2:	fd 1e       	adc	r15, r29
     3e4:	ce 01       	movw	r24, r28
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	b7 01       	movw	r22, r14
     3ea:	0e 94 b8 05 	call	0xb70	; 0xb70 <__unpack_f>
     3ee:	8e 01       	movw	r16, r28
     3f0:	0f 5e       	subi	r16, 0xEF	; 239
     3f2:	1f 4f       	sbci	r17, 0xFF	; 255
     3f4:	ce 01       	movw	r24, r28
     3f6:	05 96       	adiw	r24, 0x05	; 5
     3f8:	b8 01       	movw	r22, r16
     3fa:	0e 94 b8 05 	call	0xb70	; 0xb70 <__unpack_f>
     3fe:	8a 89       	ldd	r24, Y+18	; 0x12
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	89 27       	eor	r24, r25
     404:	8a 8b       	std	Y+18, r24	; 0x12
     406:	c7 01       	movw	r24, r14
     408:	b8 01       	movw	r22, r16
     40a:	ae 01       	movw	r20, r28
     40c:	47 5e       	subi	r20, 0xE7	; 231
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     414:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__pack_f>
     418:	a0 96       	adiw	r28, 0x20	; 32
     41a:	e6 e0       	ldi	r30, 0x06	; 6
     41c:	0c 94 e0 22 	jmp	0x45c0	; 0x45c0 <__epilogue_restores__+0x18>

00000420 <__addsf3>:
     420:	a0 e2       	ldi	r26, 0x20	; 32
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e6 e1       	ldi	r30, 0x16	; 22
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	0c 94 c4 22 	jmp	0x4588	; 0x4588 <__prologue_saves__+0x18>
     42c:	69 83       	std	Y+1, r22	; 0x01
     42e:	7a 83       	std	Y+2, r23	; 0x02
     430:	8b 83       	std	Y+3, r24	; 0x03
     432:	9c 83       	std	Y+4, r25	; 0x04
     434:	2d 83       	std	Y+5, r18	; 0x05
     436:	3e 83       	std	Y+6, r19	; 0x06
     438:	4f 83       	std	Y+7, r20	; 0x07
     43a:	58 87       	std	Y+8, r21	; 0x08
     43c:	f9 e0       	ldi	r31, 0x09	; 9
     43e:	ef 2e       	mov	r14, r31
     440:	f1 2c       	mov	r15, r1
     442:	ec 0e       	add	r14, r28
     444:	fd 1e       	adc	r15, r29
     446:	ce 01       	movw	r24, r28
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	b7 01       	movw	r22, r14
     44c:	0e 94 b8 05 	call	0xb70	; 0xb70 <__unpack_f>
     450:	8e 01       	movw	r16, r28
     452:	0f 5e       	subi	r16, 0xEF	; 239
     454:	1f 4f       	sbci	r17, 0xFF	; 255
     456:	ce 01       	movw	r24, r28
     458:	05 96       	adiw	r24, 0x05	; 5
     45a:	b8 01       	movw	r22, r16
     45c:	0e 94 b8 05 	call	0xb70	; 0xb70 <__unpack_f>
     460:	c7 01       	movw	r24, r14
     462:	b8 01       	movw	r22, r16
     464:	ae 01       	movw	r20, r28
     466:	47 5e       	subi	r20, 0xE7	; 231
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     46e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__pack_f>
     472:	a0 96       	adiw	r28, 0x20	; 32
     474:	e6 e0       	ldi	r30, 0x06	; 6
     476:	0c 94 e0 22 	jmp	0x45c0	; 0x45c0 <__epilogue_restores__+0x18>

0000047a <__mulsf3>:
     47a:	a0 e2       	ldi	r26, 0x20	; 32
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e3 e4       	ldi	r30, 0x43	; 67
     480:	f2 e0       	ldi	r31, 0x02	; 2
     482:	0c 94 b8 22 	jmp	0x4570	; 0x4570 <__prologue_saves__>
     486:	69 83       	std	Y+1, r22	; 0x01
     488:	7a 83       	std	Y+2, r23	; 0x02
     48a:	8b 83       	std	Y+3, r24	; 0x03
     48c:	9c 83       	std	Y+4, r25	; 0x04
     48e:	2d 83       	std	Y+5, r18	; 0x05
     490:	3e 83       	std	Y+6, r19	; 0x06
     492:	4f 83       	std	Y+7, r20	; 0x07
     494:	58 87       	std	Y+8, r21	; 0x08
     496:	ce 01       	movw	r24, r28
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	be 01       	movw	r22, r28
     49c:	67 5f       	subi	r22, 0xF7	; 247
     49e:	7f 4f       	sbci	r23, 0xFF	; 255
     4a0:	0e 94 b8 05 	call	0xb70	; 0xb70 <__unpack_f>
     4a4:	ce 01       	movw	r24, r28
     4a6:	05 96       	adiw	r24, 0x05	; 5
     4a8:	be 01       	movw	r22, r28
     4aa:	6f 5e       	subi	r22, 0xEF	; 239
     4ac:	7f 4f       	sbci	r23, 0xFF	; 255
     4ae:	0e 94 b8 05 	call	0xb70	; 0xb70 <__unpack_f>
     4b2:	99 85       	ldd	r25, Y+9	; 0x09
     4b4:	92 30       	cpi	r25, 0x02	; 2
     4b6:	88 f0       	brcs	.+34     	; 0x4da <__mulsf3+0x60>
     4b8:	89 89       	ldd	r24, Y+17	; 0x11
     4ba:	82 30       	cpi	r24, 0x02	; 2
     4bc:	c8 f0       	brcs	.+50     	; 0x4f0 <__mulsf3+0x76>
     4be:	94 30       	cpi	r25, 0x04	; 4
     4c0:	19 f4       	brne	.+6      	; 0x4c8 <__mulsf3+0x4e>
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	51 f4       	brne	.+20     	; 0x4da <__mulsf3+0x60>
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__mulsf3+0x56>
     4c8:	84 30       	cpi	r24, 0x04	; 4
     4ca:	29 f4       	brne	.+10     	; 0x4d6 <__mulsf3+0x5c>
     4cc:	92 30       	cpi	r25, 0x02	; 2
     4ce:	81 f4       	brne	.+32     	; 0x4f0 <__mulsf3+0x76>
     4d0:	87 ef       	ldi	r24, 0xF7	; 247
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	c6 c0       	rjmp	.+396    	; 0x662 <__mulsf3+0x1e8>
     4d6:	92 30       	cpi	r25, 0x02	; 2
     4d8:	49 f4       	brne	.+18     	; 0x4ec <__mulsf3+0x72>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4de:	8a 89       	ldd	r24, Y+18	; 0x12
     4e0:	98 13       	cpse	r25, r24
     4e2:	21 e0       	ldi	r18, 0x01	; 1
     4e4:	2a 87       	std	Y+10, r18	; 0x0a
     4e6:	ce 01       	movw	r24, r28
     4e8:	09 96       	adiw	r24, 0x09	; 9
     4ea:	bb c0       	rjmp	.+374    	; 0x662 <__mulsf3+0x1e8>
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	49 f4       	brne	.+18     	; 0x502 <__mulsf3+0x88>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f4:	8a 89       	ldd	r24, Y+18	; 0x12
     4f6:	98 13       	cpse	r25, r24
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	2a 8b       	std	Y+18, r18	; 0x12
     4fc:	ce 01       	movw	r24, r28
     4fe:	41 96       	adiw	r24, 0x11	; 17
     500:	b0 c0       	rjmp	.+352    	; 0x662 <__mulsf3+0x1e8>
     502:	2d 84       	ldd	r2, Y+13	; 0x0d
     504:	3e 84       	ldd	r3, Y+14	; 0x0e
     506:	4f 84       	ldd	r4, Y+15	; 0x0f
     508:	58 88       	ldd	r5, Y+16	; 0x10
     50a:	6d 88       	ldd	r6, Y+21	; 0x15
     50c:	7e 88       	ldd	r7, Y+22	; 0x16
     50e:	8f 88       	ldd	r8, Y+23	; 0x17
     510:	98 8c       	ldd	r9, Y+24	; 0x18
     512:	ee 24       	eor	r14, r14
     514:	ff 24       	eor	r15, r15
     516:	87 01       	movw	r16, r14
     518:	aa 24       	eor	r10, r10
     51a:	bb 24       	eor	r11, r11
     51c:	65 01       	movw	r12, r10
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	e0 e0       	ldi	r30, 0x00	; 0
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	c1 01       	movw	r24, r2
     52c:	81 70       	andi	r24, 0x01	; 1
     52e:	90 70       	andi	r25, 0x00	; 0
     530:	89 2b       	or	r24, r25
     532:	e9 f0       	breq	.+58     	; 0x56e <__mulsf3+0xf4>
     534:	e6 0c       	add	r14, r6
     536:	f7 1c       	adc	r15, r7
     538:	08 1d       	adc	r16, r8
     53a:	19 1d       	adc	r17, r9
     53c:	9a 01       	movw	r18, r20
     53e:	ab 01       	movw	r20, r22
     540:	2a 0d       	add	r18, r10
     542:	3b 1d       	adc	r19, r11
     544:	4c 1d       	adc	r20, r12
     546:	5d 1d       	adc	r21, r13
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	e6 14       	cp	r14, r6
     552:	f7 04       	cpc	r15, r7
     554:	08 05       	cpc	r16, r8
     556:	19 05       	cpc	r17, r9
     558:	20 f4       	brcc	.+8      	; 0x562 <__mulsf3+0xe8>
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	a0 e0       	ldi	r26, 0x00	; 0
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	ba 01       	movw	r22, r20
     564:	a9 01       	movw	r20, r18
     566:	48 0f       	add	r20, r24
     568:	59 1f       	adc	r21, r25
     56a:	6a 1f       	adc	r22, r26
     56c:	7b 1f       	adc	r23, r27
     56e:	aa 0c       	add	r10, r10
     570:	bb 1c       	adc	r11, r11
     572:	cc 1c       	adc	r12, r12
     574:	dd 1c       	adc	r13, r13
     576:	97 fe       	sbrs	r9, 7
     578:	08 c0       	rjmp	.+16     	; 0x58a <__mulsf3+0x110>
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	a0 e0       	ldi	r26, 0x00	; 0
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	a8 2a       	or	r10, r24
     584:	b9 2a       	or	r11, r25
     586:	ca 2a       	or	r12, r26
     588:	db 2a       	or	r13, r27
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	e0 32       	cpi	r30, 0x20	; 32
     58e:	f1 05       	cpc	r31, r1
     590:	49 f0       	breq	.+18     	; 0x5a4 <__mulsf3+0x12a>
     592:	66 0c       	add	r6, r6
     594:	77 1c       	adc	r7, r7
     596:	88 1c       	adc	r8, r8
     598:	99 1c       	adc	r9, r9
     59a:	56 94       	lsr	r5
     59c:	47 94       	ror	r4
     59e:	37 94       	ror	r3
     5a0:	27 94       	ror	r2
     5a2:	c3 cf       	rjmp	.-122    	; 0x52a <__mulsf3+0xb0>
     5a4:	fa 85       	ldd	r31, Y+10	; 0x0a
     5a6:	ea 89       	ldd	r30, Y+18	; 0x12
     5a8:	2b 89       	ldd	r18, Y+19	; 0x13
     5aa:	3c 89       	ldd	r19, Y+20	; 0x14
     5ac:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ae:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b0:	28 0f       	add	r18, r24
     5b2:	39 1f       	adc	r19, r25
     5b4:	2e 5f       	subi	r18, 0xFE	; 254
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	17 c0       	rjmp	.+46     	; 0x5e8 <__mulsf3+0x16e>
     5ba:	ca 01       	movw	r24, r20
     5bc:	81 70       	andi	r24, 0x01	; 1
     5be:	90 70       	andi	r25, 0x00	; 0
     5c0:	89 2b       	or	r24, r25
     5c2:	61 f0       	breq	.+24     	; 0x5dc <__mulsf3+0x162>
     5c4:	16 95       	lsr	r17
     5c6:	07 95       	ror	r16
     5c8:	f7 94       	ror	r15
     5ca:	e7 94       	ror	r14
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	a0 e0       	ldi	r26, 0x00	; 0
     5d2:	b0 e8       	ldi	r27, 0x80	; 128
     5d4:	e8 2a       	or	r14, r24
     5d6:	f9 2a       	or	r15, r25
     5d8:	0a 2b       	or	r16, r26
     5da:	1b 2b       	or	r17, r27
     5dc:	76 95       	lsr	r23
     5de:	67 95       	ror	r22
     5e0:	57 95       	ror	r21
     5e2:	47 95       	ror	r20
     5e4:	2f 5f       	subi	r18, 0xFF	; 255
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	77 fd       	sbrc	r23, 7
     5ea:	e7 cf       	rjmp	.-50     	; 0x5ba <__mulsf3+0x140>
     5ec:	0c c0       	rjmp	.+24     	; 0x606 <__mulsf3+0x18c>
     5ee:	44 0f       	add	r20, r20
     5f0:	55 1f       	adc	r21, r21
     5f2:	66 1f       	adc	r22, r22
     5f4:	77 1f       	adc	r23, r23
     5f6:	17 fd       	sbrc	r17, 7
     5f8:	41 60       	ori	r20, 0x01	; 1
     5fa:	ee 0c       	add	r14, r14
     5fc:	ff 1c       	adc	r15, r15
     5fe:	00 1f       	adc	r16, r16
     600:	11 1f       	adc	r17, r17
     602:	21 50       	subi	r18, 0x01	; 1
     604:	30 40       	sbci	r19, 0x00	; 0
     606:	40 30       	cpi	r20, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	59 07       	cpc	r21, r25
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	69 07       	cpc	r22, r25
     610:	90 e4       	ldi	r25, 0x40	; 64
     612:	79 07       	cpc	r23, r25
     614:	60 f3       	brcs	.-40     	; 0x5ee <__mulsf3+0x174>
     616:	2b 8f       	std	Y+27, r18	; 0x1b
     618:	3c 8f       	std	Y+28, r19	; 0x1c
     61a:	db 01       	movw	r26, r22
     61c:	ca 01       	movw	r24, r20
     61e:	8f 77       	andi	r24, 0x7F	; 127
     620:	90 70       	andi	r25, 0x00	; 0
     622:	a0 70       	andi	r26, 0x00	; 0
     624:	b0 70       	andi	r27, 0x00	; 0
     626:	80 34       	cpi	r24, 0x40	; 64
     628:	91 05       	cpc	r25, r1
     62a:	a1 05       	cpc	r26, r1
     62c:	b1 05       	cpc	r27, r1
     62e:	61 f4       	brne	.+24     	; 0x648 <__mulsf3+0x1ce>
     630:	47 fd       	sbrc	r20, 7
     632:	0a c0       	rjmp	.+20     	; 0x648 <__mulsf3+0x1ce>
     634:	e1 14       	cp	r14, r1
     636:	f1 04       	cpc	r15, r1
     638:	01 05       	cpc	r16, r1
     63a:	11 05       	cpc	r17, r1
     63c:	29 f0       	breq	.+10     	; 0x648 <__mulsf3+0x1ce>
     63e:	40 5c       	subi	r20, 0xC0	; 192
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	6f 4f       	sbci	r22, 0xFF	; 255
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	40 78       	andi	r20, 0x80	; 128
     648:	1a 8e       	std	Y+26, r1	; 0x1a
     64a:	fe 17       	cp	r31, r30
     64c:	11 f0       	breq	.+4      	; 0x652 <__mulsf3+0x1d8>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	8a 8f       	std	Y+26, r24	; 0x1a
     652:	4d 8f       	std	Y+29, r20	; 0x1d
     654:	5e 8f       	std	Y+30, r21	; 0x1e
     656:	6f 8f       	std	Y+31, r22	; 0x1f
     658:	78 a3       	std	Y+32, r23	; 0x20
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	89 8f       	std	Y+25, r24	; 0x19
     65e:	ce 01       	movw	r24, r28
     660:	49 96       	adiw	r24, 0x19	; 25
     662:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__pack_f>
     666:	a0 96       	adiw	r28, 0x20	; 32
     668:	e2 e1       	ldi	r30, 0x12	; 18
     66a:	0c 94 d4 22 	jmp	0x45a8	; 0x45a8 <__epilogue_restores__>

0000066e <__gtsf2>:
     66e:	a8 e1       	ldi	r26, 0x18	; 24
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	ed e3       	ldi	r30, 0x3D	; 61
     674:	f3 e0       	ldi	r31, 0x03	; 3
     676:	0c 94 c4 22 	jmp	0x4588	; 0x4588 <__prologue_saves__+0x18>
     67a:	69 83       	std	Y+1, r22	; 0x01
     67c:	7a 83       	std	Y+2, r23	; 0x02
     67e:	8b 83       	std	Y+3, r24	; 0x03
     680:	9c 83       	std	Y+4, r25	; 0x04
     682:	2d 83       	std	Y+5, r18	; 0x05
     684:	3e 83       	std	Y+6, r19	; 0x06
     686:	4f 83       	std	Y+7, r20	; 0x07
     688:	58 87       	std	Y+8, r21	; 0x08
     68a:	89 e0       	ldi	r24, 0x09	; 9
     68c:	e8 2e       	mov	r14, r24
     68e:	f1 2c       	mov	r15, r1
     690:	ec 0e       	add	r14, r28
     692:	fd 1e       	adc	r15, r29
     694:	ce 01       	movw	r24, r28
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	b7 01       	movw	r22, r14
     69a:	0e 94 b8 05 	call	0xb70	; 0xb70 <__unpack_f>
     69e:	8e 01       	movw	r16, r28
     6a0:	0f 5e       	subi	r16, 0xEF	; 239
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255
     6a4:	ce 01       	movw	r24, r28
     6a6:	05 96       	adiw	r24, 0x05	; 5
     6a8:	b8 01       	movw	r22, r16
     6aa:	0e 94 b8 05 	call	0xb70	; 0xb70 <__unpack_f>
     6ae:	89 85       	ldd	r24, Y+9	; 0x09
     6b0:	82 30       	cpi	r24, 0x02	; 2
     6b2:	40 f0       	brcs	.+16     	; 0x6c4 <__gtsf2+0x56>
     6b4:	89 89       	ldd	r24, Y+17	; 0x11
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	28 f0       	brcs	.+10     	; 0x6c4 <__gtsf2+0x56>
     6ba:	c7 01       	movw	r24, r14
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 30 06 	call	0xc60	; 0xc60 <__fpcmp_parts_f>
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <__gtsf2+0x58>
     6c4:	8f ef       	ldi	r24, 0xFF	; 255
     6c6:	68 96       	adiw	r28, 0x18	; 24
     6c8:	e6 e0       	ldi	r30, 0x06	; 6
     6ca:	0c 94 e0 22 	jmp	0x45c0	; 0x45c0 <__epilogue_restores__+0x18>

000006ce <__gesf2>:
     6ce:	a8 e1       	ldi	r26, 0x18	; 24
     6d0:	b0 e0       	ldi	r27, 0x00	; 0
     6d2:	ed e6       	ldi	r30, 0x6D	; 109
     6d4:	f3 e0       	ldi	r31, 0x03	; 3
     6d6:	0c 94 c4 22 	jmp	0x4588	; 0x4588 <__prologue_saves__+0x18>
     6da:	69 83       	std	Y+1, r22	; 0x01
     6dc:	7a 83       	std	Y+2, r23	; 0x02
     6de:	8b 83       	std	Y+3, r24	; 0x03
     6e0:	9c 83       	std	Y+4, r25	; 0x04
     6e2:	2d 83       	std	Y+5, r18	; 0x05
     6e4:	3e 83       	std	Y+6, r19	; 0x06
     6e6:	4f 83       	std	Y+7, r20	; 0x07
     6e8:	58 87       	std	Y+8, r21	; 0x08
     6ea:	89 e0       	ldi	r24, 0x09	; 9
     6ec:	e8 2e       	mov	r14, r24
     6ee:	f1 2c       	mov	r15, r1
     6f0:	ec 0e       	add	r14, r28
     6f2:	fd 1e       	adc	r15, r29
     6f4:	ce 01       	movw	r24, r28
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	b7 01       	movw	r22, r14
     6fa:	0e 94 b8 05 	call	0xb70	; 0xb70 <__unpack_f>
     6fe:	8e 01       	movw	r16, r28
     700:	0f 5e       	subi	r16, 0xEF	; 239
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	ce 01       	movw	r24, r28
     706:	05 96       	adiw	r24, 0x05	; 5
     708:	b8 01       	movw	r22, r16
     70a:	0e 94 b8 05 	call	0xb70	; 0xb70 <__unpack_f>
     70e:	89 85       	ldd	r24, Y+9	; 0x09
     710:	82 30       	cpi	r24, 0x02	; 2
     712:	40 f0       	brcs	.+16     	; 0x724 <__gesf2+0x56>
     714:	89 89       	ldd	r24, Y+17	; 0x11
     716:	82 30       	cpi	r24, 0x02	; 2
     718:	28 f0       	brcs	.+10     	; 0x724 <__gesf2+0x56>
     71a:	c7 01       	movw	r24, r14
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 30 06 	call	0xc60	; 0xc60 <__fpcmp_parts_f>
     722:	01 c0       	rjmp	.+2      	; 0x726 <__gesf2+0x58>
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	68 96       	adiw	r28, 0x18	; 24
     728:	e6 e0       	ldi	r30, 0x06	; 6
     72a:	0c 94 e0 22 	jmp	0x45c0	; 0x45c0 <__epilogue_restores__+0x18>

0000072e <__ltsf2>:
     72e:	a8 e1       	ldi	r26, 0x18	; 24
     730:	b0 e0       	ldi	r27, 0x00	; 0
     732:	ed e9       	ldi	r30, 0x9D	; 157
     734:	f3 e0       	ldi	r31, 0x03	; 3
     736:	0c 94 c4 22 	jmp	0x4588	; 0x4588 <__prologue_saves__+0x18>
     73a:	69 83       	std	Y+1, r22	; 0x01
     73c:	7a 83       	std	Y+2, r23	; 0x02
     73e:	8b 83       	std	Y+3, r24	; 0x03
     740:	9c 83       	std	Y+4, r25	; 0x04
     742:	2d 83       	std	Y+5, r18	; 0x05
     744:	3e 83       	std	Y+6, r19	; 0x06
     746:	4f 83       	std	Y+7, r20	; 0x07
     748:	58 87       	std	Y+8, r21	; 0x08
     74a:	89 e0       	ldi	r24, 0x09	; 9
     74c:	e8 2e       	mov	r14, r24
     74e:	f1 2c       	mov	r15, r1
     750:	ec 0e       	add	r14, r28
     752:	fd 1e       	adc	r15, r29
     754:	ce 01       	movw	r24, r28
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	b7 01       	movw	r22, r14
     75a:	0e 94 b8 05 	call	0xb70	; 0xb70 <__unpack_f>
     75e:	8e 01       	movw	r16, r28
     760:	0f 5e       	subi	r16, 0xEF	; 239
     762:	1f 4f       	sbci	r17, 0xFF	; 255
     764:	ce 01       	movw	r24, r28
     766:	05 96       	adiw	r24, 0x05	; 5
     768:	b8 01       	movw	r22, r16
     76a:	0e 94 b8 05 	call	0xb70	; 0xb70 <__unpack_f>
     76e:	89 85       	ldd	r24, Y+9	; 0x09
     770:	82 30       	cpi	r24, 0x02	; 2
     772:	40 f0       	brcs	.+16     	; 0x784 <__ltsf2+0x56>
     774:	89 89       	ldd	r24, Y+17	; 0x11
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	28 f0       	brcs	.+10     	; 0x784 <__ltsf2+0x56>
     77a:	c7 01       	movw	r24, r14
     77c:	b8 01       	movw	r22, r16
     77e:	0e 94 30 06 	call	0xc60	; 0xc60 <__fpcmp_parts_f>
     782:	01 c0       	rjmp	.+2      	; 0x786 <__ltsf2+0x58>
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	68 96       	adiw	r28, 0x18	; 24
     788:	e6 e0       	ldi	r30, 0x06	; 6
     78a:	0c 94 e0 22 	jmp	0x45c0	; 0x45c0 <__epilogue_restores__+0x18>

0000078e <__fixsfsi>:
     78e:	ac e0       	ldi	r26, 0x0C	; 12
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	ed ec       	ldi	r30, 0xCD	; 205
     794:	f3 e0       	ldi	r31, 0x03	; 3
     796:	0c 94 c8 22 	jmp	0x4590	; 0x4590 <__prologue_saves__+0x20>
     79a:	69 83       	std	Y+1, r22	; 0x01
     79c:	7a 83       	std	Y+2, r23	; 0x02
     79e:	8b 83       	std	Y+3, r24	; 0x03
     7a0:	9c 83       	std	Y+4, r25	; 0x04
     7a2:	ce 01       	movw	r24, r28
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	be 01       	movw	r22, r28
     7a8:	6b 5f       	subi	r22, 0xFB	; 251
     7aa:	7f 4f       	sbci	r23, 0xFF	; 255
     7ac:	0e 94 b8 05 	call	0xb70	; 0xb70 <__unpack_f>
     7b0:	8d 81       	ldd	r24, Y+5	; 0x05
     7b2:	82 30       	cpi	r24, 0x02	; 2
     7b4:	61 f1       	breq	.+88     	; 0x80e <__fixsfsi+0x80>
     7b6:	82 30       	cpi	r24, 0x02	; 2
     7b8:	50 f1       	brcs	.+84     	; 0x80e <__fixsfsi+0x80>
     7ba:	84 30       	cpi	r24, 0x04	; 4
     7bc:	21 f4       	brne	.+8      	; 0x7c6 <__fixsfsi+0x38>
     7be:	8e 81       	ldd	r24, Y+6	; 0x06
     7c0:	88 23       	and	r24, r24
     7c2:	51 f1       	breq	.+84     	; 0x818 <__fixsfsi+0x8a>
     7c4:	2e c0       	rjmp	.+92     	; 0x822 <__fixsfsi+0x94>
     7c6:	2f 81       	ldd	r18, Y+7	; 0x07
     7c8:	38 85       	ldd	r19, Y+8	; 0x08
     7ca:	37 fd       	sbrc	r19, 7
     7cc:	20 c0       	rjmp	.+64     	; 0x80e <__fixsfsi+0x80>
     7ce:	6e 81       	ldd	r22, Y+6	; 0x06
     7d0:	2f 31       	cpi	r18, 0x1F	; 31
     7d2:	31 05       	cpc	r19, r1
     7d4:	1c f0       	brlt	.+6      	; 0x7dc <__fixsfsi+0x4e>
     7d6:	66 23       	and	r22, r22
     7d8:	f9 f0       	breq	.+62     	; 0x818 <__fixsfsi+0x8a>
     7da:	23 c0       	rjmp	.+70     	; 0x822 <__fixsfsi+0x94>
     7dc:	8e e1       	ldi	r24, 0x1E	; 30
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	82 1b       	sub	r24, r18
     7e2:	93 0b       	sbc	r25, r19
     7e4:	29 85       	ldd	r18, Y+9	; 0x09
     7e6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7e8:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ea:	5c 85       	ldd	r21, Y+12	; 0x0c
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <__fixsfsi+0x68>
     7ee:	56 95       	lsr	r21
     7f0:	47 95       	ror	r20
     7f2:	37 95       	ror	r19
     7f4:	27 95       	ror	r18
     7f6:	8a 95       	dec	r24
     7f8:	d2 f7       	brpl	.-12     	; 0x7ee <__fixsfsi+0x60>
     7fa:	66 23       	and	r22, r22
     7fc:	b1 f0       	breq	.+44     	; 0x82a <__fixsfsi+0x9c>
     7fe:	50 95       	com	r21
     800:	40 95       	com	r20
     802:	30 95       	com	r19
     804:	21 95       	neg	r18
     806:	3f 4f       	sbci	r19, 0xFF	; 255
     808:	4f 4f       	sbci	r20, 0xFF	; 255
     80a:	5f 4f       	sbci	r21, 0xFF	; 255
     80c:	0e c0       	rjmp	.+28     	; 0x82a <__fixsfsi+0x9c>
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	09 c0       	rjmp	.+18     	; 0x82a <__fixsfsi+0x9c>
     818:	2f ef       	ldi	r18, 0xFF	; 255
     81a:	3f ef       	ldi	r19, 0xFF	; 255
     81c:	4f ef       	ldi	r20, 0xFF	; 255
     81e:	5f e7       	ldi	r21, 0x7F	; 127
     820:	04 c0       	rjmp	.+8      	; 0x82a <__fixsfsi+0x9c>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e8       	ldi	r21, 0x80	; 128
     82a:	b9 01       	movw	r22, r18
     82c:	ca 01       	movw	r24, r20
     82e:	2c 96       	adiw	r28, 0x0c	; 12
     830:	e2 e0       	ldi	r30, 0x02	; 2
     832:	0c 94 e4 22 	jmp	0x45c8	; 0x45c8 <__epilogue_restores__+0x20>

00000836 <__floatunsisf>:
     836:	a8 e0       	ldi	r26, 0x08	; 8
     838:	b0 e0       	ldi	r27, 0x00	; 0
     83a:	e1 e2       	ldi	r30, 0x21	; 33
     83c:	f4 e0       	ldi	r31, 0x04	; 4
     83e:	0c 94 c0 22 	jmp	0x4580	; 0x4580 <__prologue_saves__+0x10>
     842:	7b 01       	movw	r14, r22
     844:	8c 01       	movw	r16, r24
     846:	61 15       	cp	r22, r1
     848:	71 05       	cpc	r23, r1
     84a:	81 05       	cpc	r24, r1
     84c:	91 05       	cpc	r25, r1
     84e:	19 f4       	brne	.+6      	; 0x856 <__floatunsisf+0x20>
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	89 83       	std	Y+1, r24	; 0x01
     854:	60 c0       	rjmp	.+192    	; 0x916 <__floatunsisf+0xe0>
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	89 83       	std	Y+1, r24	; 0x01
     85a:	8e e1       	ldi	r24, 0x1E	; 30
     85c:	c8 2e       	mov	r12, r24
     85e:	d1 2c       	mov	r13, r1
     860:	dc 82       	std	Y+4, r13	; 0x04
     862:	cb 82       	std	Y+3, r12	; 0x03
     864:	ed 82       	std	Y+5, r14	; 0x05
     866:	fe 82       	std	Y+6, r15	; 0x06
     868:	0f 83       	std	Y+7, r16	; 0x07
     86a:	18 87       	std	Y+8, r17	; 0x08
     86c:	c8 01       	movw	r24, r16
     86e:	b7 01       	movw	r22, r14
     870:	0e 94 94 04 	call	0x928	; 0x928 <__clzsi2>
     874:	fc 01       	movw	r30, r24
     876:	31 97       	sbiw	r30, 0x01	; 1
     878:	f7 ff       	sbrs	r31, 7
     87a:	3b c0       	rjmp	.+118    	; 0x8f2 <__floatunsisf+0xbc>
     87c:	22 27       	eor	r18, r18
     87e:	33 27       	eor	r19, r19
     880:	2e 1b       	sub	r18, r30
     882:	3f 0b       	sbc	r19, r31
     884:	57 01       	movw	r10, r14
     886:	68 01       	movw	r12, r16
     888:	02 2e       	mov	r0, r18
     88a:	04 c0       	rjmp	.+8      	; 0x894 <__floatunsisf+0x5e>
     88c:	d6 94       	lsr	r13
     88e:	c7 94       	ror	r12
     890:	b7 94       	ror	r11
     892:	a7 94       	ror	r10
     894:	0a 94       	dec	r0
     896:	d2 f7       	brpl	.-12     	; 0x88c <__floatunsisf+0x56>
     898:	40 e0       	ldi	r20, 0x00	; 0
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__floatunsisf+0x7c>
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	aa 1f       	adc	r26, r26
     8b0:	bb 1f       	adc	r27, r27
     8b2:	2a 95       	dec	r18
     8b4:	d2 f7       	brpl	.-12     	; 0x8aa <__floatunsisf+0x74>
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	a1 09       	sbc	r26, r1
     8ba:	b1 09       	sbc	r27, r1
     8bc:	8e 21       	and	r24, r14
     8be:	9f 21       	and	r25, r15
     8c0:	a0 23       	and	r26, r16
     8c2:	b1 23       	and	r27, r17
     8c4:	00 97       	sbiw	r24, 0x00	; 0
     8c6:	a1 05       	cpc	r26, r1
     8c8:	b1 05       	cpc	r27, r1
     8ca:	21 f0       	breq	.+8      	; 0x8d4 <__floatunsisf+0x9e>
     8cc:	41 e0       	ldi	r20, 0x01	; 1
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	4a 29       	or	r20, r10
     8d6:	5b 29       	or	r21, r11
     8d8:	6c 29       	or	r22, r12
     8da:	7d 29       	or	r23, r13
     8dc:	4d 83       	std	Y+5, r20	; 0x05
     8de:	5e 83       	std	Y+6, r21	; 0x06
     8e0:	6f 83       	std	Y+7, r22	; 0x07
     8e2:	78 87       	std	Y+8, r23	; 0x08
     8e4:	8e e1       	ldi	r24, 0x1E	; 30
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	8e 1b       	sub	r24, r30
     8ea:	9f 0b       	sbc	r25, r31
     8ec:	9c 83       	std	Y+4, r25	; 0x04
     8ee:	8b 83       	std	Y+3, r24	; 0x03
     8f0:	12 c0       	rjmp	.+36     	; 0x916 <__floatunsisf+0xe0>
     8f2:	30 97       	sbiw	r30, 0x00	; 0
     8f4:	81 f0       	breq	.+32     	; 0x916 <__floatunsisf+0xe0>
     8f6:	0e 2e       	mov	r0, r30
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__floatunsisf+0xcc>
     8fa:	ee 0c       	add	r14, r14
     8fc:	ff 1c       	adc	r15, r15
     8fe:	00 1f       	adc	r16, r16
     900:	11 1f       	adc	r17, r17
     902:	0a 94       	dec	r0
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__floatunsisf+0xc4>
     906:	ed 82       	std	Y+5, r14	; 0x05
     908:	fe 82       	std	Y+6, r15	; 0x06
     90a:	0f 83       	std	Y+7, r16	; 0x07
     90c:	18 87       	std	Y+8, r17	; 0x08
     90e:	ce 1a       	sub	r12, r30
     910:	df 0a       	sbc	r13, r31
     912:	dc 82       	std	Y+4, r13	; 0x04
     914:	cb 82       	std	Y+3, r12	; 0x03
     916:	1a 82       	std	Y+2, r1	; 0x02
     918:	ce 01       	movw	r24, r28
     91a:	01 96       	adiw	r24, 0x01	; 1
     91c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__pack_f>
     920:	28 96       	adiw	r28, 0x08	; 8
     922:	ea e0       	ldi	r30, 0x0A	; 10
     924:	0c 94 dc 22 	jmp	0x45b8	; 0x45b8 <__epilogue_restores__+0x10>

00000928 <__clzsi2>:
     928:	ef 92       	push	r14
     92a:	ff 92       	push	r15
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	7b 01       	movw	r14, r22
     932:	8c 01       	movw	r16, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	e8 16       	cp	r14, r24
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	f8 06       	cpc	r15, r24
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	08 07       	cpc	r16, r24
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	18 07       	cpc	r17, r24
     944:	88 f4       	brcc	.+34     	; 0x968 <__clzsi2+0x40>
     946:	8f ef       	ldi	r24, 0xFF	; 255
     948:	e8 16       	cp	r14, r24
     94a:	f1 04       	cpc	r15, r1
     94c:	01 05       	cpc	r16, r1
     94e:	11 05       	cpc	r17, r1
     950:	31 f0       	breq	.+12     	; 0x95e <__clzsi2+0x36>
     952:	28 f0       	brcs	.+10     	; 0x95e <__clzsi2+0x36>
     954:	88 e0       	ldi	r24, 0x08	; 8
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a0 e0       	ldi	r26, 0x00	; 0
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	17 c0       	rjmp	.+46     	; 0x98c <__clzsi2+0x64>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e0       	ldi	r26, 0x00	; 0
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	12 c0       	rjmp	.+36     	; 0x98c <__clzsi2+0x64>
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	e8 16       	cp	r14, r24
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	f8 06       	cpc	r15, r24
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	08 07       	cpc	r16, r24
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	18 07       	cpc	r17, r24
     978:	28 f0       	brcs	.+10     	; 0x984 <__clzsi2+0x5c>
     97a:	88 e1       	ldi	r24, 0x18	; 24
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	a0 e0       	ldi	r26, 0x00	; 0
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	04 c0       	rjmp	.+8      	; 0x98c <__clzsi2+0x64>
     984:	80 e1       	ldi	r24, 0x10	; 16
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a0 e0       	ldi	r26, 0x00	; 0
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	20 e2       	ldi	r18, 0x20	; 32
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	28 1b       	sub	r18, r24
     996:	39 0b       	sbc	r19, r25
     998:	4a 0b       	sbc	r20, r26
     99a:	5b 0b       	sbc	r21, r27
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__clzsi2+0x7e>
     99e:	16 95       	lsr	r17
     9a0:	07 95       	ror	r16
     9a2:	f7 94       	ror	r15
     9a4:	e7 94       	ror	r14
     9a6:	8a 95       	dec	r24
     9a8:	d2 f7       	brpl	.-12     	; 0x99e <__clzsi2+0x76>
     9aa:	f7 01       	movw	r30, r14
     9ac:	e1 50       	subi	r30, 0x01	; 1
     9ae:	fe 4f       	sbci	r31, 0xFE	; 254
     9b0:	80 81       	ld	r24, Z
     9b2:	28 1b       	sub	r18, r24
     9b4:	31 09       	sbc	r19, r1
     9b6:	41 09       	sbc	r20, r1
     9b8:	51 09       	sbc	r21, r1
     9ba:	c9 01       	movw	r24, r18
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	08 95       	ret

000009c6 <__pack_f>:
     9c6:	df 92       	push	r13
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	fc 01       	movw	r30, r24
     9d2:	e4 80       	ldd	r14, Z+4	; 0x04
     9d4:	f5 80       	ldd	r15, Z+5	; 0x05
     9d6:	06 81       	ldd	r16, Z+6	; 0x06
     9d8:	17 81       	ldd	r17, Z+7	; 0x07
     9da:	d1 80       	ldd	r13, Z+1	; 0x01
     9dc:	80 81       	ld	r24, Z
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	48 f4       	brcc	.+18     	; 0x9f4 <__pack_f+0x2e>
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	a0 e1       	ldi	r26, 0x10	; 16
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	e8 2a       	or	r14, r24
     9ec:	f9 2a       	or	r15, r25
     9ee:	0a 2b       	or	r16, r26
     9f0:	1b 2b       	or	r17, r27
     9f2:	a5 c0       	rjmp	.+330    	; 0xb3e <__pack_f+0x178>
     9f4:	84 30       	cpi	r24, 0x04	; 4
     9f6:	09 f4       	brne	.+2      	; 0x9fa <__pack_f+0x34>
     9f8:	9f c0       	rjmp	.+318    	; 0xb38 <__pack_f+0x172>
     9fa:	82 30       	cpi	r24, 0x02	; 2
     9fc:	21 f4       	brne	.+8      	; 0xa06 <__pack_f+0x40>
     9fe:	ee 24       	eor	r14, r14
     a00:	ff 24       	eor	r15, r15
     a02:	87 01       	movw	r16, r14
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <__pack_f+0x4a>
     a06:	e1 14       	cp	r14, r1
     a08:	f1 04       	cpc	r15, r1
     a0a:	01 05       	cpc	r16, r1
     a0c:	11 05       	cpc	r17, r1
     a0e:	19 f4       	brne	.+6      	; 0xa16 <__pack_f+0x50>
     a10:	e0 e0       	ldi	r30, 0x00	; 0
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	96 c0       	rjmp	.+300    	; 0xb42 <__pack_f+0x17c>
     a16:	62 81       	ldd	r22, Z+2	; 0x02
     a18:	73 81       	ldd	r23, Z+3	; 0x03
     a1a:	9f ef       	ldi	r25, 0xFF	; 255
     a1c:	62 38       	cpi	r22, 0x82	; 130
     a1e:	79 07       	cpc	r23, r25
     a20:	0c f0       	brlt	.+2      	; 0xa24 <__pack_f+0x5e>
     a22:	5b c0       	rjmp	.+182    	; 0xada <__pack_f+0x114>
     a24:	22 e8       	ldi	r18, 0x82	; 130
     a26:	3f ef       	ldi	r19, 0xFF	; 255
     a28:	26 1b       	sub	r18, r22
     a2a:	37 0b       	sbc	r19, r23
     a2c:	2a 31       	cpi	r18, 0x1A	; 26
     a2e:	31 05       	cpc	r19, r1
     a30:	2c f0       	brlt	.+10     	; 0xa3c <__pack_f+0x76>
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	40 e0       	ldi	r20, 0x00	; 0
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	2a c0       	rjmp	.+84     	; 0xa90 <__pack_f+0xca>
     a3c:	b8 01       	movw	r22, r16
     a3e:	a7 01       	movw	r20, r14
     a40:	02 2e       	mov	r0, r18
     a42:	04 c0       	rjmp	.+8      	; 0xa4c <__pack_f+0x86>
     a44:	76 95       	lsr	r23
     a46:	67 95       	ror	r22
     a48:	57 95       	ror	r21
     a4a:	47 95       	ror	r20
     a4c:	0a 94       	dec	r0
     a4e:	d2 f7       	brpl	.-12     	; 0xa44 <__pack_f+0x7e>
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__pack_f+0x9c>
     a5a:	88 0f       	add	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	aa 1f       	adc	r26, r26
     a60:	bb 1f       	adc	r27, r27
     a62:	2a 95       	dec	r18
     a64:	d2 f7       	brpl	.-12     	; 0xa5a <__pack_f+0x94>
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	8e 21       	and	r24, r14
     a6e:	9f 21       	and	r25, r15
     a70:	a0 23       	and	r26, r16
     a72:	b1 23       	and	r27, r17
     a74:	00 97       	sbiw	r24, 0x00	; 0
     a76:	a1 05       	cpc	r26, r1
     a78:	b1 05       	cpc	r27, r1
     a7a:	21 f0       	breq	.+8      	; 0xa84 <__pack_f+0xbe>
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	9a 01       	movw	r18, r20
     a86:	ab 01       	movw	r20, r22
     a88:	28 2b       	or	r18, r24
     a8a:	39 2b       	or	r19, r25
     a8c:	4a 2b       	or	r20, r26
     a8e:	5b 2b       	or	r21, r27
     a90:	da 01       	movw	r26, r20
     a92:	c9 01       	movw	r24, r18
     a94:	8f 77       	andi	r24, 0x7F	; 127
     a96:	90 70       	andi	r25, 0x00	; 0
     a98:	a0 70       	andi	r26, 0x00	; 0
     a9a:	b0 70       	andi	r27, 0x00	; 0
     a9c:	80 34       	cpi	r24, 0x40	; 64
     a9e:	91 05       	cpc	r25, r1
     aa0:	a1 05       	cpc	r26, r1
     aa2:	b1 05       	cpc	r27, r1
     aa4:	39 f4       	brne	.+14     	; 0xab4 <__pack_f+0xee>
     aa6:	27 ff       	sbrs	r18, 7
     aa8:	09 c0       	rjmp	.+18     	; 0xabc <__pack_f+0xf6>
     aaa:	20 5c       	subi	r18, 0xC0	; 192
     aac:	3f 4f       	sbci	r19, 0xFF	; 255
     aae:	4f 4f       	sbci	r20, 0xFF	; 255
     ab0:	5f 4f       	sbci	r21, 0xFF	; 255
     ab2:	04 c0       	rjmp	.+8      	; 0xabc <__pack_f+0xf6>
     ab4:	21 5c       	subi	r18, 0xC1	; 193
     ab6:	3f 4f       	sbci	r19, 0xFF	; 255
     ab8:	4f 4f       	sbci	r20, 0xFF	; 255
     aba:	5f 4f       	sbci	r21, 0xFF	; 255
     abc:	e0 e0       	ldi	r30, 0x00	; 0
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	20 30       	cpi	r18, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	3a 07       	cpc	r19, r26
     ac6:	a0 e0       	ldi	r26, 0x00	; 0
     ac8:	4a 07       	cpc	r20, r26
     aca:	a0 e4       	ldi	r26, 0x40	; 64
     acc:	5a 07       	cpc	r21, r26
     ace:	10 f0       	brcs	.+4      	; 0xad4 <__pack_f+0x10e>
     ad0:	e1 e0       	ldi	r30, 0x01	; 1
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	79 01       	movw	r14, r18
     ad6:	8a 01       	movw	r16, r20
     ad8:	27 c0       	rjmp	.+78     	; 0xb28 <__pack_f+0x162>
     ada:	60 38       	cpi	r22, 0x80	; 128
     adc:	71 05       	cpc	r23, r1
     ade:	64 f5       	brge	.+88     	; 0xb38 <__pack_f+0x172>
     ae0:	fb 01       	movw	r30, r22
     ae2:	e1 58       	subi	r30, 0x81	; 129
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	d8 01       	movw	r26, r16
     ae8:	c7 01       	movw	r24, r14
     aea:	8f 77       	andi	r24, 0x7F	; 127
     aec:	90 70       	andi	r25, 0x00	; 0
     aee:	a0 70       	andi	r26, 0x00	; 0
     af0:	b0 70       	andi	r27, 0x00	; 0
     af2:	80 34       	cpi	r24, 0x40	; 64
     af4:	91 05       	cpc	r25, r1
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	39 f4       	brne	.+14     	; 0xb0a <__pack_f+0x144>
     afc:	e7 fe       	sbrs	r14, 7
     afe:	0d c0       	rjmp	.+26     	; 0xb1a <__pack_f+0x154>
     b00:	80 e4       	ldi	r24, 0x40	; 64
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	04 c0       	rjmp	.+8      	; 0xb12 <__pack_f+0x14c>
     b0a:	8f e3       	ldi	r24, 0x3F	; 63
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	a0 e0       	ldi	r26, 0x00	; 0
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	e8 0e       	add	r14, r24
     b14:	f9 1e       	adc	r15, r25
     b16:	0a 1f       	adc	r16, r26
     b18:	1b 1f       	adc	r17, r27
     b1a:	17 ff       	sbrs	r17, 7
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <__pack_f+0x162>
     b1e:	16 95       	lsr	r17
     b20:	07 95       	ror	r16
     b22:	f7 94       	ror	r15
     b24:	e7 94       	ror	r14
     b26:	31 96       	adiw	r30, 0x01	; 1
     b28:	87 e0       	ldi	r24, 0x07	; 7
     b2a:	16 95       	lsr	r17
     b2c:	07 95       	ror	r16
     b2e:	f7 94       	ror	r15
     b30:	e7 94       	ror	r14
     b32:	8a 95       	dec	r24
     b34:	d1 f7       	brne	.-12     	; 0xb2a <__pack_f+0x164>
     b36:	05 c0       	rjmp	.+10     	; 0xb42 <__pack_f+0x17c>
     b38:	ee 24       	eor	r14, r14
     b3a:	ff 24       	eor	r15, r15
     b3c:	87 01       	movw	r16, r14
     b3e:	ef ef       	ldi	r30, 0xFF	; 255
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	6e 2f       	mov	r22, r30
     b44:	67 95       	ror	r22
     b46:	66 27       	eor	r22, r22
     b48:	67 95       	ror	r22
     b4a:	90 2f       	mov	r25, r16
     b4c:	9f 77       	andi	r25, 0x7F	; 127
     b4e:	d7 94       	ror	r13
     b50:	dd 24       	eor	r13, r13
     b52:	d7 94       	ror	r13
     b54:	8e 2f       	mov	r24, r30
     b56:	86 95       	lsr	r24
     b58:	49 2f       	mov	r20, r25
     b5a:	46 2b       	or	r20, r22
     b5c:	58 2f       	mov	r21, r24
     b5e:	5d 29       	or	r21, r13
     b60:	b7 01       	movw	r22, r14
     b62:	ca 01       	movw	r24, r20
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	08 95       	ret

00000b70 <__unpack_f>:
     b70:	fc 01       	movw	r30, r24
     b72:	db 01       	movw	r26, r22
     b74:	40 81       	ld	r20, Z
     b76:	51 81       	ldd	r21, Z+1	; 0x01
     b78:	22 81       	ldd	r18, Z+2	; 0x02
     b7a:	62 2f       	mov	r22, r18
     b7c:	6f 77       	andi	r22, 0x7F	; 127
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	22 1f       	adc	r18, r18
     b82:	22 27       	eor	r18, r18
     b84:	22 1f       	adc	r18, r18
     b86:	93 81       	ldd	r25, Z+3	; 0x03
     b88:	89 2f       	mov	r24, r25
     b8a:	88 0f       	add	r24, r24
     b8c:	82 2b       	or	r24, r18
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	99 1f       	adc	r25, r25
     b94:	99 27       	eor	r25, r25
     b96:	99 1f       	adc	r25, r25
     b98:	11 96       	adiw	r26, 0x01	; 1
     b9a:	9c 93       	st	X, r25
     b9c:	11 97       	sbiw	r26, 0x01	; 1
     b9e:	21 15       	cp	r18, r1
     ba0:	31 05       	cpc	r19, r1
     ba2:	a9 f5       	brne	.+106    	; 0xc0e <__unpack_f+0x9e>
     ba4:	41 15       	cp	r20, r1
     ba6:	51 05       	cpc	r21, r1
     ba8:	61 05       	cpc	r22, r1
     baa:	71 05       	cpc	r23, r1
     bac:	11 f4       	brne	.+4      	; 0xbb2 <__unpack_f+0x42>
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	37 c0       	rjmp	.+110    	; 0xc20 <__unpack_f+0xb0>
     bb2:	82 e8       	ldi	r24, 0x82	; 130
     bb4:	9f ef       	ldi	r25, 0xFF	; 255
     bb6:	13 96       	adiw	r26, 0x03	; 3
     bb8:	9c 93       	st	X, r25
     bba:	8e 93       	st	-X, r24
     bbc:	12 97       	sbiw	r26, 0x02	; 2
     bbe:	9a 01       	movw	r18, r20
     bc0:	ab 01       	movw	r20, r22
     bc2:	67 e0       	ldi	r22, 0x07	; 7
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	44 1f       	adc	r20, r20
     bca:	55 1f       	adc	r21, r21
     bcc:	6a 95       	dec	r22
     bce:	d1 f7       	brne	.-12     	; 0xbc4 <__unpack_f+0x54>
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	8c 93       	st	X, r24
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__unpack_f+0x80>
     bd6:	22 0f       	add	r18, r18
     bd8:	33 1f       	adc	r19, r19
     bda:	44 1f       	adc	r20, r20
     bdc:	55 1f       	adc	r21, r21
     bde:	12 96       	adiw	r26, 0x02	; 2
     be0:	8d 91       	ld	r24, X+
     be2:	9c 91       	ld	r25, X
     be4:	13 97       	sbiw	r26, 0x03	; 3
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	13 96       	adiw	r26, 0x03	; 3
     bea:	9c 93       	st	X, r25
     bec:	8e 93       	st	-X, r24
     bee:	12 97       	sbiw	r26, 0x02	; 2
     bf0:	20 30       	cpi	r18, 0x00	; 0
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	38 07       	cpc	r19, r24
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	48 07       	cpc	r20, r24
     bfa:	80 e4       	ldi	r24, 0x40	; 64
     bfc:	58 07       	cpc	r21, r24
     bfe:	58 f3       	brcs	.-42     	; 0xbd6 <__unpack_f+0x66>
     c00:	14 96       	adiw	r26, 0x04	; 4
     c02:	2d 93       	st	X+, r18
     c04:	3d 93       	st	X+, r19
     c06:	4d 93       	st	X+, r20
     c08:	5c 93       	st	X, r21
     c0a:	17 97       	sbiw	r26, 0x07	; 7
     c0c:	08 95       	ret
     c0e:	2f 3f       	cpi	r18, 0xFF	; 255
     c10:	31 05       	cpc	r19, r1
     c12:	79 f4       	brne	.+30     	; 0xc32 <__unpack_f+0xc2>
     c14:	41 15       	cp	r20, r1
     c16:	51 05       	cpc	r21, r1
     c18:	61 05       	cpc	r22, r1
     c1a:	71 05       	cpc	r23, r1
     c1c:	19 f4       	brne	.+6      	; 0xc24 <__unpack_f+0xb4>
     c1e:	84 e0       	ldi	r24, 0x04	; 4
     c20:	8c 93       	st	X, r24
     c22:	08 95       	ret
     c24:	64 ff       	sbrs	r22, 4
     c26:	03 c0       	rjmp	.+6      	; 0xc2e <__unpack_f+0xbe>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	8c 93       	st	X, r24
     c2c:	12 c0       	rjmp	.+36     	; 0xc52 <__unpack_f+0xe2>
     c2e:	1c 92       	st	X, r1
     c30:	10 c0       	rjmp	.+32     	; 0xc52 <__unpack_f+0xe2>
     c32:	2f 57       	subi	r18, 0x7F	; 127
     c34:	30 40       	sbci	r19, 0x00	; 0
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	3c 93       	st	X, r19
     c3a:	2e 93       	st	-X, r18
     c3c:	12 97       	sbiw	r26, 0x02	; 2
     c3e:	83 e0       	ldi	r24, 0x03	; 3
     c40:	8c 93       	st	X, r24
     c42:	87 e0       	ldi	r24, 0x07	; 7
     c44:	44 0f       	add	r20, r20
     c46:	55 1f       	adc	r21, r21
     c48:	66 1f       	adc	r22, r22
     c4a:	77 1f       	adc	r23, r23
     c4c:	8a 95       	dec	r24
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <__unpack_f+0xd4>
     c50:	70 64       	ori	r23, 0x40	; 64
     c52:	14 96       	adiw	r26, 0x04	; 4
     c54:	4d 93       	st	X+, r20
     c56:	5d 93       	st	X+, r21
     c58:	6d 93       	st	X+, r22
     c5a:	7c 93       	st	X, r23
     c5c:	17 97       	sbiw	r26, 0x07	; 7
     c5e:	08 95       	ret

00000c60 <__fpcmp_parts_f>:
     c60:	1f 93       	push	r17
     c62:	dc 01       	movw	r26, r24
     c64:	fb 01       	movw	r30, r22
     c66:	9c 91       	ld	r25, X
     c68:	92 30       	cpi	r25, 0x02	; 2
     c6a:	08 f4       	brcc	.+2      	; 0xc6e <__fpcmp_parts_f+0xe>
     c6c:	47 c0       	rjmp	.+142    	; 0xcfc <__fpcmp_parts_f+0x9c>
     c6e:	80 81       	ld	r24, Z
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	08 f4       	brcc	.+2      	; 0xc76 <__fpcmp_parts_f+0x16>
     c74:	43 c0       	rjmp	.+134    	; 0xcfc <__fpcmp_parts_f+0x9c>
     c76:	94 30       	cpi	r25, 0x04	; 4
     c78:	51 f4       	brne	.+20     	; 0xc8e <__fpcmp_parts_f+0x2e>
     c7a:	11 96       	adiw	r26, 0x01	; 1
     c7c:	1c 91       	ld	r17, X
     c7e:	84 30       	cpi	r24, 0x04	; 4
     c80:	99 f5       	brne	.+102    	; 0xce8 <__fpcmp_parts_f+0x88>
     c82:	81 81       	ldd	r24, Z+1	; 0x01
     c84:	68 2f       	mov	r22, r24
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	61 1b       	sub	r22, r17
     c8a:	71 09       	sbc	r23, r1
     c8c:	3f c0       	rjmp	.+126    	; 0xd0c <__fpcmp_parts_f+0xac>
     c8e:	84 30       	cpi	r24, 0x04	; 4
     c90:	21 f0       	breq	.+8      	; 0xc9a <__fpcmp_parts_f+0x3a>
     c92:	92 30       	cpi	r25, 0x02	; 2
     c94:	31 f4       	brne	.+12     	; 0xca2 <__fpcmp_parts_f+0x42>
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	b9 f1       	breq	.+110    	; 0xd08 <__fpcmp_parts_f+0xa8>
     c9a:	81 81       	ldd	r24, Z+1	; 0x01
     c9c:	88 23       	and	r24, r24
     c9e:	89 f1       	breq	.+98     	; 0xd02 <__fpcmp_parts_f+0xa2>
     ca0:	2d c0       	rjmp	.+90     	; 0xcfc <__fpcmp_parts_f+0x9c>
     ca2:	11 96       	adiw	r26, 0x01	; 1
     ca4:	1c 91       	ld	r17, X
     ca6:	11 97       	sbiw	r26, 0x01	; 1
     ca8:	82 30       	cpi	r24, 0x02	; 2
     caa:	f1 f0       	breq	.+60     	; 0xce8 <__fpcmp_parts_f+0x88>
     cac:	81 81       	ldd	r24, Z+1	; 0x01
     cae:	18 17       	cp	r17, r24
     cb0:	d9 f4       	brne	.+54     	; 0xce8 <__fpcmp_parts_f+0x88>
     cb2:	12 96       	adiw	r26, 0x02	; 2
     cb4:	2d 91       	ld	r18, X+
     cb6:	3c 91       	ld	r19, X
     cb8:	13 97       	sbiw	r26, 0x03	; 3
     cba:	82 81       	ldd	r24, Z+2	; 0x02
     cbc:	93 81       	ldd	r25, Z+3	; 0x03
     cbe:	82 17       	cp	r24, r18
     cc0:	93 07       	cpc	r25, r19
     cc2:	94 f0       	brlt	.+36     	; 0xce8 <__fpcmp_parts_f+0x88>
     cc4:	28 17       	cp	r18, r24
     cc6:	39 07       	cpc	r19, r25
     cc8:	bc f0       	brlt	.+46     	; 0xcf8 <__fpcmp_parts_f+0x98>
     cca:	14 96       	adiw	r26, 0x04	; 4
     ccc:	8d 91       	ld	r24, X+
     cce:	9d 91       	ld	r25, X+
     cd0:	0d 90       	ld	r0, X+
     cd2:	bc 91       	ld	r27, X
     cd4:	a0 2d       	mov	r26, r0
     cd6:	24 81       	ldd	r18, Z+4	; 0x04
     cd8:	35 81       	ldd	r19, Z+5	; 0x05
     cda:	46 81       	ldd	r20, Z+6	; 0x06
     cdc:	57 81       	ldd	r21, Z+7	; 0x07
     cde:	28 17       	cp	r18, r24
     ce0:	39 07       	cpc	r19, r25
     ce2:	4a 07       	cpc	r20, r26
     ce4:	5b 07       	cpc	r21, r27
     ce6:	18 f4       	brcc	.+6      	; 0xcee <__fpcmp_parts_f+0x8e>
     ce8:	11 23       	and	r17, r17
     cea:	41 f0       	breq	.+16     	; 0xcfc <__fpcmp_parts_f+0x9c>
     cec:	0a c0       	rjmp	.+20     	; 0xd02 <__fpcmp_parts_f+0xa2>
     cee:	82 17       	cp	r24, r18
     cf0:	93 07       	cpc	r25, r19
     cf2:	a4 07       	cpc	r26, r20
     cf4:	b5 07       	cpc	r27, r21
     cf6:	40 f4       	brcc	.+16     	; 0xd08 <__fpcmp_parts_f+0xa8>
     cf8:	11 23       	and	r17, r17
     cfa:	19 f0       	breq	.+6      	; 0xd02 <__fpcmp_parts_f+0xa2>
     cfc:	61 e0       	ldi	r22, 0x01	; 1
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	05 c0       	rjmp	.+10     	; 0xd0c <__fpcmp_parts_f+0xac>
     d02:	6f ef       	ldi	r22, 0xFF	; 255
     d04:	7f ef       	ldi	r23, 0xFF	; 255
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <__fpcmp_parts_f+0xac>
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	cb 01       	movw	r24, r22
     d0e:	1f 91       	pop	r17
     d10:	08 95       	ret

00000d12 <ADC_VidINIT>:
//		GPFunc();
//	}
//}

void ADC_VidINIT(void)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
	/***********ADC VOLTAGE REFFRANCE ***********/
	#if 	ADC_Vref==Internal_Vref_turned_off
		CLR_BIT(ADMUX,REFS0);
		CLR_BIT(ADMUX,REFS1);
	#elif	ADC_Vref==Vref_AVCC
		SET_BIT(ADMUX,REFS0);
     d1a:	a7 e2       	ldi	r26, 0x27	; 39
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e7 e2       	ldi	r30, 0x27	; 39
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	80 64       	ori	r24, 0x40	; 64
     d26:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
     d28:	a7 e2       	ldi	r26, 0x27	; 39
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e7 e2       	ldi	r30, 0x27	; 39
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8f 77       	andi	r24, 0x7F	; 127
     d34:	8c 93       	st	X, r24
	#elif     ADC_Prescaler==ADC_Prescaler_64
			 CLR_BIT(ADCSRA,ADPS0);\
			 SET_BIT(ADCSRA,ADPS1);\
			 SET_BIT(ADCSRA,ADPS2);
	#elif     ADC_Prescaler==ADC_Prescaler_128
			 SET_BIT(ADCSRA,ADPS0);\
     d36:	a6 e2       	ldi	r26, 0x26	; 38
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e6 e2       	ldi	r30, 0x26	; 38
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	81 60       	ori	r24, 0x01	; 1
     d42:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS1);\
     d44:	a6 e2       	ldi	r26, 0x26	; 38
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e6 e2       	ldi	r30, 0x26	; 38
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	82 60       	ori	r24, 0x02	; 2
     d50:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
     d52:	a6 e2       	ldi	r26, 0x26	; 38
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e6 e2       	ldi	r30, 0x26	; 38
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	84 60       	ori	r24, 0x04	; 4
     d5e:	8c 93       	st	X, r24
	#endif

	/************ ADC SAVE FROM **************/
	#if  	ADC_SAVE_FROM==Right_Adjust
		CLR_BIT(ADMUX,ADLAR);
     d60:	a7 e2       	ldi	r26, 0x27	; 39
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e7 e2       	ldi	r30, 0x27	; 39
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	8f 7d       	andi	r24, 0xDF	; 223
     d6c:	8c 93       	st	X, r24
		SET_BIT(ADMUX,ADLAR);

	#endif
	/***************ADC MODE******************/
	#if	ADC_Mode==ADC_Single_Conversion
		CLR_BIT(ADCSRA,ADSC);
     d6e:	a6 e2       	ldi	r26, 0x26	; 38
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e6 e2       	ldi	r30, 0x26	; 38
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	8f 7b       	andi	r24, 0xBF	; 191
     d7a:	8c 93       	st	X, r24
		SET_BIT(SFIOR,ADTS1);
		CLR_BIT(SFIOR,ADTS2);
	
	#endif

}
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <ADC_Enable>:
void ADC_Enable(void)
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
	/************ADC ENABLE ******************/
	SET_BIT(ADCSRA,ADEN);
     d8a:	a6 e2       	ldi	r26, 0x26	; 38
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e6 e2       	ldi	r30, 0x26	; 38
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	80 68       	ori	r24, 0x80	; 128
     d96:	8c 93       	st	X, r24
}
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <ADC_Start_Conversion>:
void ADC_Start_Conversion(void)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADSC);
     da6:	a6 e2       	ldi	r26, 0x26	; 38
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e6 e2       	ldi	r30, 0x26	; 38
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	80 64       	ori	r24, 0x40	; 64
     db2:	8c 93       	st	X, r24
}
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <ADC_Select_Channal>:
void ADC_Select_Channal(u8 Channel)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	0f 92       	push	r0
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0B11100000;
     dc6:	a7 e2       	ldi	r26, 0x27	; 39
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e7 e2       	ldi	r30, 0x27	; 39
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	80 7e       	andi	r24, 0xE0	; 224
     dd2:	8c 93       	st	X, r24
	ADMUX|=Channel;
     dd4:	a7 e2       	ldi	r26, 0x27	; 39
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e7 e2       	ldi	r30, 0x27	; 39
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	90 81       	ld	r25, Z
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	89 2b       	or	r24, r25
     de2:	8c 93       	st	X, r24
}
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <ADC_Wait_Flag>:

void ADC_Wait_Flag(void)
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(ADCSRA,ADIF)!=1); //WAIT UNTILL FLAG=1
     df4:	e6 e2       	ldi	r30, 0x26	; 38
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	82 95       	swap	r24
     dfc:	8f 70       	andi	r24, 0x0F	; 15
     dfe:	88 2f       	mov	r24, r24
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	81 70       	andi	r24, 0x01	; 1
     e04:	90 70       	andi	r25, 0x00	; 0
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	a9 f3       	breq	.-22     	; 0xdf4 <ADC_Wait_Flag+0x8>
	SET_BIT(ADCSRA,ADIF);	  //CLEAR FLAG
     e0a:	a6 e2       	ldi	r26, 0x26	; 38
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e6 e2       	ldi	r30, 0x26	; 38
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 61       	ori	r24, 0x10	; 16
     e16:	8c 93       	st	X, r24
}
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <ADC_Get_Result>:
void ADC_Get_Result(u16 *ptr)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <ADC_Get_Result+0x6>
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	89 83       	std	Y+1, r24	; 0x01
	*ptr=ADC;
     e2c:	e4 e2       	ldi	r30, 0x24	; 36
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	91 81       	ldd	r25, Z+1	; 0x01
     e34:	e9 81       	ldd	r30, Y+1	; 0x01
     e36:	fa 81       	ldd	r31, Y+2	; 0x02
     e38:	91 83       	std	Z+1, r25	; 0x01
     e3a:	80 83       	st	Z, r24
	ADC=0;
     e3c:	e4 e2       	ldi	r30, 0x24	; 36
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	11 82       	std	Z+1, r1	; 0x01
     e42:	10 82       	st	Z, r1
}
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <DIO_INIT>:
#include "DIO_Interface.h"
#include "DIO_Registers.h"
#include "DIO_Config.h"

void DIO_INIT(void)
{
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG = Conc(DIO_PORTA_PIN7_INIT_DIR,DIO_PORTA_PIN6_INIT_DIR,DIO_PORTA_PIN5_INIT_DIR,
     e56:	ea e3       	ldi	r30, 0x3A	; 58
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	10 82       	st	Z, r1
					DIO_PORTA_PIN4_INIT_DIR,DIO_PORTA_PIN3_INIT_DIR,DIO_PORTA_PIN2_INIT_DIR,
					DIO_PORTA_PIN1_INIT_DIR,DIO_PORTA_PIN0_INIT_DIR);
	DDRB_REG = Conc(DIO_PORTB_PIN7_INIT_DIR,DIO_PORTB_PIN6_INIT_DIR,DIO_PORTB_PIN5_INIT_DIR,
     e5c:	e7 e3       	ldi	r30, 0x37	; 55
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	10 82       	st	Z, r1
					DIO_PORTB_PIN4_INIT_DIR,DIO_PORTB_PIN3_INIT_DIR,DIO_PORTB_PIN2_INIT_DIR,
					DIO_PORTB_PIN1_INIT_DIR,DIO_PORTB_PIN0_INIT_DIR);
	DDRC_REG = Conc(DIO_PORTC_PIN7_INIT_DIR,DIO_PORTC_PIN6_INIT_DIR,DIO_PORTC_PIN5_INIT_DIR,
     e62:	e4 e3       	ldi	r30, 0x34	; 52
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	10 82       	st	Z, r1
					DIO_PORTC_PIN4_INIT_DIR,DIO_PORTC_PIN3_INIT_DIR,DIO_PORTC_PIN2_INIT_DIR,
					DIO_PORTC_PIN1_INIT_DIR,DIO_PORTC_PIN0_INIT_DIR);
	DDRD_REG = Conc(DIO_PORTD_PIN7_INIT_DIR,DIO_PORTD_PIN6_INIT_DIR,DIO_PORTD_PIN5_INIT_DIR,
     e68:	e1 e3       	ldi	r30, 0x31	; 49
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	10 82       	st	Z, r1
					DIO_PORTD_PIN4_INIT_DIR,DIO_PORTD_PIN3_INIT_DIR,DIO_PORTD_PIN2_INIT_DIR,
					DIO_PORTD_PIN1_INIT_DIR,DIO_PORTD_PIN0_INIT_DIR);
	DDRE_REG = Conc(DIO_PORTE_PIN7_INIT_DIR,DIO_PORTE_PIN6_INIT_DIR,DIO_PORTE_PIN5_INIT_DIR,
     e6e:	e2 e2       	ldi	r30, 0x22	; 34
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	82 e2       	ldi	r24, 0x22	; 34
     e74:	80 83       	st	Z, r24
					DIO_PORTE_PIN4_INIT_DIR,DIO_PORTE_PIN3_INIT_DIR,DIO_PORTE_PIN2_INIT_DIR,
					DIO_PORTE_PIN1_INIT_DIR,DIO_PORTE_PIN0_INIT_DIR);
	DDRF_REG = Conc(DIO_PORTF_PIN7_INIT_DIR,DIO_PORTF_PIN6_INIT_DIR,DIO_PORTF_PIN5_INIT_DIR,
     e76:	e1 e6       	ldi	r30, 0x61	; 97
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	10 82       	st	Z, r1
					DIO_PORTF_PIN4_INIT_DIR,DIO_PORTF_PIN3_INIT_DIR,DIO_PORTF_PIN2_INIT_DIR,
					DIO_PORTF_PIN1_INIT_DIR,DIO_PORTF_PIN0_INIT_DIR);
	DDRG_REG = Conc(0,0,0,DIO_PORTG_PIN4_INIT_DIR,
     e7c:	e4 e6       	ldi	r30, 0x64	; 100
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	10 82       	st	Z, r1
					DIO_PORTG_PIN3_INIT_DIR,DIO_PORTG_PIN2_INIT_DIR,
					DIO_PORTG_PIN1_INIT_DIR,DIO_PORTG_PIN0_INIT_DIR);

	PORTA_REG = Conc(DIO_PORTA_PIN7_INIT_Val,DIO_PORTA_PIN6_INIT_Val,DIO_PORTA_PIN5_INIT_Val,
     e82:	eb e3       	ldi	r30, 0x3B	; 59
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	10 82       	st	Z, r1
					DIO_PORTA_PIN4_INIT_Val,DIO_PORTA_PIN3_INIT_Val,DIO_PORTA_PIN2_INIT_Val,
					DIO_PORTA_PIN1_INIT_Val,DIO_PORTA_PIN0_INIT_Val);
	PORTB_REG = Conc(DIO_PORTB_PIN7_INIT_Val,DIO_PORTB_PIN6_INIT_Val,DIO_PORTB_PIN5_INIT_Val,
     e88:	e8 e3       	ldi	r30, 0x38	; 56
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	10 82       	st	Z, r1
					DIO_PORTB_PIN4_INIT_Val,DIO_PORTB_PIN3_INIT_Val,DIO_PORTB_PIN2_INIT_Val,
					DIO_PORTB_PIN1_INIT_Val,DIO_PORTB_PIN0_INIT_Val);
	PORTC_REG = Conc(DIO_PORTC_PIN7_INIT_Val,DIO_PORTC_PIN6_INIT_Val,DIO_PORTC_PIN5_INIT_Val,
     e8e:	e5 e3       	ldi	r30, 0x35	; 53
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	10 82       	st	Z, r1
					 DIO_PORTC_PIN4_INIT_Val,DIO_PORTC_PIN3_INIT_Val,DIO_PORTC_PIN2_INIT_Val,
					 DIO_PORTC_PIN1_INIT_Val,DIO_PORTC_PIN0_INIT_Val);
	PORTD_REG = Conc(DIO_PORTD_PIN7_INIT_Val,DIO_PORTD_PIN6_INIT_Val,DIO_PORTD_PIN5_INIT_Val,
     e94:	e2 e3       	ldi	r30, 0x32	; 50
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	10 82       	st	Z, r1
					 DIO_PORTD_PIN4_INIT_Val,DIO_PORTD_PIN3_INIT_Val,DIO_PORTD_PIN2_INIT_Val,
					 DIO_PORTD_PIN1_INIT_Val,DIO_PORTD_PIN0_INIT_Val);
	PORTE_REG = Conc(DIO_PORTE_PIN7_INIT_Val,DIO_PORTE_PIN6_INIT_Val,DIO_PORTE_PIN5_INIT_Val,
     e9a:	e3 e2       	ldi	r30, 0x23	; 35
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 e2       	ldi	r24, 0x20	; 32
     ea0:	80 83       	st	Z, r24
					 DIO_PORTE_PIN4_INIT_Val,DIO_PORTE_PIN3_INIT_Val,DIO_PORTE_PIN2_INIT_Val,
					 DIO_PORTE_PIN1_INIT_Val,DIO_PORTE_PIN0_INIT_Val);
	PORTF_REG = Conc(DIO_PORTF_PIN7_INIT_Val,DIO_PORTF_PIN6_INIT_Val,DIO_PORTF_PIN5_INIT_Val,
     ea2:	e2 e6       	ldi	r30, 0x62	; 98
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	10 82       	st	Z, r1
					 DIO_PORTF_PIN4_INIT_Val,DIO_PORTF_PIN3_INIT_Val,DIO_PORTF_PIN2_INIT_Val,
					 DIO_PORTF_PIN1_INIT_Val,DIO_PORTF_PIN0_INIT_Val);
	PORTG_REG = Conc(0,0,0,DIO_PORTG_PIN4_INIT_Val,
     ea8:	e5 e6       	ldi	r30, 0x65	; 101
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	10 82       	st	Z, r1
					 DIO_PORTG_PIN3_INIT_Val,DIO_PORTG_PIN2_INIT_Val,
					 DIO_PORTG_PIN1_INIT_Val,DIO_PORTG_PIN0_INIT_Val);

}
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <DIO_SetPinDirection>:

u8 DIO_SetPinDirection(u8 Port_ID,u8 Pin_ID,u8 Pin_Dir)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	28 97       	sbiw	r28, 0x08	; 8
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	8a 83       	std	Y+2, r24	; 0x02
     eca:	6b 83       	std	Y+3, r22	; 0x03
     ecc:	4c 83       	std	Y+4, r20	; 0x04
	u8 ErrorState = DIO_OK;
     ece:	19 82       	std	Y+1, r1	; 0x01
	if(Pin_ID >=PIN0 && Pin_ID <= PIN7)
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	88 30       	cpi	r24, 0x08	; 8
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <DIO_SetPinDirection+0x24>
     ed6:	96 c1       	rjmp	.+812    	; 0x1204 <__stack+0x105>
	{
		if(Pin_Dir == OUTPUT)
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	09 f0       	breq	.+2      	; 0xee0 <DIO_SetPinDirection+0x2c>
     ede:	c2 c0       	rjmp	.+388    	; 0x1064 <DIO_SetPinDirection+0x1b0>
		{
			switch(Port_ID)
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	38 87       	std	Y+8, r19	; 0x08
     ee8:	2f 83       	std	Y+7, r18	; 0x07
     eea:	8f 81       	ldd	r24, Y+7	; 0x07
     eec:	98 85       	ldd	r25, Y+8	; 0x08
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	91 05       	cpc	r25, r1
     ef2:	09 f4       	brne	.+2      	; 0xef6 <DIO_SetPinDirection+0x42>
     ef4:	64 c0       	rjmp	.+200    	; 0xfbe <DIO_SetPinDirection+0x10a>
     ef6:	2f 81       	ldd	r18, Y+7	; 0x07
     ef8:	38 85       	ldd	r19, Y+8	; 0x08
     efa:	24 30       	cpi	r18, 0x04	; 4
     efc:	31 05       	cpc	r19, r1
     efe:	84 f4       	brge	.+32     	; 0xf20 <DIO_SetPinDirection+0x6c>
     f00:	8f 81       	ldd	r24, Y+7	; 0x07
     f02:	98 85       	ldd	r25, Y+8	; 0x08
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	91 05       	cpc	r25, r1
     f08:	91 f1       	breq	.+100    	; 0xf6e <DIO_SetPinDirection+0xba>
     f0a:	2f 81       	ldd	r18, Y+7	; 0x07
     f0c:	38 85       	ldd	r19, Y+8	; 0x08
     f0e:	22 30       	cpi	r18, 0x02	; 2
     f10:	31 05       	cpc	r19, r1
     f12:	0c f0       	brlt	.+2      	; 0xf16 <DIO_SetPinDirection+0x62>
     f14:	40 c0       	rjmp	.+128    	; 0xf96 <DIO_SetPinDirection+0xe2>
     f16:	8f 81       	ldd	r24, Y+7	; 0x07
     f18:	98 85       	ldd	r25, Y+8	; 0x08
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	a1 f0       	breq	.+40     	; 0xf46 <DIO_SetPinDirection+0x92>
     f1e:	9f c0       	rjmp	.+318    	; 0x105e <DIO_SetPinDirection+0x1aa>
     f20:	2f 81       	ldd	r18, Y+7	; 0x07
     f22:	38 85       	ldd	r19, Y+8	; 0x08
     f24:	25 30       	cpi	r18, 0x05	; 5
     f26:	31 05       	cpc	r19, r1
     f28:	09 f4       	brne	.+2      	; 0xf2c <DIO_SetPinDirection+0x78>
     f2a:	71 c0       	rjmp	.+226    	; 0x100e <DIO_SetPinDirection+0x15a>
     f2c:	8f 81       	ldd	r24, Y+7	; 0x07
     f2e:	98 85       	ldd	r25, Y+8	; 0x08
     f30:	85 30       	cpi	r24, 0x05	; 5
     f32:	91 05       	cpc	r25, r1
     f34:	0c f4       	brge	.+2      	; 0xf38 <DIO_SetPinDirection+0x84>
     f36:	57 c0       	rjmp	.+174    	; 0xfe6 <DIO_SetPinDirection+0x132>
     f38:	2f 81       	ldd	r18, Y+7	; 0x07
     f3a:	38 85       	ldd	r19, Y+8	; 0x08
     f3c:	26 30       	cpi	r18, 0x06	; 6
     f3e:	31 05       	cpc	r19, r1
     f40:	09 f4       	brne	.+2      	; 0xf44 <DIO_SetPinDirection+0x90>
     f42:	79 c0       	rjmp	.+242    	; 0x1036 <DIO_SetPinDirection+0x182>
     f44:	8c c0       	rjmp	.+280    	; 0x105e <DIO_SetPinDirection+0x1aa>
			{
			case PORTA:SET_BIT(DDRA_REG,Pin_ID);break;
     f46:	aa e3       	ldi	r26, 0x3A	; 58
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ea e3       	ldi	r30, 0x3A	; 58
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_SetPinDirection+0xb0>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_SetPinDirection+0xac>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	4d c1       	rjmp	.+666    	; 0x1208 <__stack+0x109>
			case PORTB:SET_BIT(DDRB_REG,Pin_ID);break;
     f6e:	a7 e3       	ldi	r26, 0x37	; 55
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e7 e3       	ldi	r30, 0x37	; 55
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_SetPinDirection+0xd8>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_SetPinDirection+0xd4>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	39 c1       	rjmp	.+626    	; 0x1208 <__stack+0x109>
			case PORTC:SET_BIT(DDRC_REG,Pin_ID);break;
     f96:	a4 e3       	ldi	r26, 0x34	; 52
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e4 e3       	ldi	r30, 0x34	; 52
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_SetPinDirection+0x100>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_SetPinDirection+0xfc>
     fb8:	84 2b       	or	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	25 c1       	rjmp	.+586    	; 0x1208 <__stack+0x109>
			case PORTD:SET_BIT(DDRD_REG,Pin_ID);break;
     fbe:	a1 e3       	ldi	r26, 0x31	; 49
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e1 e3       	ldi	r30, 0x31	; 49
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_SetPinDirection+0x128>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_SetPinDirection+0x124>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	11 c1       	rjmp	.+546    	; 0x1208 <__stack+0x109>
			case PORTE:SET_BIT(DDRE_REG,Pin_ID);break;
     fe6:	a2 e2       	ldi	r26, 0x22	; 34
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e2 e2       	ldi	r30, 0x22	; 34
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <DIO_SetPinDirection+0x150>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <DIO_SetPinDirection+0x14c>
    1008:	84 2b       	or	r24, r20
    100a:	8c 93       	st	X, r24
    100c:	fd c0       	rjmp	.+506    	; 0x1208 <__stack+0x109>
			case PORTF:SET_BIT(DDRF_REG,Pin_ID);break;
    100e:	a1 e6       	ldi	r26, 0x61	; 97
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e1 e6       	ldi	r30, 0x61	; 97
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	48 2f       	mov	r20, r24
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 2e       	mov	r0, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_SetPinDirection+0x178>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_SetPinDirection+0x174>
    1030:	84 2b       	or	r24, r20
    1032:	8c 93       	st	X, r24
    1034:	e9 c0       	rjmp	.+466    	; 0x1208 <__stack+0x109>
			case PORTG:SET_BIT(DDRG_REG,Pin_ID);break;
    1036:	a4 e6       	ldi	r26, 0x64	; 100
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e4 e6       	ldi	r30, 0x64	; 100
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_SetPinDirection+0x1a0>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_SetPinDirection+0x19c>
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	d5 c0       	rjmp	.+426    	; 0x1208 <__stack+0x109>
			default:ErrorState = DIO_PortOutOfRange; break;
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	d2 c0       	rjmp	.+420    	; 0x1208 <__stack+0x109>
			}
		}
		else if (Pin_Dir == INPUT)
    1064:	8c 81       	ldd	r24, Y+4	; 0x04
    1066:	88 23       	and	r24, r24
    1068:	09 f0       	breq	.+2      	; 0x106c <DIO_SetPinDirection+0x1b8>
    106a:	c9 c0       	rjmp	.+402    	; 0x11fe <__stack+0xff>
		{
			switch(Port_ID)
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	3e 83       	std	Y+6, r19	; 0x06
    1074:	2d 83       	std	Y+5, r18	; 0x05
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	83 30       	cpi	r24, 0x03	; 3
    107c:	91 05       	cpc	r25, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <DIO_SetPinDirection+0x1ce>
    1080:	67 c0       	rjmp	.+206    	; 0x1150 <__stack+0x51>
    1082:	2d 81       	ldd	r18, Y+5	; 0x05
    1084:	3e 81       	ldd	r19, Y+6	; 0x06
    1086:	24 30       	cpi	r18, 0x04	; 4
    1088:	31 05       	cpc	r19, r1
    108a:	84 f4       	brge	.+32     	; 0x10ac <DIO_SetPinDirection+0x1f8>
    108c:	8d 81       	ldd	r24, Y+5	; 0x05
    108e:	9e 81       	ldd	r25, Y+6	; 0x06
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	91 05       	cpc	r25, r1
    1094:	99 f1       	breq	.+102    	; 0x10fc <DIO_SetPinDirection+0x248>
    1096:	2d 81       	ldd	r18, Y+5	; 0x05
    1098:	3e 81       	ldd	r19, Y+6	; 0x06
    109a:	22 30       	cpi	r18, 0x02	; 2
    109c:	31 05       	cpc	r19, r1
    109e:	0c f0       	brlt	.+2      	; 0x10a2 <DIO_SetPinDirection+0x1ee>
    10a0:	42 c0       	rjmp	.+132    	; 0x1126 <__stack+0x27>
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	9e 81       	ldd	r25, Y+6	; 0x06
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	a1 f0       	breq	.+40     	; 0x10d2 <DIO_SetPinDirection+0x21e>
    10aa:	a6 c0       	rjmp	.+332    	; 0x11f8 <__stack+0xf9>
    10ac:	2d 81       	ldd	r18, Y+5	; 0x05
    10ae:	3e 81       	ldd	r19, Y+6	; 0x06
    10b0:	25 30       	cpi	r18, 0x05	; 5
    10b2:	31 05       	cpc	r19, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <DIO_SetPinDirection+0x204>
    10b6:	76 c0       	rjmp	.+236    	; 0x11a4 <__stack+0xa5>
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	9e 81       	ldd	r25, Y+6	; 0x06
    10bc:	85 30       	cpi	r24, 0x05	; 5
    10be:	91 05       	cpc	r25, r1
    10c0:	0c f4       	brge	.+2      	; 0x10c4 <DIO_SetPinDirection+0x210>
    10c2:	5b c0       	rjmp	.+182    	; 0x117a <__stack+0x7b>
    10c4:	2d 81       	ldd	r18, Y+5	; 0x05
    10c6:	3e 81       	ldd	r19, Y+6	; 0x06
    10c8:	26 30       	cpi	r18, 0x06	; 6
    10ca:	31 05       	cpc	r19, r1
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <DIO_SetPinDirection+0x21c>
    10ce:	7f c0       	rjmp	.+254    	; 0x11ce <__stack+0xcf>
    10d0:	93 c0       	rjmp	.+294    	; 0x11f8 <__stack+0xf9>
			{
			case PORTA:CLR_BIT(DDRA_REG,Pin_ID);break;
    10d2:	aa e3       	ldi	r26, 0x3A	; 58
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	ea e3       	ldi	r30, 0x3A	; 58
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_SetPinDirection+0x23c>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_SetPinDirection+0x238>
    10f4:	80 95       	com	r24
    10f6:	84 23       	and	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	86 c0       	rjmp	.+268    	; 0x1208 <__stack+0x109>
			case PORTB:CLR_BIT(DDRB_REG,Pin_ID);break;
    10fc:	a7 e3       	ldi	r26, 0x37	; 55
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e7 e3       	ldi	r30, 0x37	; 55
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <__stack+0x1b>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <__stack+0x17>
    111e:	80 95       	com	r24
    1120:	84 23       	and	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	71 c0       	rjmp	.+226    	; 0x1208 <__stack+0x109>
			case PORTC:CLR_BIT(DDRC_REG,Pin_ID);break;
    1126:	a4 e3       	ldi	r26, 0x34	; 52
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e4 e3       	ldi	r30, 0x34	; 52
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <__stack+0x45>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <__stack+0x41>
    1148:	80 95       	com	r24
    114a:	84 23       	and	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	5c c0       	rjmp	.+184    	; 0x1208 <__stack+0x109>
			case PORTD:CLR_BIT(DDRD_REG,Pin_ID);break;
    1150:	a1 e3       	ldi	r26, 0x31	; 49
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e1 e3       	ldi	r30, 0x31	; 49
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <__stack+0x6f>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <__stack+0x6b>
    1172:	80 95       	com	r24
    1174:	84 23       	and	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	47 c0       	rjmp	.+142    	; 0x1208 <__stack+0x109>
			case PORTE:CLR_BIT(DDRE_REG,Pin_ID);break;
    117a:	a2 e2       	ldi	r26, 0x22	; 34
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e2 e2       	ldi	r30, 0x22	; 34
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <__stack+0x99>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <__stack+0x95>
    119c:	80 95       	com	r24
    119e:	84 23       	and	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	32 c0       	rjmp	.+100    	; 0x1208 <__stack+0x109>
			case PORTF:CLR_BIT(DDRF_REG,Pin_ID);break;
    11a4:	a1 e6       	ldi	r26, 0x61	; 97
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e1 e6       	ldi	r30, 0x61	; 97
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <__stack+0xc3>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <__stack+0xbf>
    11c6:	80 95       	com	r24
    11c8:	84 23       	and	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	1d c0       	rjmp	.+58     	; 0x1208 <__stack+0x109>
			case PORTG:CLR_BIT(DDRG_REG,Pin_ID);break;
    11ce:	a4 e6       	ldi	r26, 0x64	; 100
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e4 e6       	ldi	r30, 0x64	; 100
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <__stack+0xed>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <__stack+0xe9>
    11f0:	80 95       	com	r24
    11f2:	84 23       	and	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	08 c0       	rjmp	.+16     	; 0x1208 <__stack+0x109>
			default:ErrorState = DIO_PortOutOfRange;break;
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	05 c0       	rjmp	.+10     	; 0x1208 <__stack+0x109>
			}
		}
		else
		{
			ErrorState = DIO_DirectionNotCorrect;
    11fe:	84 e0       	ldi	r24, 0x04	; 4
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <__stack+0x109>
		}
	}
	else
	{
		ErrorState = DIO_PinOutOfRange;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    1208:	89 81       	ldd	r24, Y+1	; 0x01
}
    120a:	28 96       	adiw	r28, 0x08	; 8
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <DIO_SetPinValue>:

u8 DIO_SetPinValue(u8 Port_ID,u8 Pin_ID,u8 Pin_Val)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	28 97       	sbiw	r28, 0x08	; 8
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	8a 83       	std	Y+2, r24	; 0x02
    1232:	6b 83       	std	Y+3, r22	; 0x03
    1234:	4c 83       	std	Y+4, r20	; 0x04
	u8 ErrorState = DIO_OK;
    1236:	19 82       	std	Y+1, r1	; 0x01
	if(Pin_ID >=PIN0 && Pin_ID <= PIN7)
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	88 30       	cpi	r24, 0x08	; 8
    123c:	08 f0       	brcs	.+2      	; 0x1240 <DIO_SetPinValue+0x24>
    123e:	96 c1       	rjmp	.+812    	; 0x156c <DIO_SetPinValue+0x350>
	{
		if(Pin_Val == HIGH)
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	09 f0       	breq	.+2      	; 0x1248 <DIO_SetPinValue+0x2c>
    1246:	c2 c0       	rjmp	.+388    	; 0x13cc <DIO_SetPinValue+0x1b0>
		{
			switch(Port_ID)
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	38 87       	std	Y+8, r19	; 0x08
    1250:	2f 83       	std	Y+7, r18	; 0x07
    1252:	8f 81       	ldd	r24, Y+7	; 0x07
    1254:	98 85       	ldd	r25, Y+8	; 0x08
    1256:	83 30       	cpi	r24, 0x03	; 3
    1258:	91 05       	cpc	r25, r1
    125a:	09 f4       	brne	.+2      	; 0x125e <DIO_SetPinValue+0x42>
    125c:	64 c0       	rjmp	.+200    	; 0x1326 <DIO_SetPinValue+0x10a>
    125e:	2f 81       	ldd	r18, Y+7	; 0x07
    1260:	38 85       	ldd	r19, Y+8	; 0x08
    1262:	24 30       	cpi	r18, 0x04	; 4
    1264:	31 05       	cpc	r19, r1
    1266:	84 f4       	brge	.+32     	; 0x1288 <DIO_SetPinValue+0x6c>
    1268:	8f 81       	ldd	r24, Y+7	; 0x07
    126a:	98 85       	ldd	r25, Y+8	; 0x08
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	91 05       	cpc	r25, r1
    1270:	91 f1       	breq	.+100    	; 0x12d6 <DIO_SetPinValue+0xba>
    1272:	2f 81       	ldd	r18, Y+7	; 0x07
    1274:	38 85       	ldd	r19, Y+8	; 0x08
    1276:	22 30       	cpi	r18, 0x02	; 2
    1278:	31 05       	cpc	r19, r1
    127a:	0c f0       	brlt	.+2      	; 0x127e <DIO_SetPinValue+0x62>
    127c:	40 c0       	rjmp	.+128    	; 0x12fe <DIO_SetPinValue+0xe2>
    127e:	8f 81       	ldd	r24, Y+7	; 0x07
    1280:	98 85       	ldd	r25, Y+8	; 0x08
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	a1 f0       	breq	.+40     	; 0x12ae <DIO_SetPinValue+0x92>
    1286:	9f c0       	rjmp	.+318    	; 0x13c6 <DIO_SetPinValue+0x1aa>
    1288:	2f 81       	ldd	r18, Y+7	; 0x07
    128a:	38 85       	ldd	r19, Y+8	; 0x08
    128c:	25 30       	cpi	r18, 0x05	; 5
    128e:	31 05       	cpc	r19, r1
    1290:	09 f4       	brne	.+2      	; 0x1294 <DIO_SetPinValue+0x78>
    1292:	71 c0       	rjmp	.+226    	; 0x1376 <DIO_SetPinValue+0x15a>
    1294:	8f 81       	ldd	r24, Y+7	; 0x07
    1296:	98 85       	ldd	r25, Y+8	; 0x08
    1298:	85 30       	cpi	r24, 0x05	; 5
    129a:	91 05       	cpc	r25, r1
    129c:	0c f4       	brge	.+2      	; 0x12a0 <DIO_SetPinValue+0x84>
    129e:	57 c0       	rjmp	.+174    	; 0x134e <DIO_SetPinValue+0x132>
    12a0:	2f 81       	ldd	r18, Y+7	; 0x07
    12a2:	38 85       	ldd	r19, Y+8	; 0x08
    12a4:	26 30       	cpi	r18, 0x06	; 6
    12a6:	31 05       	cpc	r19, r1
    12a8:	09 f4       	brne	.+2      	; 0x12ac <DIO_SetPinValue+0x90>
    12aa:	79 c0       	rjmp	.+242    	; 0x139e <DIO_SetPinValue+0x182>
    12ac:	8c c0       	rjmp	.+280    	; 0x13c6 <DIO_SetPinValue+0x1aa>
			{
			case PORTA:SET_BIT(PORTA_REG,Pin_ID);break;
    12ae:	ab e3       	ldi	r26, 0x3B	; 59
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	eb e3       	ldi	r30, 0x3B	; 59
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_SetPinValue+0xb0>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_SetPinValue+0xac>
    12d0:	84 2b       	or	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	4d c1       	rjmp	.+666    	; 0x1570 <DIO_SetPinValue+0x354>
			case PORTB:SET_BIT(PORTB_REG,Pin_ID);break;
    12d6:	a8 e3       	ldi	r26, 0x38	; 56
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e8 e3       	ldi	r30, 0x38	; 56
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <DIO_SetPinValue+0xd8>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <DIO_SetPinValue+0xd4>
    12f8:	84 2b       	or	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	39 c1       	rjmp	.+626    	; 0x1570 <DIO_SetPinValue+0x354>
			case PORTC:SET_BIT(PORTC_REG,Pin_ID);break;
    12fe:	a5 e3       	ldi	r26, 0x35	; 53
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e5 e3       	ldi	r30, 0x35	; 53
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_SetPinValue+0x100>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_SetPinValue+0xfc>
    1320:	84 2b       	or	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	25 c1       	rjmp	.+586    	; 0x1570 <DIO_SetPinValue+0x354>
			case PORTD:SET_BIT(PORTD_REG,Pin_ID);break;
    1326:	a2 e3       	ldi	r26, 0x32	; 50
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e2 e3       	ldi	r30, 0x32	; 50
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_SetPinValue+0x128>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_SetPinValue+0x124>
    1348:	84 2b       	or	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	11 c1       	rjmp	.+546    	; 0x1570 <DIO_SetPinValue+0x354>
			case PORTE:SET_BIT(PORTE_REG,Pin_ID);break;
    134e:	a3 e2       	ldi	r26, 0x23	; 35
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e3 e2       	ldi	r30, 0x23	; 35
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_SetPinValue+0x150>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_SetPinValue+0x14c>
    1370:	84 2b       	or	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	fd c0       	rjmp	.+506    	; 0x1570 <DIO_SetPinValue+0x354>
			case PORTF:SET_BIT(PORTF_REG,Pin_ID);break;
    1376:	a2 e6       	ldi	r26, 0x62	; 98
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e2 e6       	ldi	r30, 0x62	; 98
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_SetPinValue+0x178>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_SetPinValue+0x174>
    1398:	84 2b       	or	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	e9 c0       	rjmp	.+466    	; 0x1570 <DIO_SetPinValue+0x354>
			case PORTG:SET_BIT(PORTG_REG,Pin_ID);break;
    139e:	a5 e6       	ldi	r26, 0x65	; 101
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e5 e6       	ldi	r30, 0x65	; 101
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <DIO_SetPinValue+0x1a0>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <DIO_SetPinValue+0x19c>
    13c0:	84 2b       	or	r24, r20
    13c2:	8c 93       	st	X, r24
    13c4:	d5 c0       	rjmp	.+426    	; 0x1570 <DIO_SetPinValue+0x354>
			default:ErrorState = DIO_PortOutOfRange; break;
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	d2 c0       	rjmp	.+420    	; 0x1570 <DIO_SetPinValue+0x354>
			}
		}
		else if (Pin_Val == LOW)
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	88 23       	and	r24, r24
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <DIO_SetPinValue+0x1b8>
    13d2:	c9 c0       	rjmp	.+402    	; 0x1566 <DIO_SetPinValue+0x34a>
		{
			switch(Port_ID)
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3e 83       	std	Y+6, r19	; 0x06
    13dc:	2d 83       	std	Y+5, r18	; 0x05
    13de:	8d 81       	ldd	r24, Y+5	; 0x05
    13e0:	9e 81       	ldd	r25, Y+6	; 0x06
    13e2:	83 30       	cpi	r24, 0x03	; 3
    13e4:	91 05       	cpc	r25, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <DIO_SetPinValue+0x1ce>
    13e8:	67 c0       	rjmp	.+206    	; 0x14b8 <DIO_SetPinValue+0x29c>
    13ea:	2d 81       	ldd	r18, Y+5	; 0x05
    13ec:	3e 81       	ldd	r19, Y+6	; 0x06
    13ee:	24 30       	cpi	r18, 0x04	; 4
    13f0:	31 05       	cpc	r19, r1
    13f2:	84 f4       	brge	.+32     	; 0x1414 <DIO_SetPinValue+0x1f8>
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	91 05       	cpc	r25, r1
    13fc:	99 f1       	breq	.+102    	; 0x1464 <DIO_SetPinValue+0x248>
    13fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1400:	3e 81       	ldd	r19, Y+6	; 0x06
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	0c f0       	brlt	.+2      	; 0x140a <DIO_SetPinValue+0x1ee>
    1408:	42 c0       	rjmp	.+132    	; 0x148e <DIO_SetPinValue+0x272>
    140a:	8d 81       	ldd	r24, Y+5	; 0x05
    140c:	9e 81       	ldd	r25, Y+6	; 0x06
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	a1 f0       	breq	.+40     	; 0x143a <DIO_SetPinValue+0x21e>
    1412:	a6 c0       	rjmp	.+332    	; 0x1560 <DIO_SetPinValue+0x344>
    1414:	2d 81       	ldd	r18, Y+5	; 0x05
    1416:	3e 81       	ldd	r19, Y+6	; 0x06
    1418:	25 30       	cpi	r18, 0x05	; 5
    141a:	31 05       	cpc	r19, r1
    141c:	09 f4       	brne	.+2      	; 0x1420 <DIO_SetPinValue+0x204>
    141e:	76 c0       	rjmp	.+236    	; 0x150c <DIO_SetPinValue+0x2f0>
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	85 30       	cpi	r24, 0x05	; 5
    1426:	91 05       	cpc	r25, r1
    1428:	0c f4       	brge	.+2      	; 0x142c <DIO_SetPinValue+0x210>
    142a:	5b c0       	rjmp	.+182    	; 0x14e2 <DIO_SetPinValue+0x2c6>
    142c:	2d 81       	ldd	r18, Y+5	; 0x05
    142e:	3e 81       	ldd	r19, Y+6	; 0x06
    1430:	26 30       	cpi	r18, 0x06	; 6
    1432:	31 05       	cpc	r19, r1
    1434:	09 f4       	brne	.+2      	; 0x1438 <DIO_SetPinValue+0x21c>
    1436:	7f c0       	rjmp	.+254    	; 0x1536 <DIO_SetPinValue+0x31a>
    1438:	93 c0       	rjmp	.+294    	; 0x1560 <DIO_SetPinValue+0x344>
			{
			case PORTA:CLR_BIT(PORTA_REG,Pin_ID);break;
    143a:	ab e3       	ldi	r26, 0x3B	; 59
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	eb e3       	ldi	r30, 0x3B	; 59
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_SetPinValue+0x23c>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_SetPinValue+0x238>
    145c:	80 95       	com	r24
    145e:	84 23       	and	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	86 c0       	rjmp	.+268    	; 0x1570 <DIO_SetPinValue+0x354>
			case PORTB:CLR_BIT(PORTB_REG,Pin_ID);break;
    1464:	a8 e3       	ldi	r26, 0x38	; 56
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e8 e3       	ldi	r30, 0x38	; 56
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_SetPinValue+0x266>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_SetPinValue+0x262>
    1486:	80 95       	com	r24
    1488:	84 23       	and	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	71 c0       	rjmp	.+226    	; 0x1570 <DIO_SetPinValue+0x354>
			case PORTC:CLR_BIT(PORTC_REG,Pin_ID);break;
    148e:	a5 e3       	ldi	r26, 0x35	; 53
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e5 e3       	ldi	r30, 0x35	; 53
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_SetPinValue+0x290>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_SetPinValue+0x28c>
    14b0:	80 95       	com	r24
    14b2:	84 23       	and	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	5c c0       	rjmp	.+184    	; 0x1570 <DIO_SetPinValue+0x354>
			case PORTD:CLR_BIT(PORTD_REG,Pin_ID);break;
    14b8:	a2 e3       	ldi	r26, 0x32	; 50
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e2 e3       	ldi	r30, 0x32	; 50
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <DIO_SetPinValue+0x2ba>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <DIO_SetPinValue+0x2b6>
    14da:	80 95       	com	r24
    14dc:	84 23       	and	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	47 c0       	rjmp	.+142    	; 0x1570 <DIO_SetPinValue+0x354>
			case PORTE:CLR_BIT(PORTE_REG,Pin_ID);break;
    14e2:	a3 e2       	ldi	r26, 0x23	; 35
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e3 e2       	ldi	r30, 0x23	; 35
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	48 2f       	mov	r20, r24
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	02 2e       	mov	r0, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <DIO_SetPinValue+0x2e4>
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	0a 94       	dec	r0
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <DIO_SetPinValue+0x2e0>
    1504:	80 95       	com	r24
    1506:	84 23       	and	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	32 c0       	rjmp	.+100    	; 0x1570 <DIO_SetPinValue+0x354>
			case PORTF:CLR_BIT(PORTF_REG,Pin_ID);break;
    150c:	a2 e6       	ldi	r26, 0x62	; 98
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e2 e6       	ldi	r30, 0x62	; 98
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_SetPinValue+0x30e>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <DIO_SetPinValue+0x30a>
    152e:	80 95       	com	r24
    1530:	84 23       	and	r24, r20
    1532:	8c 93       	st	X, r24
    1534:	1d c0       	rjmp	.+58     	; 0x1570 <DIO_SetPinValue+0x354>
			case PORTG:CLR_BIT(PORTG_REG,Pin_ID);break;
    1536:	a5 e6       	ldi	r26, 0x65	; 101
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e5 e6       	ldi	r30, 0x65	; 101
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	48 2f       	mov	r20, r24
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	02 2e       	mov	r0, r18
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <DIO_SetPinValue+0x338>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	0a 94       	dec	r0
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <DIO_SetPinValue+0x334>
    1558:	80 95       	com	r24
    155a:	84 23       	and	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	08 c0       	rjmp	.+16     	; 0x1570 <DIO_SetPinValue+0x354>
			default:ErrorState = DIO_PortOutOfRange; break;
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	05 c0       	rjmp	.+10     	; 0x1570 <DIO_SetPinValue+0x354>
			}
		}
		else
		{
			ErrorState = DIO_ValueNotCorrect;
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_SetPinValue+0x354>
		}
	}
	else
	{
		ErrorState = DIO_PinOutOfRange;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    1570:	89 81       	ldd	r24, Y+1	; 0x01
}
    1572:	28 96       	adiw	r28, 0x08	; 8
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <DIO_ReadPin>:

u8	DIO_ReadPin(u8 Port_ID,u8 Pin_ID,u8 * PinReading)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	27 97       	sbiw	r28, 0x07	; 7
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	8a 83       	std	Y+2, r24	; 0x02
    159a:	6b 83       	std	Y+3, r22	; 0x03
    159c:	5d 83       	std	Y+5, r21	; 0x05
    159e:	4c 83       	std	Y+4, r20	; 0x04
	u8 ErrorState = DIO_OK;
    15a0:	19 82       	std	Y+1, r1	; 0x01
	*PinReading = 0;
    15a2:	ec 81       	ldd	r30, Y+4	; 0x04
    15a4:	fd 81       	ldd	r31, Y+5	; 0x05
    15a6:	10 82       	st	Z, r1
	if(Pin_ID >=PIN0 && Pin_ID <= PIN7)
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	88 30       	cpi	r24, 0x08	; 8
    15ac:	08 f0       	brcs	.+2      	; 0x15b0 <DIO_ReadPin+0x2c>
    15ae:	c2 c0       	rjmp	.+388    	; 0x1734 <DIO_ReadPin+0x1b0>
	{
		switch(Port_ID)
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3f 83       	std	Y+7, r19	; 0x07
    15b8:	2e 83       	std	Y+6, r18	; 0x06
    15ba:	4e 81       	ldd	r20, Y+6	; 0x06
    15bc:	5f 81       	ldd	r21, Y+7	; 0x07
    15be:	43 30       	cpi	r20, 0x03	; 3
    15c0:	51 05       	cpc	r21, r1
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <DIO_ReadPin+0x42>
    15c4:	64 c0       	rjmp	.+200    	; 0x168e <DIO_ReadPin+0x10a>
    15c6:	8e 81       	ldd	r24, Y+6	; 0x06
    15c8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ca:	84 30       	cpi	r24, 0x04	; 4
    15cc:	91 05       	cpc	r25, r1
    15ce:	84 f4       	brge	.+32     	; 0x15f0 <DIO_ReadPin+0x6c>
    15d0:	2e 81       	ldd	r18, Y+6	; 0x06
    15d2:	3f 81       	ldd	r19, Y+7	; 0x07
    15d4:	21 30       	cpi	r18, 0x01	; 1
    15d6:	31 05       	cpc	r19, r1
    15d8:	91 f1       	breq	.+100    	; 0x163e <DIO_ReadPin+0xba>
    15da:	4e 81       	ldd	r20, Y+6	; 0x06
    15dc:	5f 81       	ldd	r21, Y+7	; 0x07
    15de:	42 30       	cpi	r20, 0x02	; 2
    15e0:	51 05       	cpc	r21, r1
    15e2:	0c f0       	brlt	.+2      	; 0x15e6 <DIO_ReadPin+0x62>
    15e4:	40 c0       	rjmp	.+128    	; 0x1666 <DIO_ReadPin+0xe2>
    15e6:	8e 81       	ldd	r24, Y+6	; 0x06
    15e8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	a1 f0       	breq	.+40     	; 0x1616 <DIO_ReadPin+0x92>
    15ee:	9f c0       	rjmp	.+318    	; 0x172e <DIO_ReadPin+0x1aa>
    15f0:	2e 81       	ldd	r18, Y+6	; 0x06
    15f2:	3f 81       	ldd	r19, Y+7	; 0x07
    15f4:	25 30       	cpi	r18, 0x05	; 5
    15f6:	31 05       	cpc	r19, r1
    15f8:	09 f4       	brne	.+2      	; 0x15fc <DIO_ReadPin+0x78>
    15fa:	71 c0       	rjmp	.+226    	; 0x16de <DIO_ReadPin+0x15a>
    15fc:	4e 81       	ldd	r20, Y+6	; 0x06
    15fe:	5f 81       	ldd	r21, Y+7	; 0x07
    1600:	45 30       	cpi	r20, 0x05	; 5
    1602:	51 05       	cpc	r21, r1
    1604:	0c f4       	brge	.+2      	; 0x1608 <DIO_ReadPin+0x84>
    1606:	57 c0       	rjmp	.+174    	; 0x16b6 <DIO_ReadPin+0x132>
    1608:	8e 81       	ldd	r24, Y+6	; 0x06
    160a:	9f 81       	ldd	r25, Y+7	; 0x07
    160c:	86 30       	cpi	r24, 0x06	; 6
    160e:	91 05       	cpc	r25, r1
    1610:	09 f4       	brne	.+2      	; 0x1614 <DIO_ReadPin+0x90>
    1612:	79 c0       	rjmp	.+242    	; 0x1706 <DIO_ReadPin+0x182>
    1614:	8c c0       	rjmp	.+280    	; 0x172e <DIO_ReadPin+0x1aa>
		{
			case PORTA:*PinReading = GET_BIT(PINA_REG,Pin_ID);break;
    1616:	e9 e3       	ldi	r30, 0x39	; 57
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a9 01       	movw	r20, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_ReadPin+0xaa>
    162a:	55 95       	asr	r21
    162c:	47 95       	ror	r20
    162e:	8a 95       	dec	r24
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_ReadPin+0xa6>
    1632:	ca 01       	movw	r24, r20
    1634:	81 70       	andi	r24, 0x01	; 1
    1636:	ec 81       	ldd	r30, Y+4	; 0x04
    1638:	fd 81       	ldd	r31, Y+5	; 0x05
    163a:	80 83       	st	Z, r24
    163c:	7d c0       	rjmp	.+250    	; 0x1738 <DIO_ReadPin+0x1b4>
			case PORTB:*PinReading = GET_BIT(PINB_REG,Pin_ID);break;
    163e:	e6 e3       	ldi	r30, 0x36	; 54
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a9 01       	movw	r20, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_ReadPin+0xd2>
    1652:	55 95       	asr	r21
    1654:	47 95       	ror	r20
    1656:	8a 95       	dec	r24
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_ReadPin+0xce>
    165a:	ca 01       	movw	r24, r20
    165c:	81 70       	andi	r24, 0x01	; 1
    165e:	ec 81       	ldd	r30, Y+4	; 0x04
    1660:	fd 81       	ldd	r31, Y+5	; 0x05
    1662:	80 83       	st	Z, r24
    1664:	69 c0       	rjmp	.+210    	; 0x1738 <DIO_ReadPin+0x1b4>
			case PORTC:*PinReading = GET_BIT(PINC_REG,Pin_ID);break;
    1666:	e3 e3       	ldi	r30, 0x33	; 51
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	88 2f       	mov	r24, r24
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a9 01       	movw	r20, r18
    1678:	02 c0       	rjmp	.+4      	; 0x167e <DIO_ReadPin+0xfa>
    167a:	55 95       	asr	r21
    167c:	47 95       	ror	r20
    167e:	8a 95       	dec	r24
    1680:	e2 f7       	brpl	.-8      	; 0x167a <DIO_ReadPin+0xf6>
    1682:	ca 01       	movw	r24, r20
    1684:	81 70       	andi	r24, 0x01	; 1
    1686:	ec 81       	ldd	r30, Y+4	; 0x04
    1688:	fd 81       	ldd	r31, Y+5	; 0x05
    168a:	80 83       	st	Z, r24
    168c:	55 c0       	rjmp	.+170    	; 0x1738 <DIO_ReadPin+0x1b4>
			case PORTD:*PinReading = GET_BIT(PIND_REG,Pin_ID);break;
    168e:	e0 e3       	ldi	r30, 0x30	; 48
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	88 2f       	mov	r24, r24
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	a9 01       	movw	r20, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <DIO_ReadPin+0x122>
    16a2:	55 95       	asr	r21
    16a4:	47 95       	ror	r20
    16a6:	8a 95       	dec	r24
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <DIO_ReadPin+0x11e>
    16aa:	ca 01       	movw	r24, r20
    16ac:	81 70       	andi	r24, 0x01	; 1
    16ae:	ec 81       	ldd	r30, Y+4	; 0x04
    16b0:	fd 81       	ldd	r31, Y+5	; 0x05
    16b2:	80 83       	st	Z, r24
    16b4:	41 c0       	rjmp	.+130    	; 0x1738 <DIO_ReadPin+0x1b4>
			case PORTE:*PinReading = GET_BIT(PINE_REG,Pin_ID);break;
    16b6:	e1 e2       	ldi	r30, 0x21	; 33
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	a9 01       	movw	r20, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <DIO_ReadPin+0x14a>
    16ca:	55 95       	asr	r21
    16cc:	47 95       	ror	r20
    16ce:	8a 95       	dec	r24
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <DIO_ReadPin+0x146>
    16d2:	ca 01       	movw	r24, r20
    16d4:	81 70       	andi	r24, 0x01	; 1
    16d6:	ec 81       	ldd	r30, Y+4	; 0x04
    16d8:	fd 81       	ldd	r31, Y+5	; 0x05
    16da:	80 83       	st	Z, r24
    16dc:	2d c0       	rjmp	.+90     	; 0x1738 <DIO_ReadPin+0x1b4>
			case PORTF:*PinReading = GET_BIT(PINF_REG,Pin_ID);break;
    16de:	e0 e2       	ldi	r30, 0x20	; 32
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	88 2f       	mov	r24, r24
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	a9 01       	movw	r20, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_ReadPin+0x172>
    16f2:	55 95       	asr	r21
    16f4:	47 95       	ror	r20
    16f6:	8a 95       	dec	r24
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_ReadPin+0x16e>
    16fa:	ca 01       	movw	r24, r20
    16fc:	81 70       	andi	r24, 0x01	; 1
    16fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1700:	fd 81       	ldd	r31, Y+5	; 0x05
    1702:	80 83       	st	Z, r24
    1704:	19 c0       	rjmp	.+50     	; 0x1738 <DIO_ReadPin+0x1b4>
			case PORTG:*PinReading = GET_BIT(PING_REG,Pin_ID);break;
    1706:	e3 e6       	ldi	r30, 0x63	; 99
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	88 2f       	mov	r24, r24
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	a9 01       	movw	r20, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <DIO_ReadPin+0x19a>
    171a:	55 95       	asr	r21
    171c:	47 95       	ror	r20
    171e:	8a 95       	dec	r24
    1720:	e2 f7       	brpl	.-8      	; 0x171a <DIO_ReadPin+0x196>
    1722:	ca 01       	movw	r24, r20
    1724:	81 70       	andi	r24, 0x01	; 1
    1726:	ec 81       	ldd	r30, Y+4	; 0x04
    1728:	fd 81       	ldd	r31, Y+5	; 0x05
    172a:	80 83       	st	Z, r24
    172c:	05 c0       	rjmp	.+10     	; 0x1738 <DIO_ReadPin+0x1b4>
			default:ErrorState = DIO_PortOutOfRange; break;
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <DIO_ReadPin+0x1b4>
		}
	}
	else
	{
		ErrorState = DIO_PinOutOfRange;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    1738:	89 81       	ldd	r24, Y+1	; 0x01
}
    173a:	27 96       	adiw	r28, 0x07	; 7
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <DIO_TogglePin>:


u8 DIO_TogglePin(u8 Port_ID,u8 Pin_ID)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <DIO_TogglePin+0x6>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <DIO_TogglePin+0x8>
    1754:	0f 92       	push	r0
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	8a 83       	std	Y+2, r24	; 0x02
    175c:	6b 83       	std	Y+3, r22	; 0x03
	u8 ErrorState = DIO_OK;
    175e:	19 82       	std	Y+1, r1	; 0x01
	if(Pin_ID >=PIN0 && Pin_ID <= PIN7)
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	88 30       	cpi	r24, 0x08	; 8
    1764:	08 f0       	brcs	.+2      	; 0x1768 <DIO_TogglePin+0x1c>
    1766:	c2 c0       	rjmp	.+388    	; 0x18ec <DIO_TogglePin+0x1a0>
	{
		switch(Port_ID)
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	3d 83       	std	Y+5, r19	; 0x05
    1770:	2c 83       	std	Y+4, r18	; 0x04
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	9d 81       	ldd	r25, Y+5	; 0x05
    1776:	83 30       	cpi	r24, 0x03	; 3
    1778:	91 05       	cpc	r25, r1
    177a:	09 f4       	brne	.+2      	; 0x177e <DIO_TogglePin+0x32>
    177c:	64 c0       	rjmp	.+200    	; 0x1846 <DIO_TogglePin+0xfa>
    177e:	2c 81       	ldd	r18, Y+4	; 0x04
    1780:	3d 81       	ldd	r19, Y+5	; 0x05
    1782:	24 30       	cpi	r18, 0x04	; 4
    1784:	31 05       	cpc	r19, r1
    1786:	84 f4       	brge	.+32     	; 0x17a8 <DIO_TogglePin+0x5c>
    1788:	8c 81       	ldd	r24, Y+4	; 0x04
    178a:	9d 81       	ldd	r25, Y+5	; 0x05
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	91 05       	cpc	r25, r1
    1790:	91 f1       	breq	.+100    	; 0x17f6 <DIO_TogglePin+0xaa>
    1792:	2c 81       	ldd	r18, Y+4	; 0x04
    1794:	3d 81       	ldd	r19, Y+5	; 0x05
    1796:	22 30       	cpi	r18, 0x02	; 2
    1798:	31 05       	cpc	r19, r1
    179a:	0c f0       	brlt	.+2      	; 0x179e <DIO_TogglePin+0x52>
    179c:	40 c0       	rjmp	.+128    	; 0x181e <DIO_TogglePin+0xd2>
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	9d 81       	ldd	r25, Y+5	; 0x05
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	a1 f0       	breq	.+40     	; 0x17ce <DIO_TogglePin+0x82>
    17a6:	9f c0       	rjmp	.+318    	; 0x18e6 <DIO_TogglePin+0x19a>
    17a8:	2c 81       	ldd	r18, Y+4	; 0x04
    17aa:	3d 81       	ldd	r19, Y+5	; 0x05
    17ac:	25 30       	cpi	r18, 0x05	; 5
    17ae:	31 05       	cpc	r19, r1
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <DIO_TogglePin+0x68>
    17b2:	71 c0       	rjmp	.+226    	; 0x1896 <DIO_TogglePin+0x14a>
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
    17b6:	9d 81       	ldd	r25, Y+5	; 0x05
    17b8:	85 30       	cpi	r24, 0x05	; 5
    17ba:	91 05       	cpc	r25, r1
    17bc:	0c f4       	brge	.+2      	; 0x17c0 <DIO_TogglePin+0x74>
    17be:	57 c0       	rjmp	.+174    	; 0x186e <DIO_TogglePin+0x122>
    17c0:	2c 81       	ldd	r18, Y+4	; 0x04
    17c2:	3d 81       	ldd	r19, Y+5	; 0x05
    17c4:	26 30       	cpi	r18, 0x06	; 6
    17c6:	31 05       	cpc	r19, r1
    17c8:	09 f4       	brne	.+2      	; 0x17cc <DIO_TogglePin+0x80>
    17ca:	79 c0       	rjmp	.+242    	; 0x18be <DIO_TogglePin+0x172>
    17cc:	8c c0       	rjmp	.+280    	; 0x18e6 <DIO_TogglePin+0x19a>
		{
			case PORTA:TOG_BIT(PORTA_REG,Pin_ID);break;
    17ce:	ab e3       	ldi	r26, 0x3B	; 59
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	eb e3       	ldi	r30, 0x3B	; 59
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	02 2e       	mov	r0, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <DIO_TogglePin+0xa0>
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	0a 94       	dec	r0
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <DIO_TogglePin+0x9c>
    17f0:	84 27       	eor	r24, r20
    17f2:	8c 93       	st	X, r24
    17f4:	7d c0       	rjmp	.+250    	; 0x18f0 <DIO_TogglePin+0x1a4>
			case PORTB:TOG_BIT(PORTB_REG,Pin_ID);break;
    17f6:	a8 e3       	ldi	r26, 0x38	; 56
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e8 e3       	ldi	r30, 0x38	; 56
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 2e       	mov	r0, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <DIO_TogglePin+0xc8>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <DIO_TogglePin+0xc4>
    1818:	84 27       	eor	r24, r20
    181a:	8c 93       	st	X, r24
    181c:	69 c0       	rjmp	.+210    	; 0x18f0 <DIO_TogglePin+0x1a4>
			case PORTC:TOG_BIT(PORTC_REG,Pin_ID);break;
    181e:	a5 e3       	ldi	r26, 0x35	; 53
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e5 e3       	ldi	r30, 0x35	; 53
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	48 2f       	mov	r20, r24
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	02 2e       	mov	r0, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <DIO_TogglePin+0xf0>
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	0a 94       	dec	r0
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <DIO_TogglePin+0xec>
    1840:	84 27       	eor	r24, r20
    1842:	8c 93       	st	X, r24
    1844:	55 c0       	rjmp	.+170    	; 0x18f0 <DIO_TogglePin+0x1a4>
			case PORTD:TOG_BIT(PORTD_REG,Pin_ID);break;
    1846:	a2 e3       	ldi	r26, 0x32	; 50
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e2 e3       	ldi	r30, 0x32	; 50
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DIO_TogglePin+0x118>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <DIO_TogglePin+0x114>
    1868:	84 27       	eor	r24, r20
    186a:	8c 93       	st	X, r24
    186c:	41 c0       	rjmp	.+130    	; 0x18f0 <DIO_TogglePin+0x1a4>
			case PORTE:TOG_BIT(PORTE_REG,Pin_ID);break;
    186e:	a3 e2       	ldi	r26, 0x23	; 35
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e3 e2       	ldi	r30, 0x23	; 35
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <DIO_TogglePin+0x140>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <DIO_TogglePin+0x13c>
    1890:	84 27       	eor	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	2d c0       	rjmp	.+90     	; 0x18f0 <DIO_TogglePin+0x1a4>
			case PORTF:TOG_BIT(PORTF_REG,Pin_ID);break;
    1896:	a2 e6       	ldi	r26, 0x62	; 98
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e2 e6       	ldi	r30, 0x62	; 98
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	48 2f       	mov	r20, r24
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 2e       	mov	r0, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <DIO_TogglePin+0x168>
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	0a 94       	dec	r0
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <DIO_TogglePin+0x164>
    18b8:	84 27       	eor	r24, r20
    18ba:	8c 93       	st	X, r24
    18bc:	19 c0       	rjmp	.+50     	; 0x18f0 <DIO_TogglePin+0x1a4>
			case PORTG:TOG_BIT(PORTG_REG,Pin_ID);break;
    18be:	a5 e6       	ldi	r26, 0x65	; 101
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e5 e6       	ldi	r30, 0x65	; 101
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_TogglePin+0x190>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_TogglePin+0x18c>
    18e0:	84 27       	eor	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	05 c0       	rjmp	.+10     	; 0x18f0 <DIO_TogglePin+0x1a4>
			default:ErrorState = DIO_PortOutOfRange; break;
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_TogglePin+0x1a4>
		}
	}
	else
	{
		ErrorState = DIO_PinOutOfRange;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <DIO_SetPortDirection>:

u8 DIO_SetPortDirection(u8 Port_ID,u8 Port_Dir)
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	29 97       	sbiw	r28, 0x09	; 9
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	8a 83       	std	Y+2, r24	; 0x02
    1918:	6b 83       	std	Y+3, r22	; 0x03
	u8 ErrorState = DIO_OK;
    191a:	19 82       	std	Y+1, r1	; 0x01
	if(Port_ID>=PORTA && Port_ID<=PORTG && Port_Dir>= 0 && Port_Dir<= 255)
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	87 30       	cpi	r24, 0x07	; 7
    1920:	08 f0       	brcs	.+2      	; 0x1924 <DIO_SetPortDirection+0x22>
    1922:	f4 c0       	rjmp	.+488    	; 0x1b0c <DIO_SetPortDirection+0x20a>
	{
		if(Port_Dir == OUTPUT_PORT)
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	8f 3f       	cpi	r24, 0xFF	; 255
    1928:	09 f0       	breq	.+2      	; 0x192c <DIO_SetPortDirection+0x2a>
    192a:	51 c0       	rjmp	.+162    	; 0x19ce <DIO_SetPortDirection+0xcc>
		{
			switch(Port_ID)
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	39 87       	std	Y+9, r19	; 0x09
    1934:	28 87       	std	Y+8, r18	; 0x08
    1936:	88 85       	ldd	r24, Y+8	; 0x08
    1938:	99 85       	ldd	r25, Y+9	; 0x09
    193a:	83 30       	cpi	r24, 0x03	; 3
    193c:	91 05       	cpc	r25, r1
    193e:	99 f1       	breq	.+102    	; 0x19a6 <DIO_SetPortDirection+0xa4>
    1940:	28 85       	ldd	r18, Y+8	; 0x08
    1942:	39 85       	ldd	r19, Y+9	; 0x09
    1944:	24 30       	cpi	r18, 0x04	; 4
    1946:	31 05       	cpc	r19, r1
    1948:	7c f4       	brge	.+30     	; 0x1968 <DIO_SetPortDirection+0x66>
    194a:	88 85       	ldd	r24, Y+8	; 0x08
    194c:	99 85       	ldd	r25, Y+9	; 0x09
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	91 05       	cpc	r25, r1
    1952:	f9 f0       	breq	.+62     	; 0x1992 <DIO_SetPortDirection+0x90>
    1954:	28 85       	ldd	r18, Y+8	; 0x08
    1956:	39 85       	ldd	r19, Y+9	; 0x09
    1958:	22 30       	cpi	r18, 0x02	; 2
    195a:	31 05       	cpc	r19, r1
    195c:	fc f4       	brge	.+62     	; 0x199c <DIO_SetPortDirection+0x9a>
    195e:	88 85       	ldd	r24, Y+8	; 0x08
    1960:	99 85       	ldd	r25, Y+9	; 0x09
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	89 f0       	breq	.+34     	; 0x1988 <DIO_SetPortDirection+0x86>
    1966:	d4 c0       	rjmp	.+424    	; 0x1b10 <DIO_SetPortDirection+0x20e>
    1968:	28 85       	ldd	r18, Y+8	; 0x08
    196a:	39 85       	ldd	r19, Y+9	; 0x09
    196c:	25 30       	cpi	r18, 0x05	; 5
    196e:	31 05       	cpc	r19, r1
    1970:	21 f1       	breq	.+72     	; 0x19ba <DIO_SetPortDirection+0xb8>
    1972:	88 85       	ldd	r24, Y+8	; 0x08
    1974:	99 85       	ldd	r25, Y+9	; 0x09
    1976:	85 30       	cpi	r24, 0x05	; 5
    1978:	91 05       	cpc	r25, r1
    197a:	d4 f0       	brlt	.+52     	; 0x19b0 <DIO_SetPortDirection+0xae>
    197c:	28 85       	ldd	r18, Y+8	; 0x08
    197e:	39 85       	ldd	r19, Y+9	; 0x09
    1980:	26 30       	cpi	r18, 0x06	; 6
    1982:	31 05       	cpc	r19, r1
    1984:	f9 f0       	breq	.+62     	; 0x19c4 <DIO_SetPortDirection+0xc2>
    1986:	c4 c0       	rjmp	.+392    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			{
			case PORTA:SET_REG(DDRA_REG);break;
    1988:	ea e3       	ldi	r30, 0x3A	; 58
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	8f ef       	ldi	r24, 0xFF	; 255
    198e:	80 83       	st	Z, r24
    1990:	bf c0       	rjmp	.+382    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTB:SET_REG(DDRB_REG);break;
    1992:	e7 e3       	ldi	r30, 0x37	; 55
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	8f ef       	ldi	r24, 0xFF	; 255
    1998:	80 83       	st	Z, r24
    199a:	ba c0       	rjmp	.+372    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTC:SET_REG(DDRC_REG);break;
    199c:	e4 e3       	ldi	r30, 0x34	; 52
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	8f ef       	ldi	r24, 0xFF	; 255
    19a2:	80 83       	st	Z, r24
    19a4:	b5 c0       	rjmp	.+362    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTD:SET_REG(DDRD_REG);break;
    19a6:	e1 e3       	ldi	r30, 0x31	; 49
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	80 83       	st	Z, r24
    19ae:	b0 c0       	rjmp	.+352    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTE:SET_REG(DDRE_REG);break;
    19b0:	e2 e2       	ldi	r30, 0x22	; 34
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	8f ef       	ldi	r24, 0xFF	; 255
    19b6:	80 83       	st	Z, r24
    19b8:	ab c0       	rjmp	.+342    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTF:SET_REG(DDRF_REG);break;
    19ba:	e1 e6       	ldi	r30, 0x61	; 97
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	8f ef       	ldi	r24, 0xFF	; 255
    19c0:	80 83       	st	Z, r24
    19c2:	a6 c0       	rjmp	.+332    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTG:SET_REG(DDRG_REG);break;
    19c4:	e4 e6       	ldi	r30, 0x64	; 100
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	8f ef       	ldi	r24, 0xFF	; 255
    19ca:	80 83       	st	Z, r24
    19cc:	a1 c0       	rjmp	.+322    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			default:break;
			}
		}
		else if(Port_Dir == INPUT_PORT)
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	88 23       	and	r24, r24
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <DIO_SetPortDirection+0xd4>
    19d4:	4a c0       	rjmp	.+148    	; 0x1a6a <DIO_SetPortDirection+0x168>
		{
			switch(Port_ID)
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	3f 83       	std	Y+7, r19	; 0x07
    19de:	2e 83       	std	Y+6, r18	; 0x06
    19e0:	8e 81       	ldd	r24, Y+6	; 0x06
    19e2:	9f 81       	ldd	r25, Y+7	; 0x07
    19e4:	83 30       	cpi	r24, 0x03	; 3
    19e6:	91 05       	cpc	r25, r1
    19e8:	81 f1       	breq	.+96     	; 0x1a4a <DIO_SetPortDirection+0x148>
    19ea:	2e 81       	ldd	r18, Y+6	; 0x06
    19ec:	3f 81       	ldd	r19, Y+7	; 0x07
    19ee:	24 30       	cpi	r18, 0x04	; 4
    19f0:	31 05       	cpc	r19, r1
    19f2:	7c f4       	brge	.+30     	; 0x1a12 <DIO_SetPortDirection+0x110>
    19f4:	8e 81       	ldd	r24, Y+6	; 0x06
    19f6:	9f 81       	ldd	r25, Y+7	; 0x07
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	91 05       	cpc	r25, r1
    19fc:	f1 f0       	breq	.+60     	; 0x1a3a <DIO_SetPortDirection+0x138>
    19fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1a00:	3f 81       	ldd	r19, Y+7	; 0x07
    1a02:	22 30       	cpi	r18, 0x02	; 2
    1a04:	31 05       	cpc	r19, r1
    1a06:	ec f4       	brge	.+58     	; 0x1a42 <DIO_SetPortDirection+0x140>
    1a08:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	89 f0       	breq	.+34     	; 0x1a32 <DIO_SetPortDirection+0x130>
    1a10:	7f c0       	rjmp	.+254    	; 0x1b10 <DIO_SetPortDirection+0x20e>
    1a12:	2e 81       	ldd	r18, Y+6	; 0x06
    1a14:	3f 81       	ldd	r19, Y+7	; 0x07
    1a16:	25 30       	cpi	r18, 0x05	; 5
    1a18:	31 05       	cpc	r19, r1
    1a1a:	f9 f0       	breq	.+62     	; 0x1a5a <DIO_SetPortDirection+0x158>
    1a1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a20:	85 30       	cpi	r24, 0x05	; 5
    1a22:	91 05       	cpc	r25, r1
    1a24:	b4 f0       	brlt	.+44     	; 0x1a52 <DIO_SetPortDirection+0x150>
    1a26:	2e 81       	ldd	r18, Y+6	; 0x06
    1a28:	3f 81       	ldd	r19, Y+7	; 0x07
    1a2a:	26 30       	cpi	r18, 0x06	; 6
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	c9 f0       	breq	.+50     	; 0x1a62 <DIO_SetPortDirection+0x160>
    1a30:	6f c0       	rjmp	.+222    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			{
			case PORTA:CLR_REG(DDRA_REG);break;
    1a32:	ea e3       	ldi	r30, 0x3A	; 58
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	10 82       	st	Z, r1
    1a38:	6b c0       	rjmp	.+214    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTB:CLR_REG(DDRB_REG);break;
    1a3a:	e7 e3       	ldi	r30, 0x37	; 55
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	10 82       	st	Z, r1
    1a40:	67 c0       	rjmp	.+206    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTC:CLR_REG(DDRC_REG);break;
    1a42:	e4 e3       	ldi	r30, 0x34	; 52
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	10 82       	st	Z, r1
    1a48:	63 c0       	rjmp	.+198    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTD:CLR_REG(DDRD_REG);break;
    1a4a:	e1 e3       	ldi	r30, 0x31	; 49
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	10 82       	st	Z, r1
    1a50:	5f c0       	rjmp	.+190    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTE:CLR_REG(DDRE_REG);break;
    1a52:	e2 e2       	ldi	r30, 0x22	; 34
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	10 82       	st	Z, r1
    1a58:	5b c0       	rjmp	.+182    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTF:CLR_REG(DDRF_REG);break;
    1a5a:	e1 e6       	ldi	r30, 0x61	; 97
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	10 82       	st	Z, r1
    1a60:	57 c0       	rjmp	.+174    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTG:CLR_REG(DDRG_REG);break;
    1a62:	e4 e6       	ldi	r30, 0x64	; 100
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	10 82       	st	Z, r1
    1a68:	53 c0       	rjmp	.+166    	; 0x1b10 <DIO_SetPortDirection+0x20e>
			default:break;
			}
		}
		else
		{
			switch(Port_ID)
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	3d 83       	std	Y+5, r19	; 0x05
    1a72:	2c 83       	std	Y+4, r18	; 0x04
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
    1a76:	9d 81       	ldd	r25, Y+5	; 0x05
    1a78:	83 30       	cpi	r24, 0x03	; 3
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	99 f1       	breq	.+102    	; 0x1ae4 <DIO_SetPortDirection+0x1e2>
    1a7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a80:	3d 81       	ldd	r19, Y+5	; 0x05
    1a82:	24 30       	cpi	r18, 0x04	; 4
    1a84:	31 05       	cpc	r19, r1
    1a86:	7c f4       	brge	.+30     	; 0x1aa6 <DIO_SetPortDirection+0x1a4>
    1a88:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	91 05       	cpc	r25, r1
    1a90:	f9 f0       	breq	.+62     	; 0x1ad0 <DIO_SetPortDirection+0x1ce>
    1a92:	2c 81       	ldd	r18, Y+4	; 0x04
    1a94:	3d 81       	ldd	r19, Y+5	; 0x05
    1a96:	22 30       	cpi	r18, 0x02	; 2
    1a98:	31 05       	cpc	r19, r1
    1a9a:	fc f4       	brge	.+62     	; 0x1ada <DIO_SetPortDirection+0x1d8>
    1a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	89 f0       	breq	.+34     	; 0x1ac6 <DIO_SetPortDirection+0x1c4>
    1aa4:	35 c0       	rjmp	.+106    	; 0x1b10 <DIO_SetPortDirection+0x20e>
    1aa6:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aaa:	25 30       	cpi	r18, 0x05	; 5
    1aac:	31 05       	cpc	r19, r1
    1aae:	21 f1       	breq	.+72     	; 0x1af8 <DIO_SetPortDirection+0x1f6>
    1ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab4:	85 30       	cpi	r24, 0x05	; 5
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	d4 f0       	brlt	.+52     	; 0x1aee <DIO_SetPortDirection+0x1ec>
    1aba:	2c 81       	ldd	r18, Y+4	; 0x04
    1abc:	3d 81       	ldd	r19, Y+5	; 0x05
    1abe:	26 30       	cpi	r18, 0x06	; 6
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	f9 f0       	breq	.+62     	; 0x1b02 <DIO_SetPortDirection+0x200>
    1ac4:	25 c0       	rjmp	.+74     	; 0x1b10 <DIO_SetPortDirection+0x20e>
			{
			case PORTA:DDRA_REG = Port_Dir;break;
    1ac6:	ea e3       	ldi	r30, 0x3A	; 58
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	80 83       	st	Z, r24
    1ace:	20 c0       	rjmp	.+64     	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTB:DDRB_REG = Port_Dir;break;
    1ad0:	e7 e3       	ldi	r30, 0x37	; 55
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	80 83       	st	Z, r24
    1ad8:	1b c0       	rjmp	.+54     	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTC:DDRC_REG = Port_Dir;break;
    1ada:	e4 e3       	ldi	r30, 0x34	; 52
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	80 83       	st	Z, r24
    1ae2:	16 c0       	rjmp	.+44     	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTD:DDRD_REG = Port_Dir;break;
    1ae4:	e1 e3       	ldi	r30, 0x31	; 49
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	80 83       	st	Z, r24
    1aec:	11 c0       	rjmp	.+34     	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTE:DDRE_REG = Port_Dir;break;
    1aee:	e2 e2       	ldi	r30, 0x22	; 34
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	80 83       	st	Z, r24
    1af6:	0c c0       	rjmp	.+24     	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTF:DDRF_REG = Port_Dir;break;
    1af8:	e1 e6       	ldi	r30, 0x61	; 97
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	80 83       	st	Z, r24
    1b00:	07 c0       	rjmp	.+14     	; 0x1b10 <DIO_SetPortDirection+0x20e>
			case PORTG:DDRG_REG = Port_Dir;break;
    1b02:	e4 e6       	ldi	r30, 0x64	; 100
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	80 83       	st	Z, r24
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <DIO_SetPortDirection+0x20e>
			}
		}
	}
	else
	{
		ErrorState = DIO_NOTOK;
    1b0c:	85 e0       	ldi	r24, 0x05	; 5
    1b0e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b12:	29 96       	adiw	r28, 0x09	; 9
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	f8 94       	cli
    1b18:	de bf       	out	0x3e, r29	; 62
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	cd bf       	out	0x3d, r28	; 61
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <DIO_SetPortValue>:

u8 DIO_SetPortValue(u8 Port_ID,u8 Port_Val)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	29 97       	sbiw	r28, 0x09	; 9
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	8a 83       	std	Y+2, r24	; 0x02
    1b3a:	6b 83       	std	Y+3, r22	; 0x03
	u8 ErrorState = DIO_OK;
    1b3c:	19 82       	std	Y+1, r1	; 0x01
	if(Port_ID>=PORTA && Port_ID<=PORTG && Port_Val>= 0 && Port_Val<= 255)
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	87 30       	cpi	r24, 0x07	; 7
    1b42:	08 f0       	brcs	.+2      	; 0x1b46 <DIO_SetPortValue+0x22>
    1b44:	f4 c0       	rjmp	.+488    	; 0x1d2e <DIO_SetPortValue+0x20a>
	{
		if(Port_Val == HIGH_PORT)
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	8f 3f       	cpi	r24, 0xFF	; 255
    1b4a:	09 f0       	breq	.+2      	; 0x1b4e <DIO_SetPortValue+0x2a>
    1b4c:	51 c0       	rjmp	.+162    	; 0x1bf0 <DIO_SetPortValue+0xcc>
		{
			switch(Port_ID)
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	39 87       	std	Y+9, r19	; 0x09
    1b56:	28 87       	std	Y+8, r18	; 0x08
    1b58:	88 85       	ldd	r24, Y+8	; 0x08
    1b5a:	99 85       	ldd	r25, Y+9	; 0x09
    1b5c:	83 30       	cpi	r24, 0x03	; 3
    1b5e:	91 05       	cpc	r25, r1
    1b60:	99 f1       	breq	.+102    	; 0x1bc8 <DIO_SetPortValue+0xa4>
    1b62:	28 85       	ldd	r18, Y+8	; 0x08
    1b64:	39 85       	ldd	r19, Y+9	; 0x09
    1b66:	24 30       	cpi	r18, 0x04	; 4
    1b68:	31 05       	cpc	r19, r1
    1b6a:	7c f4       	brge	.+30     	; 0x1b8a <DIO_SetPortValue+0x66>
    1b6c:	88 85       	ldd	r24, Y+8	; 0x08
    1b6e:	99 85       	ldd	r25, Y+9	; 0x09
    1b70:	81 30       	cpi	r24, 0x01	; 1
    1b72:	91 05       	cpc	r25, r1
    1b74:	f9 f0       	breq	.+62     	; 0x1bb4 <DIO_SetPortValue+0x90>
    1b76:	28 85       	ldd	r18, Y+8	; 0x08
    1b78:	39 85       	ldd	r19, Y+9	; 0x09
    1b7a:	22 30       	cpi	r18, 0x02	; 2
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	fc f4       	brge	.+62     	; 0x1bbe <DIO_SetPortValue+0x9a>
    1b80:	88 85       	ldd	r24, Y+8	; 0x08
    1b82:	99 85       	ldd	r25, Y+9	; 0x09
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	89 f0       	breq	.+34     	; 0x1baa <DIO_SetPortValue+0x86>
    1b88:	d4 c0       	rjmp	.+424    	; 0x1d32 <DIO_SetPortValue+0x20e>
    1b8a:	28 85       	ldd	r18, Y+8	; 0x08
    1b8c:	39 85       	ldd	r19, Y+9	; 0x09
    1b8e:	25 30       	cpi	r18, 0x05	; 5
    1b90:	31 05       	cpc	r19, r1
    1b92:	21 f1       	breq	.+72     	; 0x1bdc <DIO_SetPortValue+0xb8>
    1b94:	88 85       	ldd	r24, Y+8	; 0x08
    1b96:	99 85       	ldd	r25, Y+9	; 0x09
    1b98:	85 30       	cpi	r24, 0x05	; 5
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	d4 f0       	brlt	.+52     	; 0x1bd2 <DIO_SetPortValue+0xae>
    1b9e:	28 85       	ldd	r18, Y+8	; 0x08
    1ba0:	39 85       	ldd	r19, Y+9	; 0x09
    1ba2:	26 30       	cpi	r18, 0x06	; 6
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	f9 f0       	breq	.+62     	; 0x1be6 <DIO_SetPortValue+0xc2>
    1ba8:	c4 c0       	rjmp	.+392    	; 0x1d32 <DIO_SetPortValue+0x20e>
			{
			case PORTA:SET_REG(PORTA_REG);break;
    1baa:	eb e3       	ldi	r30, 0x3B	; 59
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	8f ef       	ldi	r24, 0xFF	; 255
    1bb0:	80 83       	st	Z, r24
    1bb2:	bf c0       	rjmp	.+382    	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTB:SET_REG(PORTB_REG);break;
    1bb4:	e8 e3       	ldi	r30, 0x38	; 56
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	8f ef       	ldi	r24, 0xFF	; 255
    1bba:	80 83       	st	Z, r24
    1bbc:	ba c0       	rjmp	.+372    	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTC:SET_REG(PORTC_REG);break;
    1bbe:	e5 e3       	ldi	r30, 0x35	; 53
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	8f ef       	ldi	r24, 0xFF	; 255
    1bc4:	80 83       	st	Z, r24
    1bc6:	b5 c0       	rjmp	.+362    	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTD:SET_REG(PORTD_REG);break;
    1bc8:	e2 e3       	ldi	r30, 0x32	; 50
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	8f ef       	ldi	r24, 0xFF	; 255
    1bce:	80 83       	st	Z, r24
    1bd0:	b0 c0       	rjmp	.+352    	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTE:SET_REG(PORTE_REG);break;
    1bd2:	e3 e2       	ldi	r30, 0x23	; 35
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
    1bd8:	80 83       	st	Z, r24
    1bda:	ab c0       	rjmp	.+342    	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTF:SET_REG(PORTF_REG);break;
    1bdc:	e2 e6       	ldi	r30, 0x62	; 98
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	80 83       	st	Z, r24
    1be4:	a6 c0       	rjmp	.+332    	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTG:SET_REG(PORTG_REG);break;
    1be6:	e5 e6       	ldi	r30, 0x65	; 101
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	8f ef       	ldi	r24, 0xFF	; 255
    1bec:	80 83       	st	Z, r24
    1bee:	a1 c0       	rjmp	.+322    	; 0x1d32 <DIO_SetPortValue+0x20e>
			default:break;
			}
		}
		else if(Port_Val == LOW_PORT)
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	88 23       	and	r24, r24
    1bf4:	09 f0       	breq	.+2      	; 0x1bf8 <DIO_SetPortValue+0xd4>
    1bf6:	4a c0       	rjmp	.+148    	; 0x1c8c <DIO_SetPortValue+0x168>
		{
			switch(Port_ID)
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	3f 83       	std	Y+7, r19	; 0x07
    1c00:	2e 83       	std	Y+6, r18	; 0x06
    1c02:	8e 81       	ldd	r24, Y+6	; 0x06
    1c04:	9f 81       	ldd	r25, Y+7	; 0x07
    1c06:	83 30       	cpi	r24, 0x03	; 3
    1c08:	91 05       	cpc	r25, r1
    1c0a:	81 f1       	breq	.+96     	; 0x1c6c <DIO_SetPortValue+0x148>
    1c0c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c0e:	3f 81       	ldd	r19, Y+7	; 0x07
    1c10:	24 30       	cpi	r18, 0x04	; 4
    1c12:	31 05       	cpc	r19, r1
    1c14:	7c f4       	brge	.+30     	; 0x1c34 <DIO_SetPortValue+0x110>
    1c16:	8e 81       	ldd	r24, Y+6	; 0x06
    1c18:	9f 81       	ldd	r25, Y+7	; 0x07
    1c1a:	81 30       	cpi	r24, 0x01	; 1
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	f1 f0       	breq	.+60     	; 0x1c5c <DIO_SetPortValue+0x138>
    1c20:	2e 81       	ldd	r18, Y+6	; 0x06
    1c22:	3f 81       	ldd	r19, Y+7	; 0x07
    1c24:	22 30       	cpi	r18, 0x02	; 2
    1c26:	31 05       	cpc	r19, r1
    1c28:	ec f4       	brge	.+58     	; 0x1c64 <DIO_SetPortValue+0x140>
    1c2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	89 f0       	breq	.+34     	; 0x1c54 <DIO_SetPortValue+0x130>
    1c32:	7f c0       	rjmp	.+254    	; 0x1d32 <DIO_SetPortValue+0x20e>
    1c34:	2e 81       	ldd	r18, Y+6	; 0x06
    1c36:	3f 81       	ldd	r19, Y+7	; 0x07
    1c38:	25 30       	cpi	r18, 0x05	; 5
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	f9 f0       	breq	.+62     	; 0x1c7c <DIO_SetPortValue+0x158>
    1c3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c40:	9f 81       	ldd	r25, Y+7	; 0x07
    1c42:	85 30       	cpi	r24, 0x05	; 5
    1c44:	91 05       	cpc	r25, r1
    1c46:	b4 f0       	brlt	.+44     	; 0x1c74 <DIO_SetPortValue+0x150>
    1c48:	2e 81       	ldd	r18, Y+6	; 0x06
    1c4a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c4c:	26 30       	cpi	r18, 0x06	; 6
    1c4e:	31 05       	cpc	r19, r1
    1c50:	c9 f0       	breq	.+50     	; 0x1c84 <DIO_SetPortValue+0x160>
    1c52:	6f c0       	rjmp	.+222    	; 0x1d32 <DIO_SetPortValue+0x20e>
			{
			case PORTA:CLR_REG(PORTA_REG);break;
    1c54:	eb e3       	ldi	r30, 0x3B	; 59
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	10 82       	st	Z, r1
    1c5a:	6b c0       	rjmp	.+214    	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTB:CLR_REG(PORTB_REG);break;
    1c5c:	e8 e3       	ldi	r30, 0x38	; 56
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	10 82       	st	Z, r1
    1c62:	67 c0       	rjmp	.+206    	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTC:CLR_REG(PORTC_REG);break;
    1c64:	e5 e3       	ldi	r30, 0x35	; 53
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	10 82       	st	Z, r1
    1c6a:	63 c0       	rjmp	.+198    	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTD:CLR_REG(PORTD_REG);break;
    1c6c:	e2 e3       	ldi	r30, 0x32	; 50
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	10 82       	st	Z, r1
    1c72:	5f c0       	rjmp	.+190    	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTE:CLR_REG(PORTE_REG);break;
    1c74:	e3 e2       	ldi	r30, 0x23	; 35
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	10 82       	st	Z, r1
    1c7a:	5b c0       	rjmp	.+182    	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTF:CLR_REG(PORTF_REG);break;
    1c7c:	e2 e6       	ldi	r30, 0x62	; 98
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	10 82       	st	Z, r1
    1c82:	57 c0       	rjmp	.+174    	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTG:CLR_REG(PORTG_REG);break;
    1c84:	e5 e6       	ldi	r30, 0x65	; 101
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	10 82       	st	Z, r1
    1c8a:	53 c0       	rjmp	.+166    	; 0x1d32 <DIO_SetPortValue+0x20e>
			default:break;
			}
		}
		else
		{
			switch(Port_ID)
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	3d 83       	std	Y+5, r19	; 0x05
    1c94:	2c 83       	std	Y+4, r18	; 0x04
    1c96:	8c 81       	ldd	r24, Y+4	; 0x04
    1c98:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9a:	83 30       	cpi	r24, 0x03	; 3
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	99 f1       	breq	.+102    	; 0x1d06 <DIO_SetPortValue+0x1e2>
    1ca0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca4:	24 30       	cpi	r18, 0x04	; 4
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	7c f4       	brge	.+30     	; 0x1cc8 <DIO_SetPortValue+0x1a4>
    1caa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cac:	9d 81       	ldd	r25, Y+5	; 0x05
    1cae:	81 30       	cpi	r24, 0x01	; 1
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	f9 f0       	breq	.+62     	; 0x1cf2 <DIO_SetPortValue+0x1ce>
    1cb4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb8:	22 30       	cpi	r18, 0x02	; 2
    1cba:	31 05       	cpc	r19, r1
    1cbc:	fc f4       	brge	.+62     	; 0x1cfc <DIO_SetPortValue+0x1d8>
    1cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	89 f0       	breq	.+34     	; 0x1ce8 <DIO_SetPortValue+0x1c4>
    1cc6:	35 c0       	rjmp	.+106    	; 0x1d32 <DIO_SetPortValue+0x20e>
    1cc8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cca:	3d 81       	ldd	r19, Y+5	; 0x05
    1ccc:	25 30       	cpi	r18, 0x05	; 5
    1cce:	31 05       	cpc	r19, r1
    1cd0:	21 f1       	breq	.+72     	; 0x1d1a <DIO_SetPortValue+0x1f6>
    1cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd6:	85 30       	cpi	r24, 0x05	; 5
    1cd8:	91 05       	cpc	r25, r1
    1cda:	d4 f0       	brlt	.+52     	; 0x1d10 <DIO_SetPortValue+0x1ec>
    1cdc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cde:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce0:	26 30       	cpi	r18, 0x06	; 6
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	f9 f0       	breq	.+62     	; 0x1d24 <DIO_SetPortValue+0x200>
    1ce6:	25 c0       	rjmp	.+74     	; 0x1d32 <DIO_SetPortValue+0x20e>
			{
			case PORTA:PORTA_REG = Port_Val;break;
    1ce8:	eb e3       	ldi	r30, 0x3B	; 59
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	80 83       	st	Z, r24
    1cf0:	20 c0       	rjmp	.+64     	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTB:PORTB_REG = Port_Val;break;
    1cf2:	e8 e3       	ldi	r30, 0x38	; 56
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	80 83       	st	Z, r24
    1cfa:	1b c0       	rjmp	.+54     	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTC:PORTC_REG = Port_Val;break;
    1cfc:	e5 e3       	ldi	r30, 0x35	; 53
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	80 83       	st	Z, r24
    1d04:	16 c0       	rjmp	.+44     	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTD:PORTD_REG = Port_Val;break;
    1d06:	e2 e3       	ldi	r30, 0x32	; 50
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	80 83       	st	Z, r24
    1d0e:	11 c0       	rjmp	.+34     	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTE:PORTE_REG = Port_Val;break;
    1d10:	e3 e2       	ldi	r30, 0x23	; 35
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	80 83       	st	Z, r24
    1d18:	0c c0       	rjmp	.+24     	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTF:PORTF_REG = Port_Val;break;
    1d1a:	e2 e6       	ldi	r30, 0x62	; 98
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	80 83       	st	Z, r24
    1d22:	07 c0       	rjmp	.+14     	; 0x1d32 <DIO_SetPortValue+0x20e>
			case PORTG:PORTG_REG = Port_Val;break;
    1d24:	e5 e6       	ldi	r30, 0x65	; 101
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	80 83       	st	Z, r24
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <DIO_SetPortValue+0x20e>
			}
		}
	}
	else
	{
		ErrorState = DIO_NOTOK;
    1d2e:	85 e0       	ldi	r24, 0x05	; 5
    1d30:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d34:	29 96       	adiw	r28, 0x09	; 9
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <DIO_ReadPort>:

u8	DIO_ReadPort(u8 Port_ID,u8 * PortReading)
{
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <DIO_ReadPort+0x6>
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <DIO_ReadPort+0x8>
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <DIO_ReadPort+0xa>
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	8a 83       	std	Y+2, r24	; 0x02
    1d56:	7c 83       	std	Y+4, r23	; 0x04
    1d58:	6b 83       	std	Y+3, r22	; 0x03
	u8 ErrorState = DIO_OK;
    1d5a:	19 82       	std	Y+1, r1	; 0x01
	*PortReading = 0;
    1d5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d60:	10 82       	st	Z, r1
	if(Port_ID>= PORTA && Port_ID <=PORTG)
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	87 30       	cpi	r24, 0x07	; 7
    1d66:	08 f0       	brcs	.+2      	; 0x1d6a <DIO_ReadPort+0x24>
    1d68:	62 c0       	rjmp	.+196    	; 0x1e2e <DIO_ReadPort+0xe8>
	{
		switch(Port_ID)
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	3e 83       	std	Y+6, r19	; 0x06
    1d72:	2d 83       	std	Y+5, r18	; 0x05
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
    1d76:	9e 81       	ldd	r25, Y+6	; 0x06
    1d78:	83 30       	cpi	r24, 0x03	; 3
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	c9 f1       	breq	.+114    	; 0x1df0 <DIO_ReadPort+0xaa>
    1d7e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d80:	3e 81       	ldd	r19, Y+6	; 0x06
    1d82:	24 30       	cpi	r18, 0x04	; 4
    1d84:	31 05       	cpc	r19, r1
    1d86:	7c f4       	brge	.+30     	; 0x1da6 <DIO_ReadPort+0x60>
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	91 05       	cpc	r25, r1
    1d90:	09 f1       	breq	.+66     	; 0x1dd4 <DIO_ReadPort+0x8e>
    1d92:	2d 81       	ldd	r18, Y+5	; 0x05
    1d94:	3e 81       	ldd	r19, Y+6	; 0x06
    1d96:	22 30       	cpi	r18, 0x02	; 2
    1d98:	31 05       	cpc	r19, r1
    1d9a:	1c f5       	brge	.+70     	; 0x1de2 <DIO_ReadPort+0x9c>
    1d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	89 f0       	breq	.+34     	; 0x1dc6 <DIO_ReadPort+0x80>
    1da4:	41 c0       	rjmp	.+130    	; 0x1e28 <DIO_ReadPort+0xe2>
    1da6:	2d 81       	ldd	r18, Y+5	; 0x05
    1da8:	3e 81       	ldd	r19, Y+6	; 0x06
    1daa:	25 30       	cpi	r18, 0x05	; 5
    1dac:	31 05       	cpc	r19, r1
    1dae:	71 f1       	breq	.+92     	; 0x1e0c <DIO_ReadPort+0xc6>
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	85 30       	cpi	r24, 0x05	; 5
    1db6:	91 05       	cpc	r25, r1
    1db8:	14 f1       	brlt	.+68     	; 0x1dfe <DIO_ReadPort+0xb8>
    1dba:	2d 81       	ldd	r18, Y+5	; 0x05
    1dbc:	3e 81       	ldd	r19, Y+6	; 0x06
    1dbe:	26 30       	cpi	r18, 0x06	; 6
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	59 f1       	breq	.+86     	; 0x1e1a <DIO_ReadPort+0xd4>
    1dc4:	31 c0       	rjmp	.+98     	; 0x1e28 <DIO_ReadPort+0xe2>
		{
		case PORTA:*PortReading = GET_REG(PINA_REG);break;
    1dc6:	e9 e3       	ldi	r30, 0x39	; 57
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	eb 81       	ldd	r30, Y+3	; 0x03
    1dce:	fc 81       	ldd	r31, Y+4	; 0x04
    1dd0:	80 83       	st	Z, r24
    1dd2:	2f c0       	rjmp	.+94     	; 0x1e32 <DIO_ReadPort+0xec>
		case PORTB:*PortReading = GET_REG(PINB_REG);break;
    1dd4:	e6 e3       	ldi	r30, 0x36	; 54
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	eb 81       	ldd	r30, Y+3	; 0x03
    1ddc:	fc 81       	ldd	r31, Y+4	; 0x04
    1dde:	80 83       	st	Z, r24
    1de0:	28 c0       	rjmp	.+80     	; 0x1e32 <DIO_ReadPort+0xec>
		case PORTC:*PortReading = GET_REG(PINC_REG);break;
    1de2:	e3 e3       	ldi	r30, 0x33	; 51
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	eb 81       	ldd	r30, Y+3	; 0x03
    1dea:	fc 81       	ldd	r31, Y+4	; 0x04
    1dec:	80 83       	st	Z, r24
    1dee:	21 c0       	rjmp	.+66     	; 0x1e32 <DIO_ReadPort+0xec>
		case PORTD:*PortReading = GET_REG(PIND_REG);break;
    1df0:	e0 e3       	ldi	r30, 0x30	; 48
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	eb 81       	ldd	r30, Y+3	; 0x03
    1df8:	fc 81       	ldd	r31, Y+4	; 0x04
    1dfa:	80 83       	st	Z, r24
    1dfc:	1a c0       	rjmp	.+52     	; 0x1e32 <DIO_ReadPort+0xec>
		case PORTE:*PortReading = GET_REG(PINE_REG);break;
    1dfe:	e1 e2       	ldi	r30, 0x21	; 33
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	eb 81       	ldd	r30, Y+3	; 0x03
    1e06:	fc 81       	ldd	r31, Y+4	; 0x04
    1e08:	80 83       	st	Z, r24
    1e0a:	13 c0       	rjmp	.+38     	; 0x1e32 <DIO_ReadPort+0xec>
		case PORTF:*PortReading = GET_REG(PINF_REG);break;
    1e0c:	e0 e2       	ldi	r30, 0x20	; 32
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	eb 81       	ldd	r30, Y+3	; 0x03
    1e14:	fc 81       	ldd	r31, Y+4	; 0x04
    1e16:	80 83       	st	Z, r24
    1e18:	0c c0       	rjmp	.+24     	; 0x1e32 <DIO_ReadPort+0xec>
		case PORTG:*PortReading = GET_REG(PING_REG);break;
    1e1a:	e3 e6       	ldi	r30, 0x63	; 99
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	eb 81       	ldd	r30, Y+3	; 0x03
    1e22:	fc 81       	ldd	r31, Y+4	; 0x04
    1e24:	80 83       	st	Z, r24
    1e26:	05 c0       	rjmp	.+10     	; 0x1e32 <DIO_ReadPort+0xec>
		default: ErrorState = DIO_PortOutOfRange;break;
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <DIO_ReadPort+0xec>
		}
	}
	else
	{
		ErrorState = DIO_NOTOK;
    1e2e:	85 e0       	ldi	r24, 0x05	; 5
    1e30:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e34:	26 96       	adiw	r28, 0x06	; 6
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <DIO_TogglePort>:

u8 DIO_TogglePort(u8 Port_ID)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <DIO_TogglePort+0x6>
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <DIO_TogglePort+0x8>
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	8a 83       	std	Y+2, r24	; 0x02
	u8 ErrorState = DIO_OK;
    1e54:	19 82       	std	Y+1, r1	; 0x01
	if(Port_ID>= PORTA && Port_ID <=PORTG)
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	87 30       	cpi	r24, 0x07	; 7
    1e5a:	08 f0       	brcs	.+2      	; 0x1e5e <DIO_TogglePort+0x18>
    1e5c:	69 c0       	rjmp	.+210    	; 0x1f30 <DIO_TogglePort+0xea>
	{
		switch(Port_ID)
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	3c 83       	std	Y+4, r19	; 0x04
    1e66:	2b 83       	std	Y+3, r18	; 0x03
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	83 30       	cpi	r24, 0x03	; 3
    1e6e:	91 05       	cpc	r25, r1
    1e70:	e1 f1       	breq	.+120    	; 0x1eea <DIO_TogglePort+0xa4>
    1e72:	2b 81       	ldd	r18, Y+3	; 0x03
    1e74:	3c 81       	ldd	r19, Y+4	; 0x04
    1e76:	24 30       	cpi	r18, 0x04	; 4
    1e78:	31 05       	cpc	r19, r1
    1e7a:	7c f4       	brge	.+30     	; 0x1e9a <DIO_TogglePort+0x54>
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	91 05       	cpc	r25, r1
    1e84:	11 f1       	breq	.+68     	; 0x1eca <DIO_TogglePort+0x84>
    1e86:	2b 81       	ldd	r18, Y+3	; 0x03
    1e88:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8a:	22 30       	cpi	r18, 0x02	; 2
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	2c f5       	brge	.+74     	; 0x1eda <DIO_TogglePort+0x94>
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	89 f0       	breq	.+34     	; 0x1eba <DIO_TogglePort+0x74>
    1e98:	48 c0       	rjmp	.+144    	; 0x1f2a <DIO_TogglePort+0xe4>
    1e9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9e:	25 30       	cpi	r18, 0x05	; 5
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	99 f1       	breq	.+102    	; 0x1f0a <DIO_TogglePort+0xc4>
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea8:	85 30       	cpi	r24, 0x05	; 5
    1eaa:	91 05       	cpc	r25, r1
    1eac:	34 f1       	brlt	.+76     	; 0x1efa <DIO_TogglePort+0xb4>
    1eae:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb2:	26 30       	cpi	r18, 0x06	; 6
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	89 f1       	breq	.+98     	; 0x1f1a <DIO_TogglePort+0xd4>
    1eb8:	38 c0       	rjmp	.+112    	; 0x1f2a <DIO_TogglePort+0xe4>
		{
		case PORTA:TOG_REG(PORTA_REG);break;
    1eba:	ab e3       	ldi	r26, 0x3B	; 59
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	eb e3       	ldi	r30, 0x3B	; 59
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	80 95       	com	r24
    1ec6:	8c 93       	st	X, r24
    1ec8:	35 c0       	rjmp	.+106    	; 0x1f34 <DIO_TogglePort+0xee>
		case PORTB:TOG_REG(PORTB_REG);break;
    1eca:	a8 e3       	ldi	r26, 0x38	; 56
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e8 e3       	ldi	r30, 0x38	; 56
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	80 95       	com	r24
    1ed6:	8c 93       	st	X, r24
    1ed8:	2d c0       	rjmp	.+90     	; 0x1f34 <DIO_TogglePort+0xee>
		case PORTC:TOG_REG(PORTC_REG);break;
    1eda:	a5 e3       	ldi	r26, 0x35	; 53
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e5 e3       	ldi	r30, 0x35	; 53
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	80 95       	com	r24
    1ee6:	8c 93       	st	X, r24
    1ee8:	25 c0       	rjmp	.+74     	; 0x1f34 <DIO_TogglePort+0xee>
		case PORTD:TOG_REG(PORTD_REG);break;
    1eea:	a2 e3       	ldi	r26, 0x32	; 50
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e2 e3       	ldi	r30, 0x32	; 50
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	80 95       	com	r24
    1ef6:	8c 93       	st	X, r24
    1ef8:	1d c0       	rjmp	.+58     	; 0x1f34 <DIO_TogglePort+0xee>
		case PORTE:TOG_REG(PORTE_REG);break;
    1efa:	a3 e2       	ldi	r26, 0x23	; 35
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e3 e2       	ldi	r30, 0x23	; 35
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	80 95       	com	r24
    1f06:	8c 93       	st	X, r24
    1f08:	15 c0       	rjmp	.+42     	; 0x1f34 <DIO_TogglePort+0xee>
		case PORTF:TOG_REG(PORTF_REG);break;
    1f0a:	a2 e6       	ldi	r26, 0x62	; 98
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e2 e6       	ldi	r30, 0x62	; 98
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	80 95       	com	r24
    1f16:	8c 93       	st	X, r24
    1f18:	0d c0       	rjmp	.+26     	; 0x1f34 <DIO_TogglePort+0xee>
		case PORTG:TOG_REG(PORTG_REG);break;
    1f1a:	a5 e6       	ldi	r26, 0x65	; 101
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e5 e6       	ldi	r30, 0x65	; 101
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	80 95       	com	r24
    1f26:	8c 93       	st	X, r24
    1f28:	05 c0       	rjmp	.+10     	; 0x1f34 <DIO_TogglePort+0xee>
		default:ErrorState = DIO_PortOutOfRange;break;
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <DIO_TogglePort+0xee>
		}
	}
	else
	{
		ErrorState = DIO_NOTOK;
    1f30:	85 e0       	ldi	r24, 0x05	; 5
    1f32:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	08 95       	ret

00001f44 <EEPROM_INIT>:
#include "INTERNAL_EEPROM.h"
#include "EEPROM_Registers.h"


void EEPROM_INIT()
{
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EECR_REG,2);
    1f4c:	ac e2       	ldi	r26, 0x2C	; 44
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	ec e2       	ldi	r30, 0x2C	; 44
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	84 60       	ori	r24, 0x04	; 4
    1f58:	8c 93       	st	X, r24
	SET_BIT(EECR_REG,1);
    1f5a:	ac e2       	ldi	r26, 0x2C	; 44
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	ec e2       	ldi	r30, 0x2C	; 44
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	82 60       	ori	r24, 0x02	; 2
    1f66:	8c 93       	st	X, r24
}
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <EEPROM_WriteByte>:

void EEPROM_WriteByte(u16 Location,u8 Data)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <EEPROM_WriteByte+0x6>
    1f74:	0f 92       	push	r0
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	6b 83       	std	Y+3, r22	; 0x03
	CLR_BIT(SREG_REG,7);
    1f80:	af e5       	ldi	r26, 0x5F	; 95
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	ef e5       	ldi	r30, 0x5F	; 95
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	8f 77       	andi	r24, 0x7F	; 127
    1f8c:	8c 93       	st	X, r24

	EEDR_REG = Data;
    1f8e:	ed e2       	ldi	r30, 0x2D	; 45
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	80 83       	st	Z, r24

	EEAR_REG = Location;
    1f96:	ee e3       	ldi	r30, 0x3E	; 62
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9e:	91 83       	std	Z+1, r25	; 0x01
    1fa0:	80 83       	st	Z, r24

	SET_BIT(EECR_REG,2);
    1fa2:	ac e2       	ldi	r26, 0x2C	; 44
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	ec e2       	ldi	r30, 0x2C	; 44
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	84 60       	ori	r24, 0x04	; 4
    1fae:	8c 93       	st	X, r24

	SET_BIT(EECR_REG,1);
    1fb0:	ac e2       	ldi	r26, 0x2C	; 44
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	ec e2       	ldi	r30, 0x2C	; 44
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	82 60       	ori	r24, 0x02	; 2
    1fbc:	8c 93       	st	X, r24

	SET_BIT(SREG_REG,7);
    1fbe:	af e5       	ldi	r26, 0x5F	; 95
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	ef e5       	ldi	r30, 0x5F	; 95
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	80 68       	ori	r24, 0x80	; 128
    1fca:	8c 93       	st	X, r24

	while(GET_BIT(EECR_REG,1) == 1);
    1fcc:	ec e2       	ldi	r30, 0x2C	; 44
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	86 95       	lsr	r24
    1fd4:	88 2f       	mov	r24, r24
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	81 70       	andi	r24, 0x01	; 1
    1fda:	90 70       	andi	r25, 0x00	; 0
    1fdc:	88 23       	and	r24, r24
    1fde:	b1 f7       	brne	.-20     	; 0x1fcc <EEPROM_WriteByte+0x5e>
}
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <EEPROM_ReadByte>:


u8 	 EEPROM_ReadByte(u16 location)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <EEPROM_ReadByte+0x6>
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	9a 83       	std	Y+2, r25	; 0x02
    1ff8:	89 83       	std	Y+1, r24	; 0x01

	CLR_BIT(SREG_REG,7);
    1ffa:	af e5       	ldi	r26, 0x5F	; 95
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	ef e5       	ldi	r30, 0x5F	; 95
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	8f 77       	andi	r24, 0x7F	; 127
    2006:	8c 93       	st	X, r24

	EEAR_REG = location;
    2008:	ee e3       	ldi	r30, 0x3E	; 62
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	91 83       	std	Z+1, r25	; 0x01
    2012:	80 83       	st	Z, r24

	SET_BIT(EECR_REG,0);
    2014:	ac e2       	ldi	r26, 0x2C	; 44
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	ec e2       	ldi	r30, 0x2C	; 44
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	81 60       	ori	r24, 0x01	; 1
    2020:	8c 93       	st	X, r24

	SET_BIT(SREG_REG,7);
    2022:	af e5       	ldi	r26, 0x5F	; 95
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	ef e5       	ldi	r30, 0x5F	; 95
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	80 68       	ori	r24, 0x80	; 128
    202e:	8c 93       	st	X, r24

	return EEDR_REG;
    2030:	ed e2       	ldi	r30, 0x2D	; 45
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
}
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <PT100_ReadTemperture>:
#include "LM35_Interface.h"
#include "ADC_Interface.h"
#include "ADC_Config.h"
#include "avr/delay.h"
void PT100_ReadTemperture(u8 ADC_Channel ,u16 *ADC_Result)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	61 97       	sbiw	r28, 0x11	; 17
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	8f 87       	std	Y+15, r24	; 0x0f
    2056:	79 8b       	std	Y+17, r23	; 0x11
    2058:	68 8b       	std	Y+16, r22	; 0x10
    ADC_Select_Channal(ADC_Channel);
    205a:	8f 85       	ldd	r24, Y+15	; 0x0f
    205c:	0e 94 dd 06 	call	0xdba	; 0xdba <ADC_Select_Channal>
    ADC_Enable();
    2060:	0e 94 c1 06 	call	0xd82	; 0xd82 <ADC_Enable>
    ADC_Start_Conversion();
    2064:	0e 94 cf 06 	call	0xd9e	; 0xd9e <ADC_Start_Conversion>
    ADC_Wait_Flag();
    2068:	0e 94 f6 06 	call	0xdec	; 0xdec <ADC_Wait_Flag>
    ADC_Get_Result(ADC_Result);
    206c:	88 89       	ldd	r24, Y+16	; 0x10
    206e:	99 89       	ldd	r25, Y+17	; 0x11
    2070:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_Get_Result>
    *ADC_Result= (u16)(((*ADC_Result)*1.287)-685.75);
    2074:	e8 89       	ldd	r30, Y+16	; 0x10
    2076:	f9 89       	ldd	r31, Y+17	; 0x11
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
    207c:	cc 01       	movw	r24, r24
    207e:	a0 e0       	ldi	r26, 0x00	; 0
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	0e 94 1b 04 	call	0x836	; 0x836 <__floatunsisf>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	2a e6       	ldi	r18, 0x6A	; 106
    2094:	3c eb       	ldi	r19, 0xBC	; 188
    2096:	44 ea       	ldi	r20, 0xA4	; 164
    2098:	5f e3       	ldi	r21, 0x3F	; 63
    209a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e7       	ldi	r19, 0x70	; 112
    20aa:	4b e2       	ldi	r20, 0x2B	; 43
    20ac:	54 e4       	ldi	r21, 0x44	; 68
    20ae:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	bc 01       	movw	r22, r24
    20b8:	cd 01       	movw	r24, r26
    20ba:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	e8 89       	ldd	r30, Y+16	; 0x10
    20c4:	f9 89       	ldd	r31, Y+17	; 0x11
    20c6:	91 83       	std	Z+1, r25	; 0x01
    20c8:	80 83       	st	Z, r24
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	a0 ea       	ldi	r26, 0xA0	; 160
    20d0:	b0 e4       	ldi	r27, 0x40	; 64
    20d2:	8b 87       	std	Y+11, r24	; 0x0b
    20d4:	9c 87       	std	Y+12, r25	; 0x0c
    20d6:	ad 87       	std	Y+13, r26	; 0x0d
    20d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20da:	6b 85       	ldd	r22, Y+11	; 0x0b
    20dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20de:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	4a e7       	ldi	r20, 0x7A	; 122
    20e8:	55 e4       	ldi	r21, 0x45	; 69
    20ea:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	8f 83       	std	Y+7, r24	; 0x07
    20f4:	98 87       	std	Y+8, r25	; 0x08
    20f6:	a9 87       	std	Y+9, r26	; 0x09
    20f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20fa:	6f 81       	ldd	r22, Y+7	; 0x07
    20fc:	78 85       	ldd	r23, Y+8	; 0x08
    20fe:	89 85       	ldd	r24, Y+9	; 0x09
    2100:	9a 85       	ldd	r25, Y+10	; 0x0a
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e8       	ldi	r20, 0x80	; 128
    2108:	5f e3       	ldi	r21, 0x3F	; 63
    210a:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    210e:	88 23       	and	r24, r24
    2110:	2c f4       	brge	.+10     	; 0x211c <PT100_ReadTemperture+0xdc>
		__ticks = 1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
    211a:	3f c0       	rjmp	.+126    	; 0x219a <PT100_ReadTemperture+0x15a>
	else if (__tmp > 65535)
    211c:	6f 81       	ldd	r22, Y+7	; 0x07
    211e:	78 85       	ldd	r23, Y+8	; 0x08
    2120:	89 85       	ldd	r24, Y+9	; 0x09
    2122:	9a 85       	ldd	r25, Y+10	; 0x0a
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	3f ef       	ldi	r19, 0xFF	; 255
    2128:	4f e7       	ldi	r20, 0x7F	; 127
    212a:	57 e4       	ldi	r21, 0x47	; 71
    212c:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    2130:	18 16       	cp	r1, r24
    2132:	4c f5       	brge	.+82     	; 0x2186 <PT100_ReadTemperture+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2134:	6b 85       	ldd	r22, Y+11	; 0x0b
    2136:	7c 85       	ldd	r23, Y+12	; 0x0c
    2138:	8d 85       	ldd	r24, Y+13	; 0x0d
    213a:	9e 85       	ldd	r25, Y+14	; 0x0e
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e2       	ldi	r20, 0x20	; 32
    2142:	51 e4       	ldi	r21, 0x41	; 65
    2144:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	9e 83       	std	Y+6, r25	; 0x06
    215a:	8d 83       	std	Y+5, r24	; 0x05
    215c:	0f c0       	rjmp	.+30     	; 0x217c <PT100_ReadTemperture+0x13c>
    215e:	80 e9       	ldi	r24, 0x90	; 144
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	9c 83       	std	Y+4, r25	; 0x04
    2164:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	9c 81       	ldd	r25, Y+4	; 0x04
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <PT100_ReadTemperture+0x12a>
    216e:	9c 83       	std	Y+4, r25	; 0x04
    2170:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2172:	8d 81       	ldd	r24, Y+5	; 0x05
    2174:	9e 81       	ldd	r25, Y+6	; 0x06
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	69 f7       	brne	.-38     	; 0x215e <PT100_ReadTemperture+0x11e>
    2184:	14 c0       	rjmp	.+40     	; 0x21ae <PT100_ReadTemperture+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2186:	6f 81       	ldd	r22, Y+7	; 0x07
    2188:	78 85       	ldd	r23, Y+8	; 0x08
    218a:	89 85       	ldd	r24, Y+9	; 0x09
    218c:	9a 85       	ldd	r25, Y+10	; 0x0a
    218e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	9e 83       	std	Y+6, r25	; 0x06
    2198:	8d 83       	std	Y+5, r24	; 0x05
    219a:	8d 81       	ldd	r24, Y+5	; 0x05
    219c:	9e 81       	ldd	r25, Y+6	; 0x06
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	9a 81       	ldd	r25, Y+2	; 0x02
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <PT100_ReadTemperture+0x166>
    21aa:	9a 83       	std	Y+2, r25	; 0x02
    21ac:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
}
    21ae:	61 96       	adiw	r28, 0x11	; 17
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <LM35_ReadTemperture>:
void LM35_ReadTemperture(u8 ADC_Channel ,u16 *ADC_Result)
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	61 97       	sbiw	r28, 0x11	; 17
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	8f 87       	std	Y+15, r24	; 0x0f
    21d6:	79 8b       	std	Y+17, r23	; 0x11
    21d8:	68 8b       	std	Y+16, r22	; 0x10
    ADC_Select_Channal(ADC_Channel);
    21da:	8f 85       	ldd	r24, Y+15	; 0x0f
    21dc:	0e 94 dd 06 	call	0xdba	; 0xdba <ADC_Select_Channal>
    ADC_Enable();
    21e0:	0e 94 c1 06 	call	0xd82	; 0xd82 <ADC_Enable>
    ADC_Start_Conversion();
    21e4:	0e 94 cf 06 	call	0xd9e	; 0xd9e <ADC_Start_Conversion>
    ADC_Wait_Flag();
    21e8:	0e 94 f6 06 	call	0xdec	; 0xdec <ADC_Wait_Flag>
    ADC_Get_Result(ADC_Result);
    21ec:	88 89       	ldd	r24, Y+16	; 0x10
    21ee:	99 89       	ldd	r25, Y+17	; 0x11
    21f0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_Get_Result>
    *ADC_Result = ((5000UL*(*ADC_Result))>> 10) / 10 ;
    21f4:	e8 89       	ldd	r30, Y+16	; 0x10
    21f6:	f9 89       	ldd	r31, Y+17	; 0x11
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	cc 01       	movw	r24, r24
    21fe:	a0 e0       	ldi	r26, 0x00	; 0
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	28 e8       	ldi	r18, 0x88	; 136
    2204:	33 e1       	ldi	r19, 0x13	; 19
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 77 22 	call	0x44ee	; 0x44ee <__mulsi3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	07 2e       	mov	r0, r23
    2218:	7a e0       	ldi	r23, 0x0A	; 10
    221a:	b6 95       	lsr	r27
    221c:	a7 95       	ror	r26
    221e:	97 95       	ror	r25
    2220:	87 95       	ror	r24
    2222:	7a 95       	dec	r23
    2224:	d1 f7       	brne	.-12     	; 0x221a <LM35_ReadTemperture+0x5a>
    2226:	70 2d       	mov	r23, r0
    2228:	2a e0       	ldi	r18, 0x0A	; 10
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	bc 01       	movw	r22, r24
    2232:	cd 01       	movw	r24, r26
    2234:	0e 94 96 22 	call	0x452c	; 0x452c <__udivmodsi4>
    2238:	da 01       	movw	r26, r20
    223a:	c9 01       	movw	r24, r18
    223c:	e8 89       	ldd	r30, Y+16	; 0x10
    223e:	f9 89       	ldd	r31, Y+17	; 0x11
    2240:	91 83       	std	Z+1, r25	; 0x01
    2242:	80 83       	st	Z, r24
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a0 ea       	ldi	r26, 0xA0	; 160
    224a:	b0 e4       	ldi	r27, 0x40	; 64
    224c:	8b 87       	std	Y+11, r24	; 0x0b
    224e:	9c 87       	std	Y+12, r25	; 0x0c
    2250:	ad 87       	std	Y+13, r26	; 0x0d
    2252:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2254:	6b 85       	ldd	r22, Y+11	; 0x0b
    2256:	7c 85       	ldd	r23, Y+12	; 0x0c
    2258:	8d 85       	ldd	r24, Y+13	; 0x0d
    225a:	9e 85       	ldd	r25, Y+14	; 0x0e
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	4a e7       	ldi	r20, 0x7A	; 122
    2262:	55 e4       	ldi	r21, 0x45	; 69
    2264:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	8f 83       	std	Y+7, r24	; 0x07
    226e:	98 87       	std	Y+8, r25	; 0x08
    2270:	a9 87       	std	Y+9, r26	; 0x09
    2272:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2274:	6f 81       	ldd	r22, Y+7	; 0x07
    2276:	78 85       	ldd	r23, Y+8	; 0x08
    2278:	89 85       	ldd	r24, Y+9	; 0x09
    227a:	9a 85       	ldd	r25, Y+10	; 0x0a
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e8       	ldi	r20, 0x80	; 128
    2282:	5f e3       	ldi	r21, 0x3F	; 63
    2284:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    2288:	88 23       	and	r24, r24
    228a:	2c f4       	brge	.+10     	; 0x2296 <LM35_ReadTemperture+0xd6>
		__ticks = 1;
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
    2294:	3f c0       	rjmp	.+126    	; 0x2314 <LM35_ReadTemperture+0x154>
	else if (__tmp > 65535)
    2296:	6f 81       	ldd	r22, Y+7	; 0x07
    2298:	78 85       	ldd	r23, Y+8	; 0x08
    229a:	89 85       	ldd	r24, Y+9	; 0x09
    229c:	9a 85       	ldd	r25, Y+10	; 0x0a
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	3f ef       	ldi	r19, 0xFF	; 255
    22a2:	4f e7       	ldi	r20, 0x7F	; 127
    22a4:	57 e4       	ldi	r21, 0x47	; 71
    22a6:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    22aa:	18 16       	cp	r1, r24
    22ac:	4c f5       	brge	.+82     	; 0x2300 <LM35_ReadTemperture+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e2       	ldi	r20, 0x20	; 32
    22bc:	51 e4       	ldi	r21, 0x41	; 65
    22be:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	9e 83       	std	Y+6, r25	; 0x06
    22d4:	8d 83       	std	Y+5, r24	; 0x05
    22d6:	0f c0       	rjmp	.+30     	; 0x22f6 <LM35_ReadTemperture+0x136>
    22d8:	80 e9       	ldi	r24, 0x90	; 144
    22da:	91 e0       	ldi	r25, 0x01	; 1
    22dc:	9c 83       	std	Y+4, r25	; 0x04
    22de:	8b 83       	std	Y+3, r24	; 0x03
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	9c 81       	ldd	r25, Y+4	; 0x04
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <LM35_ReadTemperture+0x124>
    22e8:	9c 83       	std	Y+4, r25	; 0x04
    22ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	9e 83       	std	Y+6, r25	; 0x06
    22f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f6:	8d 81       	ldd	r24, Y+5	; 0x05
    22f8:	9e 81       	ldd	r25, Y+6	; 0x06
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	69 f7       	brne	.-38     	; 0x22d8 <LM35_ReadTemperture+0x118>
    22fe:	14 c0       	rjmp	.+40     	; 0x2328 <LM35_ReadTemperture+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2300:	6f 81       	ldd	r22, Y+7	; 0x07
    2302:	78 85       	ldd	r23, Y+8	; 0x08
    2304:	89 85       	ldd	r24, Y+9	; 0x09
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9e 83       	std	Y+6, r25	; 0x06
    2312:	8d 83       	std	Y+5, r24	; 0x05
    2314:	8d 81       	ldd	r24, Y+5	; 0x05
    2316:	9e 81       	ldd	r25, Y+6	; 0x06
    2318:	9a 83       	std	Y+2, r25	; 0x02
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	9a 81       	ldd	r25, Y+2	; 0x02
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <LM35_ReadTemperture+0x160>
    2324:	9a 83       	std	Y+2, r25	; 0x02
    2326:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
}
    2328:	61 96       	adiw	r28, 0x11	; 17
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret

0000233a <Current_SensorReader>:

void Current_SensorReader(u8 ADC_Channel ,u16 *ADC_Result)
{
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	61 97       	sbiw	r28, 0x11	; 17
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	8f 87       	std	Y+15, r24	; 0x0f
    2350:	79 8b       	std	Y+17, r23	; 0x11
    2352:	68 8b       	std	Y+16, r22	; 0x10
    ADC_Select_Channal(ADC_Channel);
    2354:	8f 85       	ldd	r24, Y+15	; 0x0f
    2356:	0e 94 dd 06 	call	0xdba	; 0xdba <ADC_Select_Channal>
    ADC_Enable();
    235a:	0e 94 c1 06 	call	0xd82	; 0xd82 <ADC_Enable>
    ADC_Start_Conversion();
    235e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <ADC_Start_Conversion>
    ADC_Wait_Flag();
    2362:	0e 94 f6 06 	call	0xdec	; 0xdec <ADC_Wait_Flag>
    ADC_Get_Result(ADC_Result);
    2366:	88 89       	ldd	r24, Y+16	; 0x10
    2368:	99 89       	ldd	r25, Y+17	; 0x11
    236a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_Get_Result>
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a0 ea       	ldi	r26, 0xA0	; 160
    2374:	b0 e4       	ldi	r27, 0x40	; 64
    2376:	8b 87       	std	Y+11, r24	; 0x0b
    2378:	9c 87       	std	Y+12, r25	; 0x0c
    237a:	ad 87       	std	Y+13, r26	; 0x0d
    237c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2380:	7c 85       	ldd	r23, Y+12	; 0x0c
    2382:	8d 85       	ldd	r24, Y+13	; 0x0d
    2384:	9e 85       	ldd	r25, Y+14	; 0x0e
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4a e7       	ldi	r20, 0x7A	; 122
    238c:	55 e4       	ldi	r21, 0x45	; 69
    238e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	8f 83       	std	Y+7, r24	; 0x07
    2398:	98 87       	std	Y+8, r25	; 0x08
    239a:	a9 87       	std	Y+9, r26	; 0x09
    239c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    239e:	6f 81       	ldd	r22, Y+7	; 0x07
    23a0:	78 85       	ldd	r23, Y+8	; 0x08
    23a2:	89 85       	ldd	r24, Y+9	; 0x09
    23a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e8       	ldi	r20, 0x80	; 128
    23ac:	5f e3       	ldi	r21, 0x3F	; 63
    23ae:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    23b2:	88 23       	and	r24, r24
    23b4:	2c f4       	brge	.+10     	; 0x23c0 <Current_SensorReader+0x86>
		__ticks = 1;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9e 83       	std	Y+6, r25	; 0x06
    23bc:	8d 83       	std	Y+5, r24	; 0x05
    23be:	3f c0       	rjmp	.+126    	; 0x243e <Current_SensorReader+0x104>
	else if (__tmp > 65535)
    23c0:	6f 81       	ldd	r22, Y+7	; 0x07
    23c2:	78 85       	ldd	r23, Y+8	; 0x08
    23c4:	89 85       	ldd	r24, Y+9	; 0x09
    23c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	3f ef       	ldi	r19, 0xFF	; 255
    23cc:	4f e7       	ldi	r20, 0x7F	; 127
    23ce:	57 e4       	ldi	r21, 0x47	; 71
    23d0:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    23d4:	18 16       	cp	r1, r24
    23d6:	4c f5       	brge	.+82     	; 0x242a <Current_SensorReader+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23da:	7c 85       	ldd	r23, Y+12	; 0x0c
    23dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23de:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e2       	ldi	r20, 0x20	; 32
    23e6:	51 e4       	ldi	r21, 0x41	; 65
    23e8:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	bc 01       	movw	r22, r24
    23f2:	cd 01       	movw	r24, r26
    23f4:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	0f c0       	rjmp	.+30     	; 0x2420 <Current_SensorReader+0xe6>
    2402:	80 e9       	ldi	r24, 0x90	; 144
    2404:	91 e0       	ldi	r25, 0x01	; 1
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	8b 83       	std	Y+3, r24	; 0x03
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	9c 81       	ldd	r25, Y+4	; 0x04
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <Current_SensorReader+0xd4>
    2412:	9c 83       	std	Y+4, r25	; 0x04
    2414:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	9e 83       	std	Y+6, r25	; 0x06
    241e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2420:	8d 81       	ldd	r24, Y+5	; 0x05
    2422:	9e 81       	ldd	r25, Y+6	; 0x06
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	69 f7       	brne	.-38     	; 0x2402 <Current_SensorReader+0xc8>
    2428:	14 c0       	rjmp	.+40     	; 0x2452 <Current_SensorReader+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242a:	6f 81       	ldd	r22, Y+7	; 0x07
    242c:	78 85       	ldd	r23, Y+8	; 0x08
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	9e 83       	std	Y+6, r25	; 0x06
    243c:	8d 83       	std	Y+5, r24	; 0x05
    243e:	8d 81       	ldd	r24, Y+5	; 0x05
    2440:	9e 81       	ldd	r25, Y+6	; 0x06
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <Current_SensorReader+0x110>
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
}
    2452:	61 96       	adiw	r28, 0x11	; 17
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <CreateList>:


u8 current_address = 0;

void CreateList(List* l)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	00 d0       	rcall	.+0      	; 0x246a <CreateList+0x6>
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	89 83       	std	Y+1, r24	; 0x01
	l->Head = NULL;
    2472:	e9 81       	ldd	r30, Y+1	; 0x01
    2474:	fa 81       	ldd	r31, Y+2	; 0x02
    2476:	11 82       	std	Z+1, r1	; 0x01
    2478:	10 82       	st	Z, r1
	l->size = 0;
    247a:	e9 81       	ldd	r30, Y+1	; 0x01
    247c:	fa 81       	ldd	r31, Y+2	; 0x02
    247e:	13 82       	std	Z+3, r1	; 0x03
    2480:	12 82       	std	Z+2, r1	; 0x02
}
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <AddNodeAtLast>:

void AddNodeAtLast(List* pl,u8* data, u8 SMSCALL)
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	2a 97       	sbiw	r28, 0x0a	; 10
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	9f 83       	std	Y+7, r25	; 0x07
    24a2:	8e 83       	std	Y+6, r24	; 0x06
    24a4:	79 87       	std	Y+9, r23	; 0x09
    24a6:	68 87       	std	Y+8, r22	; 0x08
    24a8:	4a 87       	std	Y+10, r20	; 0x0a
	//Allocate Node at memory and return its pointer to pn.
	Node* pn = (Node*)malloc(sizeof(Node));
    24aa:	8f e0       	ldi	r24, 0x0F	; 15
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	0e 94 ef 22 	call	0x45de	; 0x45de <malloc>
    24b2:	9d 83       	std	Y+5, r25	; 0x05
    24b4:	8c 83       	std	Y+4, r24	; 0x04
	//assin data to pointer
	for(u8 i = 0;i<11;i++)
    24b6:	1b 82       	std	Y+3, r1	; 0x03
    24b8:	15 c0       	rjmp	.+42     	; 0x24e4 <AddNodeAtLast+0x58>
	{
		pn->value[i] = data[i];
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	48 2f       	mov	r20, r24
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	28 2f       	mov	r18, r24
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	88 85       	ldd	r24, Y+8	; 0x08
    24c8:	99 85       	ldd	r25, Y+9	; 0x09
    24ca:	fc 01       	movw	r30, r24
    24cc:	e2 0f       	add	r30, r18
    24ce:	f3 1f       	adc	r31, r19
    24d0:	20 81       	ld	r18, Z
    24d2:	8c 81       	ldd	r24, Y+4	; 0x04
    24d4:	9d 81       	ldd	r25, Y+5	; 0x05
    24d6:	fc 01       	movw	r30, r24
    24d8:	e4 0f       	add	r30, r20
    24da:	f5 1f       	adc	r31, r21
    24dc:	20 83       	st	Z, r18
void AddNodeAtLast(List* pl,u8* data, u8 SMSCALL)
{
	//Allocate Node at memory and return its pointer to pn.
	Node* pn = (Node*)malloc(sizeof(Node));
	//assin data to pointer
	for(u8 i = 0;i<11;i++)
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	8f 5f       	subi	r24, 0xFF	; 255
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	8b 30       	cpi	r24, 0x0B	; 11
    24e8:	40 f3       	brcs	.-48     	; 0x24ba <AddNodeAtLast+0x2e>
	{
		pn->value[i] = data[i];
	}
	pn->value[11] = '\0';
    24ea:	ec 81       	ldd	r30, Y+4	; 0x04
    24ec:	fd 81       	ldd	r31, Y+5	; 0x05
    24ee:	13 86       	std	Z+11, r1	; 0x0b
	pn->SMSCALL = SMSCALL;
    24f0:	ec 81       	ldd	r30, Y+4	; 0x04
    24f2:	fd 81       	ldd	r31, Y+5	; 0x05
    24f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24f6:	84 87       	std	Z+12, r24	; 0x0c
	pn->Next = NULL;
    24f8:	ec 81       	ldd	r30, Y+4	; 0x04
    24fa:	fd 81       	ldd	r31, Y+5	; 0x05
    24fc:	16 86       	std	Z+14, r1	; 0x0e
    24fe:	15 86       	std	Z+13, r1	; 0x0d

	if(pl->Head == NULL)
    2500:	ee 81       	ldd	r30, Y+6	; 0x06
    2502:	ff 81       	ldd	r31, Y+7	; 0x07
    2504:	80 81       	ld	r24, Z
    2506:	91 81       	ldd	r25, Z+1	; 0x01
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	39 f4       	brne	.+14     	; 0x251a <AddNodeAtLast+0x8e>
	{
		pl->Head = pn;
    250c:	ee 81       	ldd	r30, Y+6	; 0x06
    250e:	ff 81       	ldd	r31, Y+7	; 0x07
    2510:	8c 81       	ldd	r24, Y+4	; 0x04
    2512:	9d 81       	ldd	r25, Y+5	; 0x05
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	80 83       	st	Z, r24
    2518:	19 c0       	rjmp	.+50     	; 0x254c <AddNodeAtLast+0xc0>
	}
	else
	{
		Node* current;
		current = pl->Head;
    251a:	ee 81       	ldd	r30, Y+6	; 0x06
    251c:	ff 81       	ldd	r31, Y+7	; 0x07
    251e:	80 81       	ld	r24, Z
    2520:	91 81       	ldd	r25, Z+1	; 0x01
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	06 c0       	rjmp	.+12     	; 0x2534 <AddNodeAtLast+0xa8>
		while(current->Next != NULL)
		{
			current = current->Next;
    2528:	e9 81       	ldd	r30, Y+1	; 0x01
    252a:	fa 81       	ldd	r31, Y+2	; 0x02
    252c:	85 85       	ldd	r24, Z+13	; 0x0d
    252e:	96 85       	ldd	r25, Z+14	; 0x0e
    2530:	9a 83       	std	Y+2, r25	; 0x02
    2532:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		Node* current;
		current = pl->Head;
		while(current->Next != NULL)
    2534:	e9 81       	ldd	r30, Y+1	; 0x01
    2536:	fa 81       	ldd	r31, Y+2	; 0x02
    2538:	85 85       	ldd	r24, Z+13	; 0x0d
    253a:	96 85       	ldd	r25, Z+14	; 0x0e
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	a1 f7       	brne	.-24     	; 0x2528 <AddNodeAtLast+0x9c>
		{
			current = current->Next;
		}
		current->Next = pn;
    2540:	e9 81       	ldd	r30, Y+1	; 0x01
    2542:	fa 81       	ldd	r31, Y+2	; 0x02
    2544:	8c 81       	ldd	r24, Y+4	; 0x04
    2546:	9d 81       	ldd	r25, Y+5	; 0x05
    2548:	96 87       	std	Z+14, r25	; 0x0e
    254a:	85 87       	std	Z+13, r24	; 0x0d
	}
	pl->size++;
    254c:	ee 81       	ldd	r30, Y+6	; 0x06
    254e:	ff 81       	ldd	r31, Y+7	; 0x07
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	01 96       	adiw	r24, 0x01	; 1
    2556:	ee 81       	ldd	r30, Y+6	; 0x06
    2558:	ff 81       	ldd	r31, Y+7	; 0x07
    255a:	93 83       	std	Z+3, r25	; 0x03
    255c:	82 83       	std	Z+2, r24	; 0x02
}
    255e:	2a 96       	adiw	r28, 0x0a	; 10
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	cd bf       	out	0x3d, r28	; 61
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <PrintList>:

void PrintList(List* pl,u32 Calling_address,u32 SMS_address)
{
    2570:	0f 93       	push	r16
    2572:	1f 93       	push	r17
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	2f 97       	sbiw	r28, 0x0f	; 15
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	9f 83       	std	Y+7, r25	; 0x07
    258a:	8e 83       	std	Y+6, r24	; 0x06
    258c:	48 87       	std	Y+8, r20	; 0x08
    258e:	59 87       	std	Y+9, r21	; 0x09
    2590:	6a 87       	std	Y+10, r22	; 0x0a
    2592:	7b 87       	std	Y+11, r23	; 0x0b
    2594:	0c 87       	std	Y+12, r16	; 0x0c
    2596:	1d 87       	std	Y+13, r17	; 0x0d
    2598:	2e 87       	std	Y+14, r18	; 0x0e
    259a:	3f 87       	std	Y+15, r19	; 0x0f
	u8 size = pl->size;
    259c:	ee 81       	ldd	r30, Y+6	; 0x06
    259e:	ff 81       	ldd	r31, Y+7	; 0x07
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	8d 83       	std	Y+5, r24	; 0x05
	Node* current;
	current = pl->Head;
    25a6:	ee 81       	ldd	r30, Y+6	; 0x06
    25a8:	ff 81       	ldd	r31, Y+7	; 0x07
    25aa:	80 81       	ld	r24, Z
    25ac:	91 81       	ldd	r25, Z+1	; 0x01
    25ae:	9c 83       	std	Y+4, r25	; 0x04
    25b0:	8b 83       	std	Y+3, r24	; 0x03
	u8 call_n = 0;
    25b2:	1a 82       	std	Y+2, r1	; 0x02
	u8 sms_n  = 0;
    25b4:	19 82       	std	Y+1, r1	; 0x01
	if(current == NULL)
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <PrintList+0x50>
    25be:	57 c0       	rjmp	.+174    	; 0x266e <PrintList+0xfe>
    25c0:	52 c0       	rjmp	.+164    	; 0x2666 <PrintList+0xf6>
	}
	else
	{
		while(size)
		{
			if(current->SMSCALL == 1)
    25c2:	eb 81       	ldd	r30, Y+3	; 0x03
    25c4:	fc 81       	ldd	r31, Y+4	; 0x04
    25c6:	84 85       	ldd	r24, Z+12	; 0x0c
    25c8:	81 30       	cpi	r24, 0x01	; 1
    25ca:	01 f5       	brne	.+64     	; 0x260c <PrintList+0x9c>
			{
				LCD_SendString(Calling_address + (128*call_n) , current->value);
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	88 2f       	mov	r24, r24
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	96 95       	lsr	r25
    25d4:	98 2f       	mov	r25, r24
    25d6:	88 27       	eor	r24, r24
    25d8:	97 95       	ror	r25
    25da:	87 95       	ror	r24
    25dc:	9c 01       	movw	r18, r24
    25de:	44 27       	eor	r20, r20
    25e0:	37 fd       	sbrc	r19, 7
    25e2:	40 95       	com	r20
    25e4:	54 2f       	mov	r21, r20
    25e6:	88 85       	ldd	r24, Y+8	; 0x08
    25e8:	99 85       	ldd	r25, Y+9	; 0x09
    25ea:	aa 85       	ldd	r26, Y+10	; 0x0a
    25ec:	bb 85       	ldd	r27, Y+11	; 0x0b
    25ee:	82 0f       	add	r24, r18
    25f0:	93 1f       	adc	r25, r19
    25f2:	a4 1f       	adc	r26, r20
    25f4:	b5 1f       	adc	r27, r21
    25f6:	2b 81       	ldd	r18, Y+3	; 0x03
    25f8:	3c 81       	ldd	r19, Y+4	; 0x04
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	a9 01       	movw	r20, r18
    2600:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <LCD_SendString>
				call_n++;
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	8f 5f       	subi	r24, 0xFF	; 255
    2608:	8a 83       	std	Y+2, r24	; 0x02
    260a:	24 c0       	rjmp	.+72     	; 0x2654 <PrintList+0xe4>
			}
			else if(current->SMSCALL == 2)
    260c:	eb 81       	ldd	r30, Y+3	; 0x03
    260e:	fc 81       	ldd	r31, Y+4	; 0x04
    2610:	84 85       	ldd	r24, Z+12	; 0x0c
    2612:	82 30       	cpi	r24, 0x02	; 2
    2614:	f9 f4       	brne	.+62     	; 0x2654 <PrintList+0xe4>
			{
				LCD_SendString(SMS_address + (128*sms_n) , current->value);
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	88 2f       	mov	r24, r24
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	96 95       	lsr	r25
    261e:	98 2f       	mov	r25, r24
    2620:	88 27       	eor	r24, r24
    2622:	97 95       	ror	r25
    2624:	87 95       	ror	r24
    2626:	9c 01       	movw	r18, r24
    2628:	44 27       	eor	r20, r20
    262a:	37 fd       	sbrc	r19, 7
    262c:	40 95       	com	r20
    262e:	54 2f       	mov	r21, r20
    2630:	8c 85       	ldd	r24, Y+12	; 0x0c
    2632:	9d 85       	ldd	r25, Y+13	; 0x0d
    2634:	ae 85       	ldd	r26, Y+14	; 0x0e
    2636:	bf 85       	ldd	r27, Y+15	; 0x0f
    2638:	82 0f       	add	r24, r18
    263a:	93 1f       	adc	r25, r19
    263c:	a4 1f       	adc	r26, r20
    263e:	b5 1f       	adc	r27, r21
    2640:	2b 81       	ldd	r18, Y+3	; 0x03
    2642:	3c 81       	ldd	r19, Y+4	; 0x04
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	a9 01       	movw	r20, r18
    264a:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <LCD_SendString>
				sms_n++;
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	8f 5f       	subi	r24, 0xFF	; 255
    2652:	89 83       	std	Y+1, r24	; 0x01
			}
			current = current->Next;
    2654:	eb 81       	ldd	r30, Y+3	; 0x03
    2656:	fc 81       	ldd	r31, Y+4	; 0x04
    2658:	85 85       	ldd	r24, Z+13	; 0x0d
    265a:	96 85       	ldd	r25, Z+14	; 0x0e
    265c:	9c 83       	std	Y+4, r25	; 0x04
    265e:	8b 83       	std	Y+3, r24	; 0x03
			size--;
    2660:	8d 81       	ldd	r24, Y+5	; 0x05
    2662:	81 50       	subi	r24, 0x01	; 1
    2664:	8d 83       	std	Y+5, r24	; 0x05
	{
		//UART_SendStringSync("\n List Is Empty!\n\n");
	}
	else
	{
		while(size)
    2666:	8d 81       	ldd	r24, Y+5	; 0x05
    2668:	88 23       	and	r24, r24
    266a:	09 f0       	breq	.+2      	; 0x266e <PrintList+0xfe>
    266c:	aa cf       	rjmp	.-172    	; 0x25c2 <PrintList+0x52>
			current = current->Next;
			size--;
		}
	}

}
    266e:	2f 96       	adiw	r28, 0x0f	; 15
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	08 95       	ret

00002684 <Delete>:

void Delete(u8* Data,List* pl)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	e2 97       	sbiw	r28, 0x32	; 50
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
    2698:	98 ab       	std	Y+48, r25	; 0x30
    269a:	8f a7       	std	Y+47, r24	; 0x2f
    269c:	7a ab       	std	Y+50, r23	; 0x32
    269e:	69 ab       	std	Y+49, r22	; 0x31
	u8 Data_copy_search[12];
	u8 Data_copy_head[12];

	u8 exist = 0;
    26a0:	1b 86       	std	Y+11, r1	; 0x0b
	u8 flag = 0;
    26a2:	1a 86       	std	Y+10, r1	; 0x0a
	Node *pn,*qn;
	pn = pl->Head;
    26a4:	e9 a9       	ldd	r30, Y+49	; 0x31
    26a6:	fa a9       	ldd	r31, Y+50	; 0x32
    26a8:	80 81       	ld	r24, Z
    26aa:	91 81       	ldd	r25, Z+1	; 0x01
    26ac:	99 87       	std	Y+9, r25	; 0x09
    26ae:	88 87       	std	Y+8, r24	; 0x08
	qn = pl->Head;
    26b0:	e9 a9       	ldd	r30, Y+49	; 0x31
    26b2:	fa a9       	ldd	r31, Y+50	; 0x32
    26b4:	80 81       	ld	r24, Z
    26b6:	91 81       	ldd	r25, Z+1	; 0x01
    26b8:	9f 83       	std	Y+7, r25	; 0x07
    26ba:	8e 83       	std	Y+6, r24	; 0x06

	for(u8 i =0;i<11;i++)
    26bc:	1d 82       	std	Y+5, r1	; 0x05
    26be:	15 c0       	rjmp	.+42     	; 0x26ea <Delete+0x66>
		Data_copy_search[i]=Data[i];
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	48 2f       	mov	r20, r24
    26c4:	50 e0       	ldi	r21, 0x00	; 0
    26c6:	8d 81       	ldd	r24, Y+5	; 0x05
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ce:	98 a9       	ldd	r25, Y+48	; 0x30
    26d0:	fc 01       	movw	r30, r24
    26d2:	e2 0f       	add	r30, r18
    26d4:	f3 1f       	adc	r31, r19
    26d6:	20 81       	ld	r18, Z
    26d8:	ce 01       	movw	r24, r28
    26da:	0c 96       	adiw	r24, 0x0c	; 12
    26dc:	fc 01       	movw	r30, r24
    26de:	e4 0f       	add	r30, r20
    26e0:	f5 1f       	adc	r31, r21
    26e2:	20 83       	st	Z, r18
	u8 flag = 0;
	Node *pn,*qn;
	pn = pl->Head;
	qn = pl->Head;

	for(u8 i =0;i<11;i++)
    26e4:	8d 81       	ldd	r24, Y+5	; 0x05
    26e6:	8f 5f       	subi	r24, 0xFF	; 255
    26e8:	8d 83       	std	Y+5, r24	; 0x05
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	8b 30       	cpi	r24, 0x0B	; 11
    26ee:	40 f3       	brcs	.-48     	; 0x26c0 <Delete+0x3c>
		Data_copy_search[i]=Data[i];

	for(u8 i =0;i<11;i++)
    26f0:	1c 82       	std	Y+4, r1	; 0x04
    26f2:	17 c0       	rjmp	.+46     	; 0x2722 <Delete+0x9e>
		Data_copy_head[i]=pl->Head->value[i];
    26f4:	8c 81       	ldd	r24, Y+4	; 0x04
    26f6:	48 2f       	mov	r20, r24
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	e9 a9       	ldd	r30, Y+49	; 0x31
    26fc:	fa a9       	ldd	r31, Y+50	; 0x32
    26fe:	20 81       	ld	r18, Z
    2700:	31 81       	ldd	r19, Z+1	; 0x01
    2702:	8c 81       	ldd	r24, Y+4	; 0x04
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	f9 01       	movw	r30, r18
    270a:	e8 0f       	add	r30, r24
    270c:	f9 1f       	adc	r31, r25
    270e:	20 81       	ld	r18, Z
    2710:	ce 01       	movw	r24, r28
    2712:	48 96       	adiw	r24, 0x18	; 24
    2714:	fc 01       	movw	r30, r24
    2716:	e4 0f       	add	r30, r20
    2718:	f5 1f       	adc	r31, r21
    271a:	20 83       	st	Z, r18
	qn = pl->Head;

	for(u8 i =0;i<11;i++)
		Data_copy_search[i]=Data[i];

	for(u8 i =0;i<11;i++)
    271c:	8c 81       	ldd	r24, Y+4	; 0x04
    271e:	8f 5f       	subi	r24, 0xFF	; 255
    2720:	8c 83       	std	Y+4, r24	; 0x04
    2722:	8c 81       	ldd	r24, Y+4	; 0x04
    2724:	8b 30       	cpi	r24, 0x0B	; 11
    2726:	30 f3       	brcs	.-52     	; 0x26f4 <Delete+0x70>
		Data_copy_head[i]=pl->Head->value[i];

	for(u8 i=0;i<11;i++)
    2728:	1b 82       	std	Y+3, r1	; 0x03
    272a:	1c c0       	rjmp	.+56     	; 0x2764 <Delete+0xe0>
	{
	    if(Data_copy_search[i]==Data_copy_head[i])
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	ce 01       	movw	r24, r28
    2734:	0c 96       	adiw	r24, 0x0c	; 12
    2736:	fc 01       	movw	r30, r24
    2738:	e2 0f       	add	r30, r18
    273a:	f3 1f       	adc	r31, r19
    273c:	40 81       	ld	r20, Z
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	ce 01       	movw	r24, r28
    2746:	48 96       	adiw	r24, 0x18	; 24
    2748:	fc 01       	movw	r30, r24
    274a:	e2 0f       	add	r30, r18
    274c:	f3 1f       	adc	r31, r19
    274e:	80 81       	ld	r24, Z
    2750:	48 17       	cp	r20, r24
    2752:	29 f4       	brne	.+10     	; 0x275e <Delete+0xda>
	         flag=0;
    2754:	1a 86       	std	Y+10, r1	; 0x0a
		Data_copy_search[i]=Data[i];

	for(u8 i =0;i<11;i++)
		Data_copy_head[i]=pl->Head->value[i];

	for(u8 i=0;i<11;i++)
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	8f 5f       	subi	r24, 0xFF	; 255
    275a:	8b 83       	std	Y+3, r24	; 0x03
    275c:	03 c0       	rjmp	.+6      	; 0x2764 <Delete+0xe0>
	{
	    if(Data_copy_search[i]==Data_copy_head[i])
	         flag=0;
	    else {flag=1; break;}
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	8a 87       	std	Y+10, r24	; 0x0a
    2762:	03 c0       	rjmp	.+6      	; 0x276a <Delete+0xe6>
		Data_copy_search[i]=Data[i];

	for(u8 i =0;i<11;i++)
		Data_copy_head[i]=pl->Head->value[i];

	for(u8 i=0;i<11;i++)
    2764:	8b 81       	ldd	r24, Y+3	; 0x03
    2766:	8b 30       	cpi	r24, 0x0B	; 11
    2768:	08 f3       	brcs	.-62     	; 0x272c <Delete+0xa8>
	{
	    if(Data_copy_search[i]==Data_copy_head[i])
	         flag=0;
	    else {flag=1; break;}
	}
	if(!flag)
    276a:	8a 85       	ldd	r24, Y+10	; 0x0a
    276c:	88 23       	and	r24, r24
    276e:	09 f0       	breq	.+2      	; 0x2772 <Delete+0xee>
    2770:	78 c0       	rjmp	.+240    	; 0x2862 <Delete+0x1de>
	{
		exist = 1;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	8b 87       	std	Y+11, r24	; 0x0b
		pl->Head = pn->Next;
    2776:	e8 85       	ldd	r30, Y+8	; 0x08
    2778:	f9 85       	ldd	r31, Y+9	; 0x09
    277a:	85 85       	ldd	r24, Z+13	; 0x0d
    277c:	96 85       	ldd	r25, Z+14	; 0x0e
    277e:	e9 a9       	ldd	r30, Y+49	; 0x31
    2780:	fa a9       	ldd	r31, Y+50	; 0x32
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	80 83       	st	Z, r24
		free(pn);
    2786:	88 85       	ldd	r24, Y+8	; 0x08
    2788:	99 85       	ldd	r25, Y+9	; 0x09
    278a:	0e 94 9c 23 	call	0x4738	; 0x4738 <free>
		pl->size--;
    278e:	e9 a9       	ldd	r30, Y+49	; 0x31
    2790:	fa a9       	ldd	r31, Y+50	; 0x32
    2792:	82 81       	ldd	r24, Z+2	; 0x02
    2794:	93 81       	ldd	r25, Z+3	; 0x03
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	e9 a9       	ldd	r30, Y+49	; 0x31
    279a:	fa a9       	ldd	r31, Y+50	; 0x32
    279c:	93 83       	std	Z+3, r25	; 0x03
    279e:	82 83       	std	Z+2, r24	; 0x02
    27a0:	60 c0       	rjmp	.+192    	; 0x2862 <Delete+0x1de>


	while(pn != NULL && exist != 1)
	{
		u8 Data_copy2[11];
		for(u8 i =0;i<11;i++)
    27a2:	1a 82       	std	Y+2, r1	; 0x02
    27a4:	15 c0       	rjmp	.+42     	; 0x27d0 <Delete+0x14c>
			Data_copy2[i]=pn->value[i];
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	48 2f       	mov	r20, r24
    27aa:	50 e0       	ldi	r21, 0x00	; 0
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	88 85       	ldd	r24, Y+8	; 0x08
    27b4:	99 85       	ldd	r25, Y+9	; 0x09
    27b6:	fc 01       	movw	r30, r24
    27b8:	e2 0f       	add	r30, r18
    27ba:	f3 1f       	adc	r31, r19
    27bc:	20 81       	ld	r18, Z
    27be:	ce 01       	movw	r24, r28
    27c0:	84 96       	adiw	r24, 0x24	; 36
    27c2:	fc 01       	movw	r30, r24
    27c4:	e4 0f       	add	r30, r20
    27c6:	f5 1f       	adc	r31, r21
    27c8:	20 83       	st	Z, r18


	while(pn != NULL && exist != 1)
	{
		u8 Data_copy2[11];
		for(u8 i =0;i<11;i++)
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	8f 5f       	subi	r24, 0xFF	; 255
    27ce:	8a 83       	std	Y+2, r24	; 0x02
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	8b 30       	cpi	r24, 0x0B	; 11
    27d4:	40 f3       	brcs	.-48     	; 0x27a6 <Delete+0x122>
			Data_copy2[i]=pn->value[i];

		for(u8 i=0;i<11;i++)
    27d6:	19 82       	std	Y+1, r1	; 0x01
    27d8:	1c c0       	rjmp	.+56     	; 0x2812 <Delete+0x18e>
		{
		    if(Data_copy_search[i]==Data_copy2[i])
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	28 2f       	mov	r18, r24
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	ce 01       	movw	r24, r28
    27e2:	0c 96       	adiw	r24, 0x0c	; 12
    27e4:	fc 01       	movw	r30, r24
    27e6:	e2 0f       	add	r30, r18
    27e8:	f3 1f       	adc	r31, r19
    27ea:	40 81       	ld	r20, Z
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	28 2f       	mov	r18, r24
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	ce 01       	movw	r24, r28
    27f4:	84 96       	adiw	r24, 0x24	; 36
    27f6:	fc 01       	movw	r30, r24
    27f8:	e2 0f       	add	r30, r18
    27fa:	f3 1f       	adc	r31, r19
    27fc:	80 81       	ld	r24, Z
    27fe:	48 17       	cp	r20, r24
    2800:	29 f4       	brne	.+10     	; 0x280c <Delete+0x188>
		         flag=0;
    2802:	1a 86       	std	Y+10, r1	; 0x0a
	{
		u8 Data_copy2[11];
		for(u8 i =0;i<11;i++)
			Data_copy2[i]=pn->value[i];

		for(u8 i=0;i<11;i++)
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	8f 5f       	subi	r24, 0xFF	; 255
    2808:	89 83       	std	Y+1, r24	; 0x01
    280a:	03 c0       	rjmp	.+6      	; 0x2812 <Delete+0x18e>
		{
		    if(Data_copy_search[i]==Data_copy2[i])
		         flag=0;
		    else {flag=1; break;}
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	8a 87       	std	Y+10, r24	; 0x0a
    2810:	03 c0       	rjmp	.+6      	; 0x2818 <Delete+0x194>
	{
		u8 Data_copy2[11];
		for(u8 i =0;i<11;i++)
			Data_copy2[i]=pn->value[i];

		for(u8 i=0;i<11;i++)
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	8b 30       	cpi	r24, 0x0B	; 11
    2816:	08 f3       	brcs	.-62     	; 0x27da <Delete+0x156>
		    if(Data_copy_search[i]==Data_copy2[i])
		         flag=0;
		    else {flag=1; break;}
		}

		if(!flag)
    2818:	8a 85       	ldd	r24, Y+10	; 0x0a
    281a:	88 23       	and	r24, r24
    281c:	c1 f4       	brne	.+48     	; 0x284e <Delete+0x1ca>
		{
			exist = 1;
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	8b 87       	std	Y+11, r24	; 0x0b
			qn->Next = pn->Next;
    2822:	e8 85       	ldd	r30, Y+8	; 0x08
    2824:	f9 85       	ldd	r31, Y+9	; 0x09
    2826:	85 85       	ldd	r24, Z+13	; 0x0d
    2828:	96 85       	ldd	r25, Z+14	; 0x0e
    282a:	ee 81       	ldd	r30, Y+6	; 0x06
    282c:	ff 81       	ldd	r31, Y+7	; 0x07
    282e:	96 87       	std	Z+14, r25	; 0x0e
    2830:	85 87       	std	Z+13, r24	; 0x0d
			free(pn);
    2832:	88 85       	ldd	r24, Y+8	; 0x08
    2834:	99 85       	ldd	r25, Y+9	; 0x09
    2836:	0e 94 9c 23 	call	0x4738	; 0x4738 <free>
			pl->size--;
    283a:	e9 a9       	ldd	r30, Y+49	; 0x31
    283c:	fa a9       	ldd	r31, Y+50	; 0x32
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	e9 a9       	ldd	r30, Y+49	; 0x31
    2846:	fa a9       	ldd	r31, Y+50	; 0x32
    2848:	93 83       	std	Z+3, r25	; 0x03
    284a:	82 83       	std	Z+2, r24	; 0x02
    284c:	12 c0       	rjmp	.+36     	; 0x2872 <Delete+0x1ee>
			break;
		}
		qn = pn;
    284e:	88 85       	ldd	r24, Y+8	; 0x08
    2850:	99 85       	ldd	r25, Y+9	; 0x09
    2852:	9f 83       	std	Y+7, r25	; 0x07
    2854:	8e 83       	std	Y+6, r24	; 0x06
		pn = pn->Next;
    2856:	e8 85       	ldd	r30, Y+8	; 0x08
    2858:	f9 85       	ldd	r31, Y+9	; 0x09
    285a:	85 85       	ldd	r24, Z+13	; 0x0d
    285c:	96 85       	ldd	r25, Z+14	; 0x0e
    285e:	99 87       	std	Y+9, r25	; 0x09
    2860:	88 87       	std	Y+8, r24	; 0x08
	{
		//UART_SendStringSync("\n List Is Empty!\n\n");
	}


	while(pn != NULL && exist != 1)
    2862:	88 85       	ldd	r24, Y+8	; 0x08
    2864:	99 85       	ldd	r25, Y+9	; 0x09
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	21 f0       	breq	.+8      	; 0x2872 <Delete+0x1ee>
    286a:	8b 85       	ldd	r24, Y+11	; 0x0b
    286c:	81 30       	cpi	r24, 0x01	; 1
    286e:	09 f0       	breq	.+2      	; 0x2872 <Delete+0x1ee>
    2870:	98 cf       	rjmp	.-208    	; 0x27a2 <Delete+0x11e>
			break;
		}
		qn = pn;
		pn = pn->Next;
	}
}
    2872:	e2 96       	adiw	r28, 0x32	; 50
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <RetrieveElement>:

void RetrieveElement(u8* pe,const u8* Data,List* pl)
{
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	a8 97       	sbiw	r28, 0x28	; 40
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	9c a3       	std	Y+36, r25	; 0x24
    289a:	8b a3       	std	Y+35, r24	; 0x23
    289c:	7e a3       	std	Y+38, r23	; 0x26
    289e:	6d a3       	std	Y+37, r22	; 0x25
    28a0:	58 a7       	std	Y+40, r21	; 0x28
    28a2:	4f a3       	std	Y+39, r20	; 0x27
	u8 copy_data[11];
	u8 copy_head[11];
	Node* pn = pl->Head;
    28a4:	ef a1       	ldd	r30, Y+39	; 0x27
    28a6:	f8 a5       	ldd	r31, Y+40	; 0x28
    28a8:	80 81       	ld	r24, Z
    28aa:	91 81       	ldd	r25, Z+1	; 0x01
    28ac:	9c 87       	std	Y+12, r25	; 0x0c
    28ae:	8b 87       	std	Y+11, r24	; 0x0b
	u8 *ptr;
	u8 exist = 0;
    28b0:	18 86       	std	Y+8, r1	; 0x08
	u8 flag = 0;
    28b2:	1f 82       	std	Y+7, r1	; 0x07
	for(u8 i = 0; i<11 ; i++)
    28b4:	1e 82       	std	Y+6, r1	; 0x06
    28b6:	27 c0       	rjmp	.+78     	; 0x2906 <RetrieveElement+0x82>
	{
		copy_data[i] = Data[i];
    28b8:	8e 81       	ldd	r24, Y+6	; 0x06
    28ba:	48 2f       	mov	r20, r24
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	8e 81       	ldd	r24, Y+6	; 0x06
    28c0:	28 2f       	mov	r18, r24
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	8d a1       	ldd	r24, Y+37	; 0x25
    28c6:	9e a1       	ldd	r25, Y+38	; 0x26
    28c8:	fc 01       	movw	r30, r24
    28ca:	e2 0f       	add	r30, r18
    28cc:	f3 1f       	adc	r31, r19
    28ce:	20 81       	ld	r18, Z
    28d0:	ce 01       	movw	r24, r28
    28d2:	0d 96       	adiw	r24, 0x0d	; 13
    28d4:	fc 01       	movw	r30, r24
    28d6:	e4 0f       	add	r30, r20
    28d8:	f5 1f       	adc	r31, r21
    28da:	20 83       	st	Z, r18
		copy_head[i] = pn->value[i];
    28dc:	8e 81       	ldd	r24, Y+6	; 0x06
    28de:	48 2f       	mov	r20, r24
    28e0:	50 e0       	ldi	r21, 0x00	; 0
    28e2:	8e 81       	ldd	r24, Y+6	; 0x06
    28e4:	28 2f       	mov	r18, r24
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    28ec:	fc 01       	movw	r30, r24
    28ee:	e2 0f       	add	r30, r18
    28f0:	f3 1f       	adc	r31, r19
    28f2:	20 81       	ld	r18, Z
    28f4:	ce 01       	movw	r24, r28
    28f6:	48 96       	adiw	r24, 0x18	; 24
    28f8:	fc 01       	movw	r30, r24
    28fa:	e4 0f       	add	r30, r20
    28fc:	f5 1f       	adc	r31, r21
    28fe:	20 83       	st	Z, r18
	u8 copy_head[11];
	Node* pn = pl->Head;
	u8 *ptr;
	u8 exist = 0;
	u8 flag = 0;
	for(u8 i = 0; i<11 ; i++)
    2900:	8e 81       	ldd	r24, Y+6	; 0x06
    2902:	8f 5f       	subi	r24, 0xFF	; 255
    2904:	8e 83       	std	Y+6, r24	; 0x06
    2906:	8e 81       	ldd	r24, Y+6	; 0x06
    2908:	8b 30       	cpi	r24, 0x0B	; 11
    290a:	b0 f2       	brcs	.-84     	; 0x28b8 <RetrieveElement+0x34>
	{
		copy_data[i] = Data[i];
		copy_head[i] = pn->value[i];
	}

	for(u8 i=0;i<11;i++)
    290c:	1d 82       	std	Y+5, r1	; 0x05
    290e:	1c c0       	rjmp	.+56     	; 0x2948 <RetrieveElement+0xc4>
	{
	    if(copy_data[i]==copy_head[i])
    2910:	8d 81       	ldd	r24, Y+5	; 0x05
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	ce 01       	movw	r24, r28
    2918:	0d 96       	adiw	r24, 0x0d	; 13
    291a:	fc 01       	movw	r30, r24
    291c:	e2 0f       	add	r30, r18
    291e:	f3 1f       	adc	r31, r19
    2920:	40 81       	ld	r20, Z
    2922:	8d 81       	ldd	r24, Y+5	; 0x05
    2924:	28 2f       	mov	r18, r24
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	ce 01       	movw	r24, r28
    292a:	48 96       	adiw	r24, 0x18	; 24
    292c:	fc 01       	movw	r30, r24
    292e:	e2 0f       	add	r30, r18
    2930:	f3 1f       	adc	r31, r19
    2932:	80 81       	ld	r24, Z
    2934:	48 17       	cp	r20, r24
    2936:	29 f4       	brne	.+10     	; 0x2942 <RetrieveElement+0xbe>
	         flag=0;
    2938:	1f 82       	std	Y+7, r1	; 0x07
	{
		copy_data[i] = Data[i];
		copy_head[i] = pn->value[i];
	}

	for(u8 i=0;i<11;i++)
    293a:	8d 81       	ldd	r24, Y+5	; 0x05
    293c:	8f 5f       	subi	r24, 0xFF	; 255
    293e:	8d 83       	std	Y+5, r24	; 0x05
    2940:	03 c0       	rjmp	.+6      	; 0x2948 <RetrieveElement+0xc4>
	{
	    if(copy_data[i]==copy_head[i])
	         flag=0;
	    else {flag=1; break;}
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	8f 83       	std	Y+7, r24	; 0x07
    2946:	03 c0       	rjmp	.+6      	; 0x294e <RetrieveElement+0xca>
	{
		copy_data[i] = Data[i];
		copy_head[i] = pn->value[i];
	}

	for(u8 i=0;i<11;i++)
    2948:	8d 81       	ldd	r24, Y+5	; 0x05
    294a:	8b 30       	cpi	r24, 0x0B	; 11
    294c:	08 f3       	brcs	.-62     	; 0x2910 <RetrieveElement+0x8c>
	    if(copy_data[i]==copy_head[i])
	         flag=0;
	    else {flag=1; break;}
	}

	if(!flag)
    294e:	8f 81       	ldd	r24, Y+7	; 0x07
    2950:	88 23       	and	r24, r24
    2952:	09 f0       	breq	.+2      	; 0x2956 <RetrieveElement+0xd2>
    2954:	7e c0       	rjmp	.+252    	; 0x2a52 <RetrieveElement+0x1ce>
	{
		exist = 1;
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	88 87       	std	Y+8, r24	; 0x08
		for(u8 i =0;i<11;i++)
    295a:	1c 82       	std	Y+4, r1	; 0x04
    295c:	15 c0       	rjmp	.+42     	; 0x2988 <RetrieveElement+0x104>
		{
			pe[i] = pn->value[i];
    295e:	8c 81       	ldd	r24, Y+4	; 0x04
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	8b a1       	ldd	r24, Y+35	; 0x23
    2966:	9c a1       	ldd	r25, Y+36	; 0x24
    2968:	dc 01       	movw	r26, r24
    296a:	a2 0f       	add	r26, r18
    296c:	b3 1f       	adc	r27, r19
    296e:	8c 81       	ldd	r24, Y+4	; 0x04
    2970:	28 2f       	mov	r18, r24
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	8b 85       	ldd	r24, Y+11	; 0x0b
    2976:	9c 85       	ldd	r25, Y+12	; 0x0c
    2978:	fc 01       	movw	r30, r24
    297a:	e2 0f       	add	r30, r18
    297c:	f3 1f       	adc	r31, r19
    297e:	80 81       	ld	r24, Z
    2980:	8c 93       	st	X, r24
	}

	if(!flag)
	{
		exist = 1;
		for(u8 i =0;i<11;i++)
    2982:	8c 81       	ldd	r24, Y+4	; 0x04
    2984:	8f 5f       	subi	r24, 0xFF	; 255
    2986:	8c 83       	std	Y+4, r24	; 0x04
    2988:	8c 81       	ldd	r24, Y+4	; 0x04
    298a:	8b 30       	cpi	r24, 0x0B	; 11
    298c:	40 f3       	brcs	.-48     	; 0x295e <RetrieveElement+0xda>
    298e:	61 c0       	rjmp	.+194    	; 0x2a52 <RetrieveElement+0x1ce>
		}
	}

	while(pn != NULL && exist == 0)
	{
		for(u8 i = 0; i<11 ; i++)
    2990:	1b 82       	std	Y+3, r1	; 0x03
    2992:	15 c0       	rjmp	.+42     	; 0x29be <RetrieveElement+0x13a>
			copy_head[i] = pn->value[i];
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	48 2f       	mov	r20, r24
    2998:	50 e0       	ldi	r21, 0x00	; 0
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	28 2f       	mov	r18, r24
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    29a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    29a4:	fc 01       	movw	r30, r24
    29a6:	e2 0f       	add	r30, r18
    29a8:	f3 1f       	adc	r31, r19
    29aa:	20 81       	ld	r18, Z
    29ac:	ce 01       	movw	r24, r28
    29ae:	48 96       	adiw	r24, 0x18	; 24
    29b0:	fc 01       	movw	r30, r24
    29b2:	e4 0f       	add	r30, r20
    29b4:	f5 1f       	adc	r31, r21
    29b6:	20 83       	st	Z, r18
		}
	}

	while(pn != NULL && exist == 0)
	{
		for(u8 i = 0; i<11 ; i++)
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	8f 5f       	subi	r24, 0xFF	; 255
    29bc:	8b 83       	std	Y+3, r24	; 0x03
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	8b 30       	cpi	r24, 0x0B	; 11
    29c2:	40 f3       	brcs	.-48     	; 0x2994 <RetrieveElement+0x110>
			copy_head[i] = pn->value[i];

		for(u8 i=0;i<11;i++)
    29c4:	1a 82       	std	Y+2, r1	; 0x02
    29c6:	1c c0       	rjmp	.+56     	; 0x2a00 <RetrieveElement+0x17c>
		{
		    if(copy_data[i]==copy_head[i])
    29c8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	ce 01       	movw	r24, r28
    29d0:	0d 96       	adiw	r24, 0x0d	; 13
    29d2:	fc 01       	movw	r30, r24
    29d4:	e2 0f       	add	r30, r18
    29d6:	f3 1f       	adc	r31, r19
    29d8:	40 81       	ld	r20, Z
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	ce 01       	movw	r24, r28
    29e2:	48 96       	adiw	r24, 0x18	; 24
    29e4:	fc 01       	movw	r30, r24
    29e6:	e2 0f       	add	r30, r18
    29e8:	f3 1f       	adc	r31, r19
    29ea:	80 81       	ld	r24, Z
    29ec:	48 17       	cp	r20, r24
    29ee:	29 f4       	brne	.+10     	; 0x29fa <RetrieveElement+0x176>
		         flag=0;
    29f0:	1f 82       	std	Y+7, r1	; 0x07
	while(pn != NULL && exist == 0)
	{
		for(u8 i = 0; i<11 ; i++)
			copy_head[i] = pn->value[i];

		for(u8 i=0;i<11;i++)
    29f2:	8a 81       	ldd	r24, Y+2	; 0x02
    29f4:	8f 5f       	subi	r24, 0xFF	; 255
    29f6:	8a 83       	std	Y+2, r24	; 0x02
    29f8:	03 c0       	rjmp	.+6      	; 0x2a00 <RetrieveElement+0x17c>
		{
		    if(copy_data[i]==copy_head[i])
		         flag=0;
		    else {flag=1; break;}
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	8f 83       	std	Y+7, r24	; 0x07
    29fe:	03 c0       	rjmp	.+6      	; 0x2a06 <RetrieveElement+0x182>
	while(pn != NULL && exist == 0)
	{
		for(u8 i = 0; i<11 ; i++)
			copy_head[i] = pn->value[i];

		for(u8 i=0;i<11;i++)
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	8b 30       	cpi	r24, 0x0B	; 11
    2a04:	08 f3       	brcs	.-62     	; 0x29c8 <RetrieveElement+0x144>
		{
		    if(copy_data[i]==copy_head[i])
		         flag=0;
		    else {flag=1; break;}
		}
		if(!flag)
    2a06:	8f 81       	ldd	r24, Y+7	; 0x07
    2a08:	88 23       	and	r24, r24
    2a0a:	e9 f4       	brne	.+58     	; 0x2a46 <RetrieveElement+0x1c2>
		{
			exist = 1;
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	88 87       	std	Y+8, r24	; 0x08
			for(u8 i =0;i<11;i++)
    2a10:	19 82       	std	Y+1, r1	; 0x01
    2a12:	15 c0       	rjmp	.+42     	; 0x2a3e <RetrieveElement+0x1ba>
			{
				pe[i] = pn->value[i];
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	28 2f       	mov	r18, r24
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	8b a1       	ldd	r24, Y+35	; 0x23
    2a1c:	9c a1       	ldd	r25, Y+36	; 0x24
    2a1e:	dc 01       	movw	r26, r24
    2a20:	a2 0f       	add	r26, r18
    2a22:	b3 1f       	adc	r27, r19
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	28 2f       	mov	r18, r24
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a2e:	fc 01       	movw	r30, r24
    2a30:	e2 0f       	add	r30, r18
    2a32:	f3 1f       	adc	r31, r19
    2a34:	80 81       	ld	r24, Z
    2a36:	8c 93       	st	X, r24
		    else {flag=1; break;}
		}
		if(!flag)
		{
			exist = 1;
			for(u8 i =0;i<11;i++)
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	8f 5f       	subi	r24, 0xFF	; 255
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	8b 30       	cpi	r24, 0x0B	; 11
    2a42:	40 f3       	brcs	.-48     	; 0x2a14 <RetrieveElement+0x190>
    2a44:	0e c0       	rjmp	.+28     	; 0x2a62 <RetrieveElement+0x1de>
			{
				pe[i] = pn->value[i];
			}
			break;
		}
		pn = pn->Next;
    2a46:	eb 85       	ldd	r30, Y+11	; 0x0b
    2a48:	fc 85       	ldd	r31, Y+12	; 0x0c
    2a4a:	85 85       	ldd	r24, Z+13	; 0x0d
    2a4c:	96 85       	ldd	r25, Z+14	; 0x0e
    2a4e:	9c 87       	std	Y+12, r25	; 0x0c
    2a50:	8b 87       	std	Y+11, r24	; 0x0b
		{
			pe[i] = pn->value[i];
		}
	}

	while(pn != NULL && exist == 0)
    2a52:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a54:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	21 f0       	breq	.+8      	; 0x2a62 <RetrieveElement+0x1de>
    2a5a:	88 85       	ldd	r24, Y+8	; 0x08
    2a5c:	88 23       	and	r24, r24
    2a5e:	09 f4       	brne	.+2      	; 0x2a62 <RetrieveElement+0x1de>
    2a60:	97 cf       	rjmp	.-210    	; 0x2990 <RetrieveElement+0x10c>
			}
			break;
		}
		pn = pn->Next;
	}
	if(exist == 0)
    2a62:	88 85       	ldd	r24, Y+8	; 0x08
    2a64:	88 23       	and	r24, r24
    2a66:	21 f4       	brne	.+8      	; 0x2a70 <RetrieveElement+0x1ec>
	{
		pe = "0";
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	91 e0       	ldi	r25, 0x01	; 1
    2a6c:	9c a3       	std	Y+36, r25	; 0x24
    2a6e:	8b a3       	std	Y+35, r24	; 0x23
	}
}
    2a70:	a8 96       	adiw	r28, 0x28	; 40
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <StoreListToEEPROM>:


void StoreListToEEPROM(List* l)
{
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	00 d0       	rcall	.+0      	; 0x2a88 <StoreListToEEPROM+0x6>
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <StoreListToEEPROM+0x8>
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	9c 83       	std	Y+4, r25	; 0x04
    2a90:	8b 83       	std	Y+3, r24	; 0x03
    current_address = 0;
    2a92:	10 92 fa 04 	sts	0x04FA, r1
    eeprom_write_byte(current_address,l->size);
    2a96:	80 91 fa 04 	lds	r24, 0x04FA
    2a9a:	88 2f       	mov	r24, r24
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	9c 01       	movw	r18, r24
    2aa0:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa2:	fc 81       	ldd	r31, Y+4	; 0x04
    2aa4:	82 81       	ldd	r24, Z+2	; 0x02
    2aa6:	93 81       	ldd	r25, Z+3	; 0x03
    2aa8:	48 2f       	mov	r20, r24
    2aaa:	c9 01       	movw	r24, r18
    2aac:	64 2f       	mov	r22, r20
    2aae:	0e 94 37 24 	call	0x486e	; 0x486e <__eewr_byte_m128>
    current_address++;
    2ab2:	80 91 fa 04 	lds	r24, 0x04FA
    2ab6:	8f 5f       	subi	r24, 0xFF	; 255
    2ab8:	80 93 fa 04 	sts	0x04FA, r24

    Node* pn = l->Head;
    2abc:	eb 81       	ldd	r30, Y+3	; 0x03
    2abe:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac0:	80 81       	ld	r24, Z
    2ac2:	91 81       	ldd	r25, Z+1	; 0x01
    2ac4:	9a 83       	std	Y+2, r25	; 0x02
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    2ac8:	27 c0       	rjmp	.+78     	; 0x2b18 <StoreListToEEPROM+0x96>
    while(pn != NULL)
    {

        eeprom_write_block((const void*) pn->value,(void*)current_address,(11 * sizeof(u8)));
    2aca:	49 81       	ldd	r20, Y+1	; 0x01
    2acc:	5a 81       	ldd	r21, Y+2	; 0x02
    2ace:	80 91 fa 04 	lds	r24, 0x04FA
    2ad2:	88 2f       	mov	r24, r24
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	9c 01       	movw	r18, r24
    2ad8:	ca 01       	movw	r24, r20
    2ada:	b9 01       	movw	r22, r18
    2adc:	4b e0       	ldi	r20, 0x0B	; 11
    2ade:	50 e0       	ldi	r21, 0x00	; 0
    2ae0:	0e 94 2d 24 	call	0x485a	; 0x485a <__eewr_block_m128>
        current_address+= (11 * sizeof(u8));
    2ae4:	80 91 fa 04 	lds	r24, 0x04FA
    2ae8:	85 5f       	subi	r24, 0xF5	; 245
    2aea:	80 93 fa 04 	sts	0x04FA, r24
        eeprom_write_byte(current_address,pn->SMSCALL);
    2aee:	80 91 fa 04 	lds	r24, 0x04FA
    2af2:	88 2f       	mov	r24, r24
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	e9 81       	ldd	r30, Y+1	; 0x01
    2af8:	fa 81       	ldd	r31, Y+2	; 0x02
    2afa:	24 85       	ldd	r18, Z+12	; 0x0c
    2afc:	62 2f       	mov	r22, r18
    2afe:	0e 94 37 24 	call	0x486e	; 0x486e <__eewr_byte_m128>
        current_address++;
    2b02:	80 91 fa 04 	lds	r24, 0x04FA
    2b06:	8f 5f       	subi	r24, 0xFF	; 255
    2b08:	80 93 fa 04 	sts	0x04FA, r24
        pn = pn->Next;
    2b0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b10:	85 85       	ldd	r24, Z+13	; 0x0d
    2b12:	96 85       	ldd	r25, Z+14	; 0x0e
    2b14:	9a 83       	std	Y+2, r25	; 0x02
    2b16:	89 83       	std	Y+1, r24	; 0x01
    current_address = 0;
    eeprom_write_byte(current_address,l->size);
    current_address++;

    Node* pn = l->Head;
    while(pn != NULL)
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
    2b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	a9 f6       	brne	.-86     	; 0x2aca <StoreListToEEPROM+0x48>
        current_address++;
        pn = pn->Next;
    }


}
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	08 95       	ret

00002b2e <ReadListFromEEPROM>:


void ReadListFromEEPROM(List* l)
{
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	2f 97       	sbiw	r28, 0x0f	; 15
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	f8 94       	cli
    2b3c:	de bf       	out	0x3e, r29	; 62
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	cd bf       	out	0x3d, r28	; 61
    2b42:	9f 87       	std	Y+15, r25	; 0x0f
    2b44:	8e 87       	std	Y+14, r24	; 0x0e
    current_address = 0;
    2b46:	10 92 fa 04 	sts	0x04FA, r1
    u8 ListSize = eeprom_read_byte((const u8*)current_address);
    2b4a:	80 91 fa 04 	lds	r24, 0x04FA
    2b4e:	88 2f       	mov	r24, r24
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 25 24 	call	0x484a	; 0x484a <__eerd_byte_m128>
    2b56:	8a 83       	std	Y+2, r24	; 0x02
    current_address++;
    2b58:	80 91 fa 04 	lds	r24, 0x04FA
    2b5c:	8f 5f       	subi	r24, 0xFF	; 255
    2b5e:	80 93 fa 04 	sts	0x04FA, r24
    if(ListSize != 0xFF)
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	8f 3f       	cpi	r24, 0xFF	; 255
    2b66:	69 f1       	breq	.+90     	; 0x2bc2 <ReadListFromEEPROM+0x94>
    2b68:	29 c0       	rjmp	.+82     	; 0x2bbc <ReadListFromEEPROM+0x8e>
    {
        while(ListSize != 0)
        {
            u8 Value[11];
            eeprom_read_block((const void*)Value,(const void*)current_address,(11 * sizeof(u8)));
    2b6a:	80 91 fa 04 	lds	r24, 0x04FA
    2b6e:	88 2f       	mov	r24, r24
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	9c 01       	movw	r18, r24
    2b74:	ce 01       	movw	r24, r28
    2b76:	03 96       	adiw	r24, 0x03	; 3
    2b78:	b9 01       	movw	r22, r18
    2b7a:	4b e0       	ldi	r20, 0x0B	; 11
    2b7c:	50 e0       	ldi	r21, 0x00	; 0
    2b7e:	0e 94 15 24 	call	0x482a	; 0x482a <__eerd_block_m128>
            current_address+= (11 * sizeof(u8));
    2b82:	80 91 fa 04 	lds	r24, 0x04FA
    2b86:	85 5f       	subi	r24, 0xF5	; 245
    2b88:	80 93 fa 04 	sts	0x04FA, r24
            u8 SMSCALL = eeprom_read_byte((const u8*)current_address);
    2b8c:	80 91 fa 04 	lds	r24, 0x04FA
    2b90:	88 2f       	mov	r24, r24
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 25 24 	call	0x484a	; 0x484a <__eerd_byte_m128>
    2b98:	89 83       	std	Y+1, r24	; 0x01
            current_address++;
    2b9a:	80 91 fa 04 	lds	r24, 0x04FA
    2b9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ba0:	80 93 fa 04 	sts	0x04FA, r24
            AddNodeAtLast(l,Value,SMSCALL);
    2ba4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ba6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ba8:	9e 01       	movw	r18, r28
    2baa:	2d 5f       	subi	r18, 0xFD	; 253
    2bac:	3f 4f       	sbci	r19, 0xFF	; 255
    2bae:	b9 01       	movw	r22, r18
    2bb0:	49 81       	ldd	r20, Y+1	; 0x01
    2bb2:	0e 94 46 12 	call	0x248c	; 0x248c <AddNodeAtLast>
            ListSize--;
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	81 50       	subi	r24, 0x01	; 1
    2bba:	8a 83       	std	Y+2, r24	; 0x02
    current_address = 0;
    u8 ListSize = eeprom_read_byte((const u8*)current_address);
    current_address++;
    if(ListSize != 0xFF)
    {
        while(ListSize != 0)
    2bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbe:	88 23       	and	r24, r24
    2bc0:	a1 f6       	brne	.-88     	; 0x2b6a <ReadListFromEEPROM+0x3c>
            ListSize--;
        }

    }

}
    2bc2:	2f 96       	adiw	r28, 0x0f	; 15
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	f8 94       	cli
    2bc8:	de bf       	out	0x3e, r29	; 62
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	cd bf       	out	0x3d, r28	; 61
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <SIM_voidSendCommand>:

u8 	SIM_u8Response[SIM_MAX_RESPONSE_LINES][SIM_MAX_RESPONSE_COLUMN] = {"0","0","0","0","0"};
u8 row = 0 , column = 0;

void SIM_voidSendCommand(u8 const *Copy_u8ATCommand)
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <SIM_voidSendCommand+0x6>
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
    2bde:	9a 83       	std	Y+2, r25	; 0x02
    2be0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8ATCommand != NULL)
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	9a 81       	ldd	r25, Y+2	; 0x02
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	21 f0       	breq	.+8      	; 0x2bf2 <SIM_voidSendCommand+0x1e>
	{
		UART_SendStringSync(Copy_u8ATCommand);
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	9a 81       	ldd	r25, Y+2	; 0x02
    2bee:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <UART_SendStringSync>
	}

}
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <SIM_voidInit>:

void SIM_voidInit(void)
{
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
//  MUX_voidSwitch(GSM);
//  USART_disableRXInterrupt();
	// USART_enuInit();
}
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <SIM_estCheckIfReady>:

ES_t SIM_estCheckIfReady(void)
{
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	0f 92       	push	r0
    2c10:	cd b7       	in	r28, 0x3d	; 61
    2c12:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuerrorState = ES_NOK ;
    2c14:	19 82       	std	Y+1, r1	; 0x01
	SIM_voidSendCommand("AT\r");
    2c16:	82 e0       	ldi	r24, 0x02	; 2
    2c18:	91 e0       	ldi	r25, 0x01	; 1
    2c1a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
	//DIO_enuSetPinValue(DIO_PORTA,DIO_PIN1,DIO_HIGH);
	Local_enuerrorState = SIM_estGetResponse();
    2c1e:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <SIM_estGetResponse>
    2c22:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuerrorState;
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c26:	0f 90       	pop	r0
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <SIM_estCheckIfRegistered>:

ES_t SIM_estCheckIfRegistered(void)
{
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	0f 92       	push	r0
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuerrorState = ES_NOK ;
    2c38:	19 82       	std	Y+1, r1	; 0x01

	if(SIM_estCheckIfReady() == ES_OK)
    2c3a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SIM_estCheckIfReady>
    2c3e:	81 30       	cpi	r24, 0x01	; 1
    2c40:	a9 f4       	brne	.+42     	; 0x2c6c <SIM_estCheckIfRegistered+0x3e>
	{

		//DIO_enuSetPinValue(DIO_PORTA,DIO_PIN1,DIO_HIGH);
		SIM_voidSendCommand("AT+CREG?\r");
    2c42:	86 e0       	ldi	r24, 0x06	; 6
    2c44:	91 e0       	ldi	r25, 0x01	; 1
    2c46:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
		if(SIM_estGetResponse() == ES_OK)
    2c4a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <SIM_estGetResponse>
    2c4e:	81 30       	cpi	r24, 0x01	; 1
    2c50:	69 f4       	brne	.+26     	; 0x2c6c <SIM_estCheckIfRegistered+0x3e>
		{

			if(strstr(SIM_u8Response[SIM_RESPONSE_LINE_2] , "+CREG: 0,1"))
    2c52:	85 e0       	ldi	r24, 0x05	; 5
    2c54:	93 e0       	ldi	r25, 0x03	; 3
    2c56:	8c 59       	subi	r24, 0x9C	; 156
    2c58:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5a:	20 e1       	ldi	r18, 0x10	; 16
    2c5c:	31 e0       	ldi	r19, 0x01	; 1
    2c5e:	b9 01       	movw	r22, r18
    2c60:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <strstr>
    2c64:	00 97       	sbiw	r24, 0x00	; 0
    2c66:	11 f0       	breq	.+4      	; 0x2c6c <SIM_estCheckIfRegistered+0x3e>
			{
				Local_enuerrorState = ES_OK;
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	return Local_enuerrorState;
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c6e:	0f 90       	pop	r0
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <SIM_estGetResponse>:

ES_t SIM_estGetResponse(void)
{
    2c76:	ef 92       	push	r14
    2c78:	ff 92       	push	r15
    2c7a:	0f 93       	push	r16
    2c7c:	1f 93       	push	r17
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	0f 92       	push	r0
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
	for(row = SIM_RESPONSE_LINE_1 ; row < SIM_MAX_RESPONSE_LINES ; row++)
    2c88:	10 92 fb 04 	sts	0x04FB, r1
    2c8c:	1d c0       	rjmp	.+58     	; 0x2cc8 <SIM_estGetResponse+0x52>
	{
		memset(SIM_u8Response[row],0,SIM_MAX_RESPONSE_COLUMN);
    2c8e:	45 e0       	ldi	r20, 0x05	; 5
    2c90:	53 e0       	ldi	r21, 0x03	; 3
    2c92:	80 91 fb 04 	lds	r24, 0x04FB
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	84 e6       	ldi	r24, 0x64	; 100
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	bc 01       	movw	r22, r24
    2ca0:	26 9f       	mul	r18, r22
    2ca2:	c0 01       	movw	r24, r0
    2ca4:	27 9f       	mul	r18, r23
    2ca6:	90 0d       	add	r25, r0
    2ca8:	36 9f       	mul	r19, r22
    2caa:	90 0d       	add	r25, r0
    2cac:	11 24       	eor	r1, r1
    2cae:	84 0f       	add	r24, r20
    2cb0:	95 1f       	adc	r25, r21
    2cb2:	60 e0       	ldi	r22, 0x00	; 0
    2cb4:	70 e0       	ldi	r23, 0x00	; 0
    2cb6:	44 e6       	ldi	r20, 0x64	; 100
    2cb8:	50 e0       	ldi	r21, 0x00	; 0
    2cba:	0e 94 f4 23 	call	0x47e8	; 0x47e8 <memset>
	return Local_enuerrorState;
}

ES_t SIM_estGetResponse(void)
{
	for(row = SIM_RESPONSE_LINE_1 ; row < SIM_MAX_RESPONSE_LINES ; row++)
    2cbe:	80 91 fb 04 	lds	r24, 0x04FB
    2cc2:	8f 5f       	subi	r24, 0xFF	; 255
    2cc4:	80 93 fb 04 	sts	0x04FB, r24
    2cc8:	80 91 fb 04 	lds	r24, 0x04FB
    2ccc:	85 30       	cpi	r24, 0x05	; 5
    2cce:	f8 f2       	brcs	.-66     	; 0x2c8e <SIM_estGetResponse+0x18>
	{
		memset(SIM_u8Response[row],0,SIM_MAX_RESPONSE_COLUMN);
	}
	ES_t Local_enuerrorState = ES_NOK ;
    2cd0:	19 82       	std	Y+1, r1	; 0x01
	for(row = SIM_RESPONSE_LINE_1 ; row < SIM_MAX_RESPONSE_LINES ; row++)
    2cd2:	10 92 fb 04 	sts	0x04FB, r1
    2cd6:	7d c0       	rjmp	.+250    	; 0x2dd2 <SIM_estGetResponse+0x15c>
	{
		for(column = SIM_RESPONSE_COLUMN_1 ; column < SIM_MAX_RESPONSE_COLUMN ; column++)
    2cd8:	10 92 fc 04 	sts	0x04FC, r1
    2cdc:	39 c0       	rjmp	.+114    	; 0x2d50 <SIM_estGetResponse+0xda>
		{

			SIM_u8Response[row][column] = UART_ReceiveByteSynch();
    2cde:	80 91 fb 04 	lds	r24, 0x04FB
    2ce2:	e8 2e       	mov	r14, r24
    2ce4:	ff 24       	eor	r15, r15
    2ce6:	80 91 fc 04 	lds	r24, 0x04FC
    2cea:	08 2f       	mov	r16, r24
    2cec:	10 e0       	ldi	r17, 0x00	; 0
    2cee:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <UART_ReceiveByteSynch>
    2cf2:	28 2f       	mov	r18, r24
    2cf4:	84 e6       	ldi	r24, 0x64	; 100
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	ac 01       	movw	r20, r24
    2cfa:	e4 9e       	mul	r14, r20
    2cfc:	c0 01       	movw	r24, r0
    2cfe:	e5 9e       	mul	r14, r21
    2d00:	90 0d       	add	r25, r0
    2d02:	f4 9e       	mul	r15, r20
    2d04:	90 0d       	add	r25, r0
    2d06:	11 24       	eor	r1, r1
    2d08:	80 0f       	add	r24, r16
    2d0a:	91 1f       	adc	r25, r17
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	eb 5f       	subi	r30, 0xFB	; 251
    2d10:	fc 4f       	sbci	r31, 0xFC	; 252
    2d12:	20 83       	st	Z, r18
			if(strstr(SIM_u8Response[row] , "\r\n"))
    2d14:	45 e0       	ldi	r20, 0x05	; 5
    2d16:	53 e0       	ldi	r21, 0x03	; 3
    2d18:	80 91 fb 04 	lds	r24, 0x04FB
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	84 e6       	ldi	r24, 0x64	; 100
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	bc 01       	movw	r22, r24
    2d26:	26 9f       	mul	r18, r22
    2d28:	c0 01       	movw	r24, r0
    2d2a:	27 9f       	mul	r18, r23
    2d2c:	90 0d       	add	r25, r0
    2d2e:	36 9f       	mul	r19, r22
    2d30:	90 0d       	add	r25, r0
    2d32:	11 24       	eor	r1, r1
    2d34:	84 0f       	add	r24, r20
    2d36:	95 1f       	adc	r25, r21
    2d38:	2b e1       	ldi	r18, 0x1B	; 27
    2d3a:	31 e0       	ldi	r19, 0x01	; 1
    2d3c:	b9 01       	movw	r22, r18
    2d3e:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <strstr>
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	49 f4       	brne	.+18     	; 0x2d58 <SIM_estGetResponse+0xe2>
		memset(SIM_u8Response[row],0,SIM_MAX_RESPONSE_COLUMN);
	}
	ES_t Local_enuerrorState = ES_NOK ;
	for(row = SIM_RESPONSE_LINE_1 ; row < SIM_MAX_RESPONSE_LINES ; row++)
	{
		for(column = SIM_RESPONSE_COLUMN_1 ; column < SIM_MAX_RESPONSE_COLUMN ; column++)
    2d46:	80 91 fc 04 	lds	r24, 0x04FC
    2d4a:	8f 5f       	subi	r24, 0xFF	; 255
    2d4c:	80 93 fc 04 	sts	0x04FC, r24
    2d50:	80 91 fc 04 	lds	r24, 0x04FC
    2d54:	84 36       	cpi	r24, 0x64	; 100
    2d56:	18 f2       	brcs	.-122    	; 0x2cde <SIM_estGetResponse+0x68>
			if(strstr(SIM_u8Response[row] , "\r\n"))
			{
				break;
			}
		}
		if(strstr(SIM_u8Response[row] , "OK\r\n"))
    2d58:	45 e0       	ldi	r20, 0x05	; 5
    2d5a:	53 e0       	ldi	r21, 0x03	; 3
    2d5c:	80 91 fb 04 	lds	r24, 0x04FB
    2d60:	28 2f       	mov	r18, r24
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	84 e6       	ldi	r24, 0x64	; 100
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	bc 01       	movw	r22, r24
    2d6a:	26 9f       	mul	r18, r22
    2d6c:	c0 01       	movw	r24, r0
    2d6e:	27 9f       	mul	r18, r23
    2d70:	90 0d       	add	r25, r0
    2d72:	36 9f       	mul	r19, r22
    2d74:	90 0d       	add	r25, r0
    2d76:	11 24       	eor	r1, r1
    2d78:	84 0f       	add	r24, r20
    2d7a:	95 1f       	adc	r25, r21
    2d7c:	2e e1       	ldi	r18, 0x1E	; 30
    2d7e:	31 e0       	ldi	r19, 0x01	; 1
    2d80:	b9 01       	movw	r22, r18
    2d82:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <strstr>
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	19 f0       	breq	.+6      	; 0x2d90 <SIM_estGetResponse+0x11a>
		{

			Local_enuerrorState = ES_OK;
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    2d8e:	26 c0       	rjmp	.+76     	; 0x2ddc <SIM_estGetResponse+0x166>
			break;
		}
		else if(strstr(SIM_u8Response[row] , "ERROR\r\n"))
    2d90:	45 e0       	ldi	r20, 0x05	; 5
    2d92:	53 e0       	ldi	r21, 0x03	; 3
    2d94:	80 91 fb 04 	lds	r24, 0x04FB
    2d98:	28 2f       	mov	r18, r24
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	84 e6       	ldi	r24, 0x64	; 100
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	bc 01       	movw	r22, r24
    2da2:	26 9f       	mul	r18, r22
    2da4:	c0 01       	movw	r24, r0
    2da6:	27 9f       	mul	r18, r23
    2da8:	90 0d       	add	r25, r0
    2daa:	36 9f       	mul	r19, r22
    2dac:	90 0d       	add	r25, r0
    2dae:	11 24       	eor	r1, r1
    2db0:	84 0f       	add	r24, r20
    2db2:	95 1f       	adc	r25, r21
    2db4:	23 e2       	ldi	r18, 0x23	; 35
    2db6:	31 e0       	ldi	r19, 0x01	; 1
    2db8:	b9 01       	movw	r22, r18
    2dba:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <strstr>
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	19 f0       	breq	.+6      	; 0x2dc8 <SIM_estGetResponse+0x152>
		{

			Local_enuerrorState = ES_ERROR;
    2dc2:	82 e0       	ldi	r24, 0x02	; 2
    2dc4:	89 83       	std	Y+1, r24	; 0x01
    2dc6:	0a c0       	rjmp	.+20     	; 0x2ddc <SIM_estGetResponse+0x166>
	for(row = SIM_RESPONSE_LINE_1 ; row < SIM_MAX_RESPONSE_LINES ; row++)
	{
		memset(SIM_u8Response[row],0,SIM_MAX_RESPONSE_COLUMN);
	}
	ES_t Local_enuerrorState = ES_NOK ;
	for(row = SIM_RESPONSE_LINE_1 ; row < SIM_MAX_RESPONSE_LINES ; row++)
    2dc8:	80 91 fb 04 	lds	r24, 0x04FB
    2dcc:	8f 5f       	subi	r24, 0xFF	; 255
    2dce:	80 93 fb 04 	sts	0x04FB, r24
    2dd2:	80 91 fb 04 	lds	r24, 0x04FB
    2dd6:	85 30       	cpi	r24, 0x05	; 5
    2dd8:	08 f4       	brcc	.+2      	; 0x2ddc <SIM_estGetResponse+0x166>
    2dda:	7e cf       	rjmp	.-260    	; 0x2cd8 <SIM_estGetResponse+0x62>
			break;
		}

	}

	return Local_enuerrorState;
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dde:	0f 90       	pop	r0
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	1f 91       	pop	r17
    2de6:	0f 91       	pop	r16
    2de8:	ff 90       	pop	r15
    2dea:	ef 90       	pop	r14
    2dec:	08 95       	ret

00002dee <SIM_estSendSMS>:

ES_t SIM_estSendSMS(u8 *Copy_u8PhoneNumber, u8 *Copy_u8SMS)
{
    2dee:	df 93       	push	r29
    2df0:	cf 93       	push	r28
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
    2df6:	ed 97       	sbiw	r28, 0x3d	; 61
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	de bf       	out	0x3e, r29	; 62
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	cd bf       	out	0x3d, r28	; 61
    2e02:	9b af       	std	Y+59, r25	; 0x3b
    2e04:	8a af       	std	Y+58, r24	; 0x3a
    2e06:	7d af       	std	Y+61, r23	; 0x3d
    2e08:	6c af       	std	Y+60, r22	; 0x3c
	ES_t Local_enuerrorState = ES_NOK ;
    2e0a:	19 ae       	std	Y+57, r1	; 0x39
	if((Copy_u8PhoneNumber != NULL) && (Copy_u8SMS != NULL))
    2e0c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e0e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <SIM_estSendSMS+0x28>
    2e14:	f3 c1       	rjmp	.+998    	; 0x31fc <SIM_estSendSMS+0x40e>
    2e16:	8c ad       	ldd	r24, Y+60	; 0x3c
    2e18:	9d ad       	ldd	r25, Y+61	; 0x3d
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <SIM_estSendSMS+0x32>
    2e1e:	ee c1       	rjmp	.+988    	; 0x31fc <SIM_estSendSMS+0x40e>
	{
		if(SIM_estCheckIfReady() == ES_OK)
    2e20:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SIM_estCheckIfReady>
    2e24:	81 30       	cpi	r24, 0x01	; 1
    2e26:	09 f0       	breq	.+2      	; 0x2e2a <SIM_estSendSMS+0x3c>
    2e28:	eb c1       	rjmp	.+982    	; 0x3200 <SIM_estSendSMS+0x412>
		{
			SIM_voidSendCommand("AT+CMGF=1\r");
    2e2a:	8b e2       	ldi	r24, 0x2B	; 43
    2e2c:	91 e0       	ldi	r25, 0x01	; 1
    2e2e:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	aa e7       	ldi	r26, 0x7A	; 122
    2e38:	b4 e4       	ldi	r27, 0x44	; 68
    2e3a:	8d ab       	std	Y+53, r24	; 0x35
    2e3c:	9e ab       	std	Y+54, r25	; 0x36
    2e3e:	af ab       	std	Y+55, r26	; 0x37
    2e40:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e42:	6d a9       	ldd	r22, Y+53	; 0x35
    2e44:	7e a9       	ldd	r23, Y+54	; 0x36
    2e46:	8f a9       	ldd	r24, Y+55	; 0x37
    2e48:	98 ad       	ldd	r25, Y+56	; 0x38
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	4a e7       	ldi	r20, 0x7A	; 122
    2e50:	55 e4       	ldi	r21, 0x45	; 69
    2e52:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	89 ab       	std	Y+49, r24	; 0x31
    2e5c:	9a ab       	std	Y+50, r25	; 0x32
    2e5e:	ab ab       	std	Y+51, r26	; 0x33
    2e60:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e62:	69 a9       	ldd	r22, Y+49	; 0x31
    2e64:	7a a9       	ldd	r23, Y+50	; 0x32
    2e66:	8b a9       	ldd	r24, Y+51	; 0x33
    2e68:	9c a9       	ldd	r25, Y+52	; 0x34
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e8       	ldi	r20, 0x80	; 128
    2e70:	5f e3       	ldi	r21, 0x3F	; 63
    2e72:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    2e76:	88 23       	and	r24, r24
    2e78:	2c f4       	brge	.+10     	; 0x2e84 <SIM_estSendSMS+0x96>
		__ticks = 1;
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	98 ab       	std	Y+48, r25	; 0x30
    2e80:	8f a7       	std	Y+47, r24	; 0x2f
    2e82:	3f c0       	rjmp	.+126    	; 0x2f02 <SIM_estSendSMS+0x114>
	else if (__tmp > 65535)
    2e84:	69 a9       	ldd	r22, Y+49	; 0x31
    2e86:	7a a9       	ldd	r23, Y+50	; 0x32
    2e88:	8b a9       	ldd	r24, Y+51	; 0x33
    2e8a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	3f ef       	ldi	r19, 0xFF	; 255
    2e90:	4f e7       	ldi	r20, 0x7F	; 127
    2e92:	57 e4       	ldi	r21, 0x47	; 71
    2e94:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    2e98:	18 16       	cp	r1, r24
    2e9a:	4c f5       	brge	.+82     	; 0x2eee <SIM_estSendSMS+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9c:	6d a9       	ldd	r22, Y+53	; 0x35
    2e9e:	7e a9       	ldd	r23, Y+54	; 0x36
    2ea0:	8f a9       	ldd	r24, Y+55	; 0x37
    2ea2:	98 ad       	ldd	r25, Y+56	; 0x38
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e2       	ldi	r20, 0x20	; 32
    2eaa:	51 e4       	ldi	r21, 0x41	; 65
    2eac:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	bc 01       	movw	r22, r24
    2eb6:	cd 01       	movw	r24, r26
    2eb8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	98 ab       	std	Y+48, r25	; 0x30
    2ec2:	8f a7       	std	Y+47, r24	; 0x2f
    2ec4:	0f c0       	rjmp	.+30     	; 0x2ee4 <SIM_estSendSMS+0xf6>
    2ec6:	80 e9       	ldi	r24, 0x90	; 144
    2ec8:	91 e0       	ldi	r25, 0x01	; 1
    2eca:	9e a7       	std	Y+46, r25	; 0x2e
    2ecc:	8d a7       	std	Y+45, r24	; 0x2d
    2ece:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ed0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ed2:	01 97       	sbiw	r24, 0x01	; 1
    2ed4:	f1 f7       	brne	.-4      	; 0x2ed2 <SIM_estSendSMS+0xe4>
    2ed6:	9e a7       	std	Y+46, r25	; 0x2e
    2ed8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eda:	8f a5       	ldd	r24, Y+47	; 0x2f
    2edc:	98 a9       	ldd	r25, Y+48	; 0x30
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	98 ab       	std	Y+48, r25	; 0x30
    2ee2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ee6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	69 f7       	brne	.-38     	; 0x2ec6 <SIM_estSendSMS+0xd8>
    2eec:	14 c0       	rjmp	.+40     	; 0x2f16 <SIM_estSendSMS+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eee:	69 a9       	ldd	r22, Y+49	; 0x31
    2ef0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ef2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ef4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ef6:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	98 ab       	std	Y+48, r25	; 0x30
    2f00:	8f a7       	std	Y+47, r24	; 0x2f
    2f02:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f04:	98 a9       	ldd	r25, Y+48	; 0x30
    2f06:	9c a7       	std	Y+44, r25	; 0x2c
    2f08:	8b a7       	std	Y+43, r24	; 0x2b
    2f0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <SIM_estSendSMS+0x120>
    2f12:	9c a7       	std	Y+44, r25	; 0x2c
    2f14:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			if(SIM_estGetResponse() == ES_OK)
    2f16:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <SIM_estGetResponse>
    2f1a:	81 30       	cpi	r24, 0x01	; 1
    2f1c:	09 f0       	breq	.+2      	; 0x2f20 <SIM_estSendSMS+0x132>
    2f1e:	70 c1       	rjmp	.+736    	; 0x3200 <SIM_estSendSMS+0x412>
			{
				SIM_voidSendCommand("AT+CMGS=\"");
    2f20:	86 e3       	ldi	r24, 0x36	; 54
    2f22:	91 e0       	ldi	r25, 0x01	; 1
    2f24:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
				SIM_voidSendCommand(Copy_u8PhoneNumber);
    2f28:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f2a:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f2c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
				SIM_voidSendCommand("\"\r");
    2f30:	80 e4       	ldi	r24, 0x40	; 64
    2f32:	91 e0       	ldi	r25, 0x01	; 1
    2f34:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	aa e7       	ldi	r26, 0x7A	; 122
    2f3e:	b4 e4       	ldi	r27, 0x44	; 68
    2f40:	8f a3       	std	Y+39, r24	; 0x27
    2f42:	98 a7       	std	Y+40, r25	; 0x28
    2f44:	a9 a7       	std	Y+41, r26	; 0x29
    2f46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f48:	6f a1       	ldd	r22, Y+39	; 0x27
    2f4a:	78 a5       	ldd	r23, Y+40	; 0x28
    2f4c:	89 a5       	ldd	r24, Y+41	; 0x29
    2f4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	4a e7       	ldi	r20, 0x7A	; 122
    2f56:	55 e4       	ldi	r21, 0x45	; 69
    2f58:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	8b a3       	std	Y+35, r24	; 0x23
    2f62:	9c a3       	std	Y+36, r25	; 0x24
    2f64:	ad a3       	std	Y+37, r26	; 0x25
    2f66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f68:	6b a1       	ldd	r22, Y+35	; 0x23
    2f6a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f6c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f6e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e8       	ldi	r20, 0x80	; 128
    2f76:	5f e3       	ldi	r21, 0x3F	; 63
    2f78:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    2f7c:	88 23       	and	r24, r24
    2f7e:	2c f4       	brge	.+10     	; 0x2f8a <SIM_estSendSMS+0x19c>
		__ticks = 1;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	9a a3       	std	Y+34, r25	; 0x22
    2f86:	89 a3       	std	Y+33, r24	; 0x21
    2f88:	3f c0       	rjmp	.+126    	; 0x3008 <SIM_estSendSMS+0x21a>
	else if (__tmp > 65535)
    2f8a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f8c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f8e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f90:	9e a1       	ldd	r25, Y+38	; 0x26
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	3f ef       	ldi	r19, 0xFF	; 255
    2f96:	4f e7       	ldi	r20, 0x7F	; 127
    2f98:	57 e4       	ldi	r21, 0x47	; 71
    2f9a:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    2f9e:	18 16       	cp	r1, r24
    2fa0:	4c f5       	brge	.+82     	; 0x2ff4 <SIM_estSendSMS+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa2:	6f a1       	ldd	r22, Y+39	; 0x27
    2fa4:	78 a5       	ldd	r23, Y+40	; 0x28
    2fa6:	89 a5       	ldd	r24, Y+41	; 0x29
    2fa8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e2       	ldi	r20, 0x20	; 32
    2fb0:	51 e4       	ldi	r21, 0x41	; 65
    2fb2:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	bc 01       	movw	r22, r24
    2fbc:	cd 01       	movw	r24, r26
    2fbe:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	9a a3       	std	Y+34, r25	; 0x22
    2fc8:	89 a3       	std	Y+33, r24	; 0x21
    2fca:	0f c0       	rjmp	.+30     	; 0x2fea <SIM_estSendSMS+0x1fc>
    2fcc:	80 e9       	ldi	r24, 0x90	; 144
    2fce:	91 e0       	ldi	r25, 0x01	; 1
    2fd0:	98 a3       	std	Y+32, r25	; 0x20
    2fd2:	8f 8f       	std	Y+31, r24	; 0x1f
    2fd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fd6:	98 a1       	ldd	r25, Y+32	; 0x20
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <SIM_estSendSMS+0x1ea>
    2fdc:	98 a3       	std	Y+32, r25	; 0x20
    2fde:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe0:	89 a1       	ldd	r24, Y+33	; 0x21
    2fe2:	9a a1       	ldd	r25, Y+34	; 0x22
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	9a a3       	std	Y+34, r25	; 0x22
    2fe8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fea:	89 a1       	ldd	r24, Y+33	; 0x21
    2fec:	9a a1       	ldd	r25, Y+34	; 0x22
    2fee:	00 97       	sbiw	r24, 0x00	; 0
    2ff0:	69 f7       	brne	.-38     	; 0x2fcc <SIM_estSendSMS+0x1de>
    2ff2:	14 c0       	rjmp	.+40     	; 0x301c <SIM_estSendSMS+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ff6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ff8:	8d a1       	ldd	r24, Y+37	; 0x25
    2ffa:	9e a1       	ldd	r25, Y+38	; 0x26
    2ffc:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	9a a3       	std	Y+34, r25	; 0x22
    3006:	89 a3       	std	Y+33, r24	; 0x21
    3008:	89 a1       	ldd	r24, Y+33	; 0x21
    300a:	9a a1       	ldd	r25, Y+34	; 0x22
    300c:	9e 8f       	std	Y+30, r25	; 0x1e
    300e:	8d 8f       	std	Y+29, r24	; 0x1d
    3010:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3012:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	f1 f7       	brne	.-4      	; 0x3014 <SIM_estSendSMS+0x226>
    3018:	9e 8f       	std	Y+30, r25	; 0x1e
    301a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				SIM_voidSendCommand(Copy_u8SMS);
    301c:	8c ad       	ldd	r24, Y+60	; 0x3c
    301e:	9d ad       	ldd	r25, Y+61	; 0x3d
    3020:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	a8 ec       	ldi	r26, 0xC8	; 200
    302a:	b2 e4       	ldi	r27, 0x42	; 66
    302c:	89 8f       	std	Y+25, r24	; 0x19
    302e:	9a 8f       	std	Y+26, r25	; 0x1a
    3030:	ab 8f       	std	Y+27, r26	; 0x1b
    3032:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3034:	69 8d       	ldd	r22, Y+25	; 0x19
    3036:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3038:	8b 8d       	ldd	r24, Y+27	; 0x1b
    303a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	4a e7       	ldi	r20, 0x7A	; 122
    3042:	55 e4       	ldi	r21, 0x45	; 69
    3044:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	8d 8b       	std	Y+21, r24	; 0x15
    304e:	9e 8b       	std	Y+22, r25	; 0x16
    3050:	af 8b       	std	Y+23, r26	; 0x17
    3052:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3054:	6d 89       	ldd	r22, Y+21	; 0x15
    3056:	7e 89       	ldd	r23, Y+22	; 0x16
    3058:	8f 89       	ldd	r24, Y+23	; 0x17
    305a:	98 8d       	ldd	r25, Y+24	; 0x18
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e8       	ldi	r20, 0x80	; 128
    3062:	5f e3       	ldi	r21, 0x3F	; 63
    3064:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    3068:	88 23       	and	r24, r24
    306a:	2c f4       	brge	.+10     	; 0x3076 <SIM_estSendSMS+0x288>
		__ticks = 1;
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	9c 8b       	std	Y+20, r25	; 0x14
    3072:	8b 8b       	std	Y+19, r24	; 0x13
    3074:	3f c0       	rjmp	.+126    	; 0x30f4 <SIM_estSendSMS+0x306>
	else if (__tmp > 65535)
    3076:	6d 89       	ldd	r22, Y+21	; 0x15
    3078:	7e 89       	ldd	r23, Y+22	; 0x16
    307a:	8f 89       	ldd	r24, Y+23	; 0x17
    307c:	98 8d       	ldd	r25, Y+24	; 0x18
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	3f ef       	ldi	r19, 0xFF	; 255
    3082:	4f e7       	ldi	r20, 0x7F	; 127
    3084:	57 e4       	ldi	r21, 0x47	; 71
    3086:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    308a:	18 16       	cp	r1, r24
    308c:	4c f5       	brge	.+82     	; 0x30e0 <SIM_estSendSMS+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    308e:	69 8d       	ldd	r22, Y+25	; 0x19
    3090:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3092:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3094:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	40 e2       	ldi	r20, 0x20	; 32
    309c:	51 e4       	ldi	r21, 0x41	; 65
    309e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	bc 01       	movw	r22, r24
    30a8:	cd 01       	movw	r24, r26
    30aa:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	9c 8b       	std	Y+20, r25	; 0x14
    30b4:	8b 8b       	std	Y+19, r24	; 0x13
    30b6:	0f c0       	rjmp	.+30     	; 0x30d6 <SIM_estSendSMS+0x2e8>
    30b8:	80 e9       	ldi	r24, 0x90	; 144
    30ba:	91 e0       	ldi	r25, 0x01	; 1
    30bc:	9a 8b       	std	Y+18, r25	; 0x12
    30be:	89 8b       	std	Y+17, r24	; 0x11
    30c0:	89 89       	ldd	r24, Y+17	; 0x11
    30c2:	9a 89       	ldd	r25, Y+18	; 0x12
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	f1 f7       	brne	.-4      	; 0x30c4 <SIM_estSendSMS+0x2d6>
    30c8:	9a 8b       	std	Y+18, r25	; 0x12
    30ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30cc:	8b 89       	ldd	r24, Y+19	; 0x13
    30ce:	9c 89       	ldd	r25, Y+20	; 0x14
    30d0:	01 97       	sbiw	r24, 0x01	; 1
    30d2:	9c 8b       	std	Y+20, r25	; 0x14
    30d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d6:	8b 89       	ldd	r24, Y+19	; 0x13
    30d8:	9c 89       	ldd	r25, Y+20	; 0x14
    30da:	00 97       	sbiw	r24, 0x00	; 0
    30dc:	69 f7       	brne	.-38     	; 0x30b8 <SIM_estSendSMS+0x2ca>
    30de:	14 c0       	rjmp	.+40     	; 0x3108 <SIM_estSendSMS+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e0:	6d 89       	ldd	r22, Y+21	; 0x15
    30e2:	7e 89       	ldd	r23, Y+22	; 0x16
    30e4:	8f 89       	ldd	r24, Y+23	; 0x17
    30e6:	98 8d       	ldd	r25, Y+24	; 0x18
    30e8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	9c 8b       	std	Y+20, r25	; 0x14
    30f2:	8b 8b       	std	Y+19, r24	; 0x13
    30f4:	8b 89       	ldd	r24, Y+19	; 0x13
    30f6:	9c 89       	ldd	r25, Y+20	; 0x14
    30f8:	98 8b       	std	Y+16, r25	; 0x10
    30fa:	8f 87       	std	Y+15, r24	; 0x0f
    30fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    30fe:	98 89       	ldd	r25, Y+16	; 0x10
    3100:	01 97       	sbiw	r24, 0x01	; 1
    3102:	f1 f7       	brne	.-4      	; 0x3100 <SIM_estSendSMS+0x312>
    3104:	98 8b       	std	Y+16, r25	; 0x10
    3106:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(100);
				SIM_voidSendCommand("\r");
    3108:	83 e4       	ldi	r24, 0x43	; 67
    310a:	91 e0       	ldi	r25, 0x01	; 1
    310c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	aa e7       	ldi	r26, 0x7A	; 122
    3116:	b4 e4       	ldi	r27, 0x44	; 68
    3118:	8b 87       	std	Y+11, r24	; 0x0b
    311a:	9c 87       	std	Y+12, r25	; 0x0c
    311c:	ad 87       	std	Y+13, r26	; 0x0d
    311e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3120:	6b 85       	ldd	r22, Y+11	; 0x0b
    3122:	7c 85       	ldd	r23, Y+12	; 0x0c
    3124:	8d 85       	ldd	r24, Y+13	; 0x0d
    3126:	9e 85       	ldd	r25, Y+14	; 0x0e
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	4a e7       	ldi	r20, 0x7A	; 122
    312e:	55 e4       	ldi	r21, 0x45	; 69
    3130:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	8f 83       	std	Y+7, r24	; 0x07
    313a:	98 87       	std	Y+8, r25	; 0x08
    313c:	a9 87       	std	Y+9, r26	; 0x09
    313e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3140:	6f 81       	ldd	r22, Y+7	; 0x07
    3142:	78 85       	ldd	r23, Y+8	; 0x08
    3144:	89 85       	ldd	r24, Y+9	; 0x09
    3146:	9a 85       	ldd	r25, Y+10	; 0x0a
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	40 e8       	ldi	r20, 0x80	; 128
    314e:	5f e3       	ldi	r21, 0x3F	; 63
    3150:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    3154:	88 23       	and	r24, r24
    3156:	2c f4       	brge	.+10     	; 0x3162 <SIM_estSendSMS+0x374>
		__ticks = 1;
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	9e 83       	std	Y+6, r25	; 0x06
    315e:	8d 83       	std	Y+5, r24	; 0x05
    3160:	3f c0       	rjmp	.+126    	; 0x31e0 <SIM_estSendSMS+0x3f2>
	else if (__tmp > 65535)
    3162:	6f 81       	ldd	r22, Y+7	; 0x07
    3164:	78 85       	ldd	r23, Y+8	; 0x08
    3166:	89 85       	ldd	r24, Y+9	; 0x09
    3168:	9a 85       	ldd	r25, Y+10	; 0x0a
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	3f ef       	ldi	r19, 0xFF	; 255
    316e:	4f e7       	ldi	r20, 0x7F	; 127
    3170:	57 e4       	ldi	r21, 0x47	; 71
    3172:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    3176:	18 16       	cp	r1, r24
    3178:	4c f5       	brge	.+82     	; 0x31cc <SIM_estSendSMS+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317a:	6b 85       	ldd	r22, Y+11	; 0x0b
    317c:	7c 85       	ldd	r23, Y+12	; 0x0c
    317e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3180:	9e 85       	ldd	r25, Y+14	; 0x0e
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	40 e2       	ldi	r20, 0x20	; 32
    3188:	51 e4       	ldi	r21, 0x41	; 65
    318a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	bc 01       	movw	r22, r24
    3194:	cd 01       	movw	r24, r26
    3196:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	9e 83       	std	Y+6, r25	; 0x06
    31a0:	8d 83       	std	Y+5, r24	; 0x05
    31a2:	0f c0       	rjmp	.+30     	; 0x31c2 <SIM_estSendSMS+0x3d4>
    31a4:	80 e9       	ldi	r24, 0x90	; 144
    31a6:	91 e0       	ldi	r25, 0x01	; 1
    31a8:	9c 83       	std	Y+4, r25	; 0x04
    31aa:	8b 83       	std	Y+3, r24	; 0x03
    31ac:	8b 81       	ldd	r24, Y+3	; 0x03
    31ae:	9c 81       	ldd	r25, Y+4	; 0x04
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <SIM_estSendSMS+0x3c2>
    31b4:	9c 83       	std	Y+4, r25	; 0x04
    31b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ba:	9e 81       	ldd	r25, Y+6	; 0x06
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	9e 83       	std	Y+6, r25	; 0x06
    31c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c2:	8d 81       	ldd	r24, Y+5	; 0x05
    31c4:	9e 81       	ldd	r25, Y+6	; 0x06
    31c6:	00 97       	sbiw	r24, 0x00	; 0
    31c8:	69 f7       	brne	.-38     	; 0x31a4 <SIM_estSendSMS+0x3b6>
    31ca:	14 c0       	rjmp	.+40     	; 0x31f4 <SIM_estSendSMS+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31cc:	6f 81       	ldd	r22, Y+7	; 0x07
    31ce:	78 85       	ldd	r23, Y+8	; 0x08
    31d0:	89 85       	ldd	r24, Y+9	; 0x09
    31d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d4:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    31d8:	dc 01       	movw	r26, r24
    31da:	cb 01       	movw	r24, r22
    31dc:	9e 83       	std	Y+6, r25	; 0x06
    31de:	8d 83       	std	Y+5, r24	; 0x05
    31e0:	8d 81       	ldd	r24, Y+5	; 0x05
    31e2:	9e 81       	ldd	r25, Y+6	; 0x06
    31e4:	9a 83       	std	Y+2, r25	; 0x02
    31e6:	89 83       	std	Y+1, r24	; 0x01
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	9a 81       	ldd	r25, Y+2	; 0x02
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <SIM_estSendSMS+0x3fe>
    31f0:	9a 83       	std	Y+2, r25	; 0x02
    31f2:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				Local_enuerrorState = SIM_estGetResponse();
    31f4:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <SIM_estGetResponse>
    31f8:	89 af       	std	Y+57, r24	; 0x39
    31fa:	02 c0       	rjmp	.+4      	; 0x3200 <SIM_estSendSMS+0x412>
			}
		}
	}
	else
	{
		Local_enuerrorState = ES_NULL_POINTER ;
    31fc:	83 e0       	ldi	r24, 0x03	; 3
    31fe:	89 af       	std	Y+57, r24	; 0x39
	}
	return Local_enuerrorState;
    3200:	89 ad       	ldd	r24, Y+57	; 0x39
}
    3202:	ed 96       	adiw	r28, 0x3d	; 61
    3204:	0f b6       	in	r0, 0x3f	; 63
    3206:	f8 94       	cli
    3208:	de bf       	out	0x3e, r29	; 62
    320a:	0f be       	out	0x3f, r0	; 63
    320c:	cd bf       	out	0x3d, r28	; 61
    320e:	cf 91       	pop	r28
    3210:	df 91       	pop	r29
    3212:	08 95       	ret

00003214 <SIM_estSendLocation>:

ES_t SIM_estSendLocation(u8 *Copy_u8PhoneNumber, u8 *Copy_u8Latitude, u8 *Copy_u8Longitude)
{
    3214:	df 93       	push	r29
    3216:	cf 93       	push	r28
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	65 97       	sbiw	r28, 0x15	; 21
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	de bf       	out	0x3e, r29	; 62
    3224:	0f be       	out	0x3f, r0	; 63
    3226:	cd bf       	out	0x3d, r28	; 61
    3228:	99 8b       	std	Y+17, r25	; 0x11
    322a:	88 8b       	std	Y+16, r24	; 0x10
    322c:	7b 8b       	std	Y+19, r23	; 0x13
    322e:	6a 8b       	std	Y+18, r22	; 0x12
    3230:	5d 8b       	std	Y+21, r21	; 0x15
    3232:	4c 8b       	std	Y+20, r20	; 0x14
	ES_t Local_enuerrorState = ES_NOK ;
    3234:	1f 86       	std	Y+15, r1	; 0x0f
	if((Copy_u8PhoneNumber != NULL) && (Copy_u8Latitude != NULL) && (Copy_u8Longitude != NULL))
    3236:	88 89       	ldd	r24, Y+16	; 0x10
    3238:	99 89       	ldd	r25, Y+17	; 0x11
    323a:	00 97       	sbiw	r24, 0x00	; 0
    323c:	09 f4       	brne	.+2      	; 0x3240 <SIM_estSendLocation+0x2c>
    323e:	ae c0       	rjmp	.+348    	; 0x339c <SIM_estSendLocation+0x188>
    3240:	8a 89       	ldd	r24, Y+18	; 0x12
    3242:	9b 89       	ldd	r25, Y+19	; 0x13
    3244:	00 97       	sbiw	r24, 0x00	; 0
    3246:	09 f4       	brne	.+2      	; 0x324a <SIM_estSendLocation+0x36>
    3248:	a9 c0       	rjmp	.+338    	; 0x339c <SIM_estSendLocation+0x188>
    324a:	8c 89       	ldd	r24, Y+20	; 0x14
    324c:	9d 89       	ldd	r25, Y+21	; 0x15
    324e:	00 97       	sbiw	r24, 0x00	; 0
    3250:	09 f4       	brne	.+2      	; 0x3254 <SIM_estSendLocation+0x40>
    3252:	a4 c0       	rjmp	.+328    	; 0x339c <SIM_estSendLocation+0x188>
	{
		if(SIM_estCheckIfReady() == ES_OK)
    3254:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SIM_estCheckIfReady>
    3258:	81 30       	cpi	r24, 0x01	; 1
    325a:	09 f0       	breq	.+2      	; 0x325e <SIM_estSendLocation+0x4a>
    325c:	a1 c0       	rjmp	.+322    	; 0x33a0 <SIM_estSendLocation+0x18c>
		{
			SIM_voidSendCommand("AT+CMGF=1\r");
    325e:	8b e2       	ldi	r24, 0x2B	; 43
    3260:	91 e0       	ldi	r25, 0x01	; 1
    3262:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
			if(SIM_estGetResponse() == ES_OK)
    3266:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <SIM_estGetResponse>
    326a:	81 30       	cpi	r24, 0x01	; 1
    326c:	09 f0       	breq	.+2      	; 0x3270 <SIM_estSendLocation+0x5c>
    326e:	98 c0       	rjmp	.+304    	; 0x33a0 <SIM_estSendLocation+0x18c>
			{
				SIM_voidSendCommand("AT+CMGS=\"");
    3270:	86 e3       	ldi	r24, 0x36	; 54
    3272:	91 e0       	ldi	r25, 0x01	; 1
    3274:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
				SIM_voidSendCommand(Copy_u8PhoneNumber);
    3278:	88 89       	ldd	r24, Y+16	; 0x10
    327a:	99 89       	ldd	r25, Y+17	; 0x11
    327c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
				SIM_voidSendCommand("\"\r");
    3280:	80 e4       	ldi	r24, 0x40	; 64
    3282:	91 e0       	ldi	r25, 0x01	; 1
    3284:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	a0 e2       	ldi	r26, 0x20	; 32
    328e:	b1 e4       	ldi	r27, 0x41	; 65
    3290:	8b 87       	std	Y+11, r24	; 0x0b
    3292:	9c 87       	std	Y+12, r25	; 0x0c
    3294:	ad 87       	std	Y+13, r26	; 0x0d
    3296:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3298:	6b 85       	ldd	r22, Y+11	; 0x0b
    329a:	7c 85       	ldd	r23, Y+12	; 0x0c
    329c:	8d 85       	ldd	r24, Y+13	; 0x0d
    329e:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	4a e7       	ldi	r20, 0x7A	; 122
    32a6:	55 e4       	ldi	r21, 0x45	; 69
    32a8:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	8f 83       	std	Y+7, r24	; 0x07
    32b2:	98 87       	std	Y+8, r25	; 0x08
    32b4:	a9 87       	std	Y+9, r26	; 0x09
    32b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32b8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ba:	78 85       	ldd	r23, Y+8	; 0x08
    32bc:	89 85       	ldd	r24, Y+9	; 0x09
    32be:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	40 e8       	ldi	r20, 0x80	; 128
    32c6:	5f e3       	ldi	r21, 0x3F	; 63
    32c8:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    32cc:	88 23       	and	r24, r24
    32ce:	2c f4       	brge	.+10     	; 0x32da <SIM_estSendLocation+0xc6>
		__ticks = 1;
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	9e 83       	std	Y+6, r25	; 0x06
    32d6:	8d 83       	std	Y+5, r24	; 0x05
    32d8:	3f c0       	rjmp	.+126    	; 0x3358 <SIM_estSendLocation+0x144>
	else if (__tmp > 65535)
    32da:	6f 81       	ldd	r22, Y+7	; 0x07
    32dc:	78 85       	ldd	r23, Y+8	; 0x08
    32de:	89 85       	ldd	r24, Y+9	; 0x09
    32e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	3f ef       	ldi	r19, 0xFF	; 255
    32e6:	4f e7       	ldi	r20, 0x7F	; 127
    32e8:	57 e4       	ldi	r21, 0x47	; 71
    32ea:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    32ee:	18 16       	cp	r1, r24
    32f0:	4c f5       	brge	.+82     	; 0x3344 <SIM_estSendLocation+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	40 e2       	ldi	r20, 0x20	; 32
    3300:	51 e4       	ldi	r21, 0x41	; 65
    3302:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	bc 01       	movw	r22, r24
    330c:	cd 01       	movw	r24, r26
    330e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	9e 83       	std	Y+6, r25	; 0x06
    3318:	8d 83       	std	Y+5, r24	; 0x05
    331a:	0f c0       	rjmp	.+30     	; 0x333a <SIM_estSendLocation+0x126>
    331c:	80 e9       	ldi	r24, 0x90	; 144
    331e:	91 e0       	ldi	r25, 0x01	; 1
    3320:	9c 83       	std	Y+4, r25	; 0x04
    3322:	8b 83       	std	Y+3, r24	; 0x03
    3324:	8b 81       	ldd	r24, Y+3	; 0x03
    3326:	9c 81       	ldd	r25, Y+4	; 0x04
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	f1 f7       	brne	.-4      	; 0x3328 <SIM_estSendLocation+0x114>
    332c:	9c 83       	std	Y+4, r25	; 0x04
    332e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3330:	8d 81       	ldd	r24, Y+5	; 0x05
    3332:	9e 81       	ldd	r25, Y+6	; 0x06
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	9e 83       	std	Y+6, r25	; 0x06
    3338:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    333a:	8d 81       	ldd	r24, Y+5	; 0x05
    333c:	9e 81       	ldd	r25, Y+6	; 0x06
    333e:	00 97       	sbiw	r24, 0x00	; 0
    3340:	69 f7       	brne	.-38     	; 0x331c <SIM_estSendLocation+0x108>
    3342:	14 c0       	rjmp	.+40     	; 0x336c <SIM_estSendLocation+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3344:	6f 81       	ldd	r22, Y+7	; 0x07
    3346:	78 85       	ldd	r23, Y+8	; 0x08
    3348:	89 85       	ldd	r24, Y+9	; 0x09
    334a:	9a 85       	ldd	r25, Y+10	; 0x0a
    334c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	9e 83       	std	Y+6, r25	; 0x06
    3356:	8d 83       	std	Y+5, r24	; 0x05
    3358:	8d 81       	ldd	r24, Y+5	; 0x05
    335a:	9e 81       	ldd	r25, Y+6	; 0x06
    335c:	9a 83       	std	Y+2, r25	; 0x02
    335e:	89 83       	std	Y+1, r24	; 0x01
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	9a 81       	ldd	r25, Y+2	; 0x02
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	f1 f7       	brne	.-4      	; 0x3364 <SIM_estSendLocation+0x150>
    3368:	9a 83       	std	Y+2, r25	; 0x02
    336a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10); //https://maps.go[dot]ogle.com/?q=
				//https://maps.google.com/?q=30.3052624,31.7730866&z=30
				SIM_voidSendCommand("Please delete \"[dot]\" form the link below then open it.\rhttps://maps.go[dot]ogle.com/?q="); //https://www.google.com/maps/dir/?api=1&parameters
    336c:	86 e4       	ldi	r24, 0x46	; 70
    336e:	91 e0       	ldi	r25, 0x01	; 1
    3370:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
				SIM_voidSendCommand(Copy_u8Latitude);
    3374:	8a 89       	ldd	r24, Y+18	; 0x12
    3376:	9b 89       	ldd	r25, Y+19	; 0x13
    3378:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
				SIM_voidSendCommand(",");
    337c:	8f e9       	ldi	r24, 0x9F	; 159
    337e:	91 e0       	ldi	r25, 0x01	; 1
    3380:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
				SIM_voidSendCommand(Copy_u8Longitude);
    3384:	8c 89       	ldd	r24, Y+20	; 0x14
    3386:	9d 89       	ldd	r25, Y+21	; 0x15
    3388:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
				SIM_voidSendCommand("\r");
    338c:	83 e4       	ldi	r24, 0x43	; 67
    338e:	91 e0       	ldi	r25, 0x01	; 1
    3390:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
				Local_enuerrorState = SIM_estGetResponse();
    3394:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <SIM_estGetResponse>
    3398:	8f 87       	std	Y+15, r24	; 0x0f
    339a:	02 c0       	rjmp	.+4      	; 0x33a0 <SIM_estSendLocation+0x18c>
			}
		}
	}
	else
	{
		Local_enuerrorState = ES_NULL_POINTER ;
    339c:	83 e0       	ldi	r24, 0x03	; 3
    339e:	8f 87       	std	Y+15, r24	; 0x0f
	}
	return Local_enuerrorState;
    33a0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    33a2:	65 96       	adiw	r28, 0x15	; 21
    33a4:	0f b6       	in	r0, 0x3f	; 63
    33a6:	f8 94       	cli
    33a8:	de bf       	out	0x3e, r29	; 62
    33aa:	0f be       	out	0x3f, r0	; 63
    33ac:	cd bf       	out	0x3d, r28	; 61
    33ae:	cf 91       	pop	r28
    33b0:	df 91       	pop	r29
    33b2:	08 95       	ret

000033b4 <SIM_estMakeCall>:

ES_t SIM_estMakeCall(u8 *Copy_u8PhoneNumber)
{
    33b4:	df 93       	push	r29
    33b6:	cf 93       	push	r28
    33b8:	00 d0       	rcall	.+0      	; 0x33ba <SIM_estMakeCall+0x6>
    33ba:	0f 92       	push	r0
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    33c0:	9b 83       	std	Y+3, r25	; 0x03
    33c2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuerrorState = ES_NOK ;
    33c4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PhoneNumber != NULL)
    33c6:	8a 81       	ldd	r24, Y+2	; 0x02
    33c8:	9b 81       	ldd	r25, Y+3	; 0x03
    33ca:	00 97       	sbiw	r24, 0x00	; 0
    33cc:	e1 f0       	breq	.+56     	; 0x3406 <SIM_estMakeCall+0x52>
	{
		if(SIM_estCheckIfReady() == ES_OK)
    33ce:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <SIM_estCheckIfReady>
    33d2:	81 30       	cpi	r24, 0x01	; 1
    33d4:	a1 f4       	brne	.+40     	; 0x33fe <SIM_estMakeCall+0x4a>
		{
			SIM_voidSendCommand("AT+CMGF=0\r");
    33d6:	81 ea       	ldi	r24, 0xA1	; 161
    33d8:	91 e0       	ldi	r25, 0x01	; 1
    33da:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
			if(SIM_estGetResponse() == ES_OK)
    33de:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <SIM_estGetResponse>
    33e2:	81 30       	cpi	r24, 0x01	; 1
    33e4:	61 f4       	brne	.+24     	; 0x33fe <SIM_estMakeCall+0x4a>
			{
				SIM_voidSendCommand("ATD");
    33e6:	8c ea       	ldi	r24, 0xAC	; 172
    33e8:	91 e0       	ldi	r25, 0x01	; 1
    33ea:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
				SIM_voidSendCommand(Copy_u8PhoneNumber);
    33ee:	8a 81       	ldd	r24, Y+2	; 0x02
    33f0:	9b 81       	ldd	r25, Y+3	; 0x03
    33f2:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
				SIM_voidSendCommand(";\r\n");
    33f6:	80 eb       	ldi	r24, 0xB0	; 176
    33f8:	91 e0       	ldi	r25, 0x01	; 1
    33fa:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
			}
		}

		Local_enuerrorState = SIM_estGetResponse();
    33fe:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <SIM_estGetResponse>
    3402:	89 83       	std	Y+1, r24	; 0x01
    3404:	02 c0       	rjmp	.+4      	; 0x340a <SIM_estMakeCall+0x56>
	}
	else
	{
		Local_enuerrorState = ES_NULL_POINTER ;
    3406:	83 e0       	ldi	r24, 0x03	; 3
    3408:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuerrorState;
    340a:	89 81       	ldd	r24, Y+1	; 0x01
}
    340c:	0f 90       	pop	r0
    340e:	0f 90       	pop	r0
    3410:	0f 90       	pop	r0
    3412:	cf 91       	pop	r28
    3414:	df 91       	pop	r29
    3416:	08 95       	ret

00003418 <SIM_SendSMS>:

void SIM_SendSMS(u8 const *Copy_u8PhoneNumber, u8 const *Copy_u8SMS)
{
    3418:	0f 93       	push	r16
    341a:	1f 93       	push	r17
    341c:	df 93       	push	r29
    341e:	cf 93       	push	r28
    3420:	cd b7       	in	r28, 0x3d	; 61
    3422:	de b7       	in	r29, 0x3e	; 62
    3424:	c8 55       	subi	r28, 0x58	; 88
    3426:	d0 40       	sbci	r29, 0x00	; 0
    3428:	0f b6       	in	r0, 0x3f	; 63
    342a:	f8 94       	cli
    342c:	de bf       	out	0x3e, r29	; 62
    342e:	0f be       	out	0x3f, r0	; 63
    3430:	cd bf       	out	0x3d, r28	; 61
    3432:	fe 01       	movw	r30, r28
    3434:	eb 5a       	subi	r30, 0xAB	; 171
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	91 83       	std	Z+1, r25	; 0x01
    343a:	80 83       	st	Z, r24
    343c:	fe 01       	movw	r30, r28
    343e:	e9 5a       	subi	r30, 0xA9	; 169
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	71 83       	std	Z+1, r23	; 0x01
    3444:	60 83       	st	Z, r22
	SIM_voidSendCommand("AT+CMGF=1\r");
    3446:	8b e2       	ldi	r24, 0x2B	; 43
    3448:	91 e0       	ldi	r25, 0x01	; 1
    344a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
	UART_SendByteSynch(10);
    344e:	8a e0       	ldi	r24, 0x0A	; 10
    3450:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <UART_SendByteSynch>
    3454:	fe 01       	movw	r30, r28
    3456:	ef 5a       	subi	r30, 0xAF	; 175
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	a8 ec       	ldi	r26, 0xC8	; 200
    3460:	b2 e4       	ldi	r27, 0x42	; 66
    3462:	80 83       	st	Z, r24
    3464:	91 83       	std	Z+1, r25	; 0x01
    3466:	a2 83       	std	Z+2, r26	; 0x02
    3468:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    346a:	8e 01       	movw	r16, r28
    346c:	03 5b       	subi	r16, 0xB3	; 179
    346e:	1f 4f       	sbci	r17, 0xFF	; 255
    3470:	fe 01       	movw	r30, r28
    3472:	ef 5a       	subi	r30, 0xAF	; 175
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	60 81       	ld	r22, Z
    3478:	71 81       	ldd	r23, Z+1	; 0x01
    347a:	82 81       	ldd	r24, Z+2	; 0x02
    347c:	93 81       	ldd	r25, Z+3	; 0x03
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	4a e7       	ldi	r20, 0x7A	; 122
    3484:	55 e4       	ldi	r21, 0x45	; 69
    3486:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	f8 01       	movw	r30, r16
    3490:	80 83       	st	Z, r24
    3492:	91 83       	std	Z+1, r25	; 0x01
    3494:	a2 83       	std	Z+2, r26	; 0x02
    3496:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3498:	fe 01       	movw	r30, r28
    349a:	e3 5b       	subi	r30, 0xB3	; 179
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	60 81       	ld	r22, Z
    34a0:	71 81       	ldd	r23, Z+1	; 0x01
    34a2:	82 81       	ldd	r24, Z+2	; 0x02
    34a4:	93 81       	ldd	r25, Z+3	; 0x03
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	40 e8       	ldi	r20, 0x80	; 128
    34ac:	5f e3       	ldi	r21, 0x3F	; 63
    34ae:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    34b2:	88 23       	and	r24, r24
    34b4:	44 f4       	brge	.+16     	; 0x34c6 <SIM_SendSMS+0xae>
		__ticks = 1;
    34b6:	fe 01       	movw	r30, r28
    34b8:	e5 5b       	subi	r30, 0xB5	; 181
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	91 83       	std	Z+1, r25	; 0x01
    34c2:	80 83       	st	Z, r24
    34c4:	64 c0       	rjmp	.+200    	; 0x358e <SIM_SendSMS+0x176>
	else if (__tmp > 65535)
    34c6:	fe 01       	movw	r30, r28
    34c8:	e3 5b       	subi	r30, 0xB3	; 179
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	60 81       	ld	r22, Z
    34ce:	71 81       	ldd	r23, Z+1	; 0x01
    34d0:	82 81       	ldd	r24, Z+2	; 0x02
    34d2:	93 81       	ldd	r25, Z+3	; 0x03
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	3f ef       	ldi	r19, 0xFF	; 255
    34d8:	4f e7       	ldi	r20, 0x7F	; 127
    34da:	57 e4       	ldi	r21, 0x47	; 71
    34dc:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    34e0:	18 16       	cp	r1, r24
    34e2:	0c f0       	brlt	.+2      	; 0x34e6 <SIM_SendSMS+0xce>
    34e4:	43 c0       	rjmp	.+134    	; 0x356c <SIM_SendSMS+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e6:	fe 01       	movw	r30, r28
    34e8:	ef 5a       	subi	r30, 0xAF	; 175
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	60 81       	ld	r22, Z
    34ee:	71 81       	ldd	r23, Z+1	; 0x01
    34f0:	82 81       	ldd	r24, Z+2	; 0x02
    34f2:	93 81       	ldd	r25, Z+3	; 0x03
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 e2       	ldi	r20, 0x20	; 32
    34fa:	51 e4       	ldi	r21, 0x41	; 65
    34fc:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	8e 01       	movw	r16, r28
    3506:	05 5b       	subi	r16, 0xB5	; 181
    3508:	1f 4f       	sbci	r17, 0xFF	; 255
    350a:	bc 01       	movw	r22, r24
    350c:	cd 01       	movw	r24, r26
    350e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	f8 01       	movw	r30, r16
    3518:	91 83       	std	Z+1, r25	; 0x01
    351a:	80 83       	st	Z, r24
    351c:	1f c0       	rjmp	.+62     	; 0x355c <SIM_SendSMS+0x144>
    351e:	fe 01       	movw	r30, r28
    3520:	e7 5b       	subi	r30, 0xB7	; 183
    3522:	ff 4f       	sbci	r31, 0xFF	; 255
    3524:	80 e9       	ldi	r24, 0x90	; 144
    3526:	91 e0       	ldi	r25, 0x01	; 1
    3528:	91 83       	std	Z+1, r25	; 0x01
    352a:	80 83       	st	Z, r24
    352c:	fe 01       	movw	r30, r28
    352e:	e7 5b       	subi	r30, 0xB7	; 183
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	80 81       	ld	r24, Z
    3534:	91 81       	ldd	r25, Z+1	; 0x01
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	f1 f7       	brne	.-4      	; 0x3536 <SIM_SendSMS+0x11e>
    353a:	fe 01       	movw	r30, r28
    353c:	e7 5b       	subi	r30, 0xB7	; 183
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	91 83       	std	Z+1, r25	; 0x01
    3542:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3544:	de 01       	movw	r26, r28
    3546:	a5 5b       	subi	r26, 0xB5	; 181
    3548:	bf 4f       	sbci	r27, 0xFF	; 255
    354a:	fe 01       	movw	r30, r28
    354c:	e5 5b       	subi	r30, 0xB5	; 181
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	80 81       	ld	r24, Z
    3552:	91 81       	ldd	r25, Z+1	; 0x01
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	11 96       	adiw	r26, 0x01	; 1
    3558:	9c 93       	st	X, r25
    355a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355c:	fe 01       	movw	r30, r28
    355e:	e5 5b       	subi	r30, 0xB5	; 181
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	80 81       	ld	r24, Z
    3564:	91 81       	ldd	r25, Z+1	; 0x01
    3566:	00 97       	sbiw	r24, 0x00	; 0
    3568:	d1 f6       	brne	.-76     	; 0x351e <SIM_SendSMS+0x106>
    356a:	27 c0       	rjmp	.+78     	; 0x35ba <SIM_SendSMS+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    356c:	8e 01       	movw	r16, r28
    356e:	05 5b       	subi	r16, 0xB5	; 181
    3570:	1f 4f       	sbci	r17, 0xFF	; 255
    3572:	fe 01       	movw	r30, r28
    3574:	e3 5b       	subi	r30, 0xB3	; 179
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	60 81       	ld	r22, Z
    357a:	71 81       	ldd	r23, Z+1	; 0x01
    357c:	82 81       	ldd	r24, Z+2	; 0x02
    357e:	93 81       	ldd	r25, Z+3	; 0x03
    3580:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	f8 01       	movw	r30, r16
    358a:	91 83       	std	Z+1, r25	; 0x01
    358c:	80 83       	st	Z, r24
    358e:	de 01       	movw	r26, r28
    3590:	a9 5b       	subi	r26, 0xB9	; 185
    3592:	bf 4f       	sbci	r27, 0xFF	; 255
    3594:	fe 01       	movw	r30, r28
    3596:	e5 5b       	subi	r30, 0xB5	; 181
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	80 81       	ld	r24, Z
    359c:	91 81       	ldd	r25, Z+1	; 0x01
    359e:	8d 93       	st	X+, r24
    35a0:	9c 93       	st	X, r25
    35a2:	fe 01       	movw	r30, r28
    35a4:	e9 5b       	subi	r30, 0xB9	; 185
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	80 81       	ld	r24, Z
    35aa:	91 81       	ldd	r25, Z+1	; 0x01
    35ac:	01 97       	sbiw	r24, 0x01	; 1
    35ae:	f1 f7       	brne	.-4      	; 0x35ac <SIM_SendSMS+0x194>
    35b0:	fe 01       	movw	r30, r28
    35b2:	e9 5b       	subi	r30, 0xB9	; 185
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	91 83       	std	Z+1, r25	; 0x01
    35b8:	80 83       	st	Z, r24
	_delay_ms(100);
	SIM_voidSendCommand("AT+CMGS=\"");
    35ba:	86 e3       	ldi	r24, 0x36	; 54
    35bc:	91 e0       	ldi	r25, 0x01	; 1
    35be:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
	UART_SendByteSynch(10);
    35c2:	8a e0       	ldi	r24, 0x0A	; 10
    35c4:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <UART_SendByteSynch>
    35c8:	fe 01       	movw	r30, r28
    35ca:	ed 5b       	subi	r30, 0xBD	; 189
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	a8 ec       	ldi	r26, 0xC8	; 200
    35d4:	b2 e4       	ldi	r27, 0x42	; 66
    35d6:	80 83       	st	Z, r24
    35d8:	91 83       	std	Z+1, r25	; 0x01
    35da:	a2 83       	std	Z+2, r26	; 0x02
    35dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35de:	8e 01       	movw	r16, r28
    35e0:	01 5c       	subi	r16, 0xC1	; 193
    35e2:	1f 4f       	sbci	r17, 0xFF	; 255
    35e4:	fe 01       	movw	r30, r28
    35e6:	ed 5b       	subi	r30, 0xBD	; 189
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	60 81       	ld	r22, Z
    35ec:	71 81       	ldd	r23, Z+1	; 0x01
    35ee:	82 81       	ldd	r24, Z+2	; 0x02
    35f0:	93 81       	ldd	r25, Z+3	; 0x03
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	4a e7       	ldi	r20, 0x7A	; 122
    35f8:	55 e4       	ldi	r21, 0x45	; 69
    35fa:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	f8 01       	movw	r30, r16
    3604:	80 83       	st	Z, r24
    3606:	91 83       	std	Z+1, r25	; 0x01
    3608:	a2 83       	std	Z+2, r26	; 0x02
    360a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    360c:	fe 01       	movw	r30, r28
    360e:	ff 96       	adiw	r30, 0x3f	; 63
    3610:	60 81       	ld	r22, Z
    3612:	71 81       	ldd	r23, Z+1	; 0x01
    3614:	82 81       	ldd	r24, Z+2	; 0x02
    3616:	93 81       	ldd	r25, Z+3	; 0x03
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	40 e8       	ldi	r20, 0x80	; 128
    361e:	5f e3       	ldi	r21, 0x3F	; 63
    3620:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    3624:	88 23       	and	r24, r24
    3626:	2c f4       	brge	.+10     	; 0x3632 <SIM_SendSMS+0x21a>
		__ticks = 1;
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	9e af       	std	Y+62, r25	; 0x3e
    362e:	8d af       	std	Y+61, r24	; 0x3d
    3630:	46 c0       	rjmp	.+140    	; 0x36be <SIM_SendSMS+0x2a6>
	else if (__tmp > 65535)
    3632:	fe 01       	movw	r30, r28
    3634:	ff 96       	adiw	r30, 0x3f	; 63
    3636:	60 81       	ld	r22, Z
    3638:	71 81       	ldd	r23, Z+1	; 0x01
    363a:	82 81       	ldd	r24, Z+2	; 0x02
    363c:	93 81       	ldd	r25, Z+3	; 0x03
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	3f ef       	ldi	r19, 0xFF	; 255
    3642:	4f e7       	ldi	r20, 0x7F	; 127
    3644:	57 e4       	ldi	r21, 0x47	; 71
    3646:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    364a:	18 16       	cp	r1, r24
    364c:	64 f5       	brge	.+88     	; 0x36a6 <SIM_SendSMS+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364e:	fe 01       	movw	r30, r28
    3650:	ed 5b       	subi	r30, 0xBD	; 189
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	60 81       	ld	r22, Z
    3656:	71 81       	ldd	r23, Z+1	; 0x01
    3658:	82 81       	ldd	r24, Z+2	; 0x02
    365a:	93 81       	ldd	r25, Z+3	; 0x03
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	40 e2       	ldi	r20, 0x20	; 32
    3662:	51 e4       	ldi	r21, 0x41	; 65
    3664:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3668:	dc 01       	movw	r26, r24
    366a:	cb 01       	movw	r24, r22
    366c:	bc 01       	movw	r22, r24
    366e:	cd 01       	movw	r24, r26
    3670:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	9e af       	std	Y+62, r25	; 0x3e
    367a:	8d af       	std	Y+61, r24	; 0x3d
    367c:	0f c0       	rjmp	.+30     	; 0x369c <SIM_SendSMS+0x284>
    367e:	80 e9       	ldi	r24, 0x90	; 144
    3680:	91 e0       	ldi	r25, 0x01	; 1
    3682:	9c af       	std	Y+60, r25	; 0x3c
    3684:	8b af       	std	Y+59, r24	; 0x3b
    3686:	8b ad       	ldd	r24, Y+59	; 0x3b
    3688:	9c ad       	ldd	r25, Y+60	; 0x3c
    368a:	01 97       	sbiw	r24, 0x01	; 1
    368c:	f1 f7       	brne	.-4      	; 0x368a <SIM_SendSMS+0x272>
    368e:	9c af       	std	Y+60, r25	; 0x3c
    3690:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3692:	8d ad       	ldd	r24, Y+61	; 0x3d
    3694:	9e ad       	ldd	r25, Y+62	; 0x3e
    3696:	01 97       	sbiw	r24, 0x01	; 1
    3698:	9e af       	std	Y+62, r25	; 0x3e
    369a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    369c:	8d ad       	ldd	r24, Y+61	; 0x3d
    369e:	9e ad       	ldd	r25, Y+62	; 0x3e
    36a0:	00 97       	sbiw	r24, 0x00	; 0
    36a2:	69 f7       	brne	.-38     	; 0x367e <SIM_SendSMS+0x266>
    36a4:	16 c0       	rjmp	.+44     	; 0x36d2 <SIM_SendSMS+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a6:	fe 01       	movw	r30, r28
    36a8:	ff 96       	adiw	r30, 0x3f	; 63
    36aa:	60 81       	ld	r22, Z
    36ac:	71 81       	ldd	r23, Z+1	; 0x01
    36ae:	82 81       	ldd	r24, Z+2	; 0x02
    36b0:	93 81       	ldd	r25, Z+3	; 0x03
    36b2:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	9e af       	std	Y+62, r25	; 0x3e
    36bc:	8d af       	std	Y+61, r24	; 0x3d
    36be:	8d ad       	ldd	r24, Y+61	; 0x3d
    36c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    36c2:	9a af       	std	Y+58, r25	; 0x3a
    36c4:	89 af       	std	Y+57, r24	; 0x39
    36c6:	89 ad       	ldd	r24, Y+57	; 0x39
    36c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    36ca:	01 97       	sbiw	r24, 0x01	; 1
    36cc:	f1 f7       	brne	.-4      	; 0x36ca <SIM_SendSMS+0x2b2>
    36ce:	9a af       	std	Y+58, r25	; 0x3a
    36d0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);
	SIM_voidSendCommand(Copy_u8PhoneNumber);
    36d2:	fe 01       	movw	r30, r28
    36d4:	eb 5a       	subi	r30, 0xAB	; 171
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	80 81       	ld	r24, Z
    36da:	91 81       	ldd	r25, Z+1	; 0x01
    36dc:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
	UART_SendByteSynch(10);
    36e0:	8a e0       	ldi	r24, 0x0A	; 10
    36e2:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <UART_SendByteSynch>
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	a8 ec       	ldi	r26, 0xC8	; 200
    36ec:	b2 e4       	ldi	r27, 0x42	; 66
    36ee:	8d ab       	std	Y+53, r24	; 0x35
    36f0:	9e ab       	std	Y+54, r25	; 0x36
    36f2:	af ab       	std	Y+55, r26	; 0x37
    36f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f6:	6d a9       	ldd	r22, Y+53	; 0x35
    36f8:	7e a9       	ldd	r23, Y+54	; 0x36
    36fa:	8f a9       	ldd	r24, Y+55	; 0x37
    36fc:	98 ad       	ldd	r25, Y+56	; 0x38
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	4a e7       	ldi	r20, 0x7A	; 122
    3704:	55 e4       	ldi	r21, 0x45	; 69
    3706:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    370a:	dc 01       	movw	r26, r24
    370c:	cb 01       	movw	r24, r22
    370e:	89 ab       	std	Y+49, r24	; 0x31
    3710:	9a ab       	std	Y+50, r25	; 0x32
    3712:	ab ab       	std	Y+51, r26	; 0x33
    3714:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3716:	69 a9       	ldd	r22, Y+49	; 0x31
    3718:	7a a9       	ldd	r23, Y+50	; 0x32
    371a:	8b a9       	ldd	r24, Y+51	; 0x33
    371c:	9c a9       	ldd	r25, Y+52	; 0x34
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	40 e8       	ldi	r20, 0x80	; 128
    3724:	5f e3       	ldi	r21, 0x3F	; 63
    3726:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    372a:	88 23       	and	r24, r24
    372c:	2c f4       	brge	.+10     	; 0x3738 <SIM_SendSMS+0x320>
		__ticks = 1;
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	98 ab       	std	Y+48, r25	; 0x30
    3734:	8f a7       	std	Y+47, r24	; 0x2f
    3736:	3f c0       	rjmp	.+126    	; 0x37b6 <SIM_SendSMS+0x39e>
	else if (__tmp > 65535)
    3738:	69 a9       	ldd	r22, Y+49	; 0x31
    373a:	7a a9       	ldd	r23, Y+50	; 0x32
    373c:	8b a9       	ldd	r24, Y+51	; 0x33
    373e:	9c a9       	ldd	r25, Y+52	; 0x34
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	3f ef       	ldi	r19, 0xFF	; 255
    3744:	4f e7       	ldi	r20, 0x7F	; 127
    3746:	57 e4       	ldi	r21, 0x47	; 71
    3748:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    374c:	18 16       	cp	r1, r24
    374e:	4c f5       	brge	.+82     	; 0x37a2 <SIM_SendSMS+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3750:	6d a9       	ldd	r22, Y+53	; 0x35
    3752:	7e a9       	ldd	r23, Y+54	; 0x36
    3754:	8f a9       	ldd	r24, Y+55	; 0x37
    3756:	98 ad       	ldd	r25, Y+56	; 0x38
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	40 e2       	ldi	r20, 0x20	; 32
    375e:	51 e4       	ldi	r21, 0x41	; 65
    3760:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	bc 01       	movw	r22, r24
    376a:	cd 01       	movw	r24, r26
    376c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	98 ab       	std	Y+48, r25	; 0x30
    3776:	8f a7       	std	Y+47, r24	; 0x2f
    3778:	0f c0       	rjmp	.+30     	; 0x3798 <SIM_SendSMS+0x380>
    377a:	80 e9       	ldi	r24, 0x90	; 144
    377c:	91 e0       	ldi	r25, 0x01	; 1
    377e:	9e a7       	std	Y+46, r25	; 0x2e
    3780:	8d a7       	std	Y+45, r24	; 0x2d
    3782:	8d a5       	ldd	r24, Y+45	; 0x2d
    3784:	9e a5       	ldd	r25, Y+46	; 0x2e
    3786:	01 97       	sbiw	r24, 0x01	; 1
    3788:	f1 f7       	brne	.-4      	; 0x3786 <SIM_SendSMS+0x36e>
    378a:	9e a7       	std	Y+46, r25	; 0x2e
    378c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    378e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3790:	98 a9       	ldd	r25, Y+48	; 0x30
    3792:	01 97       	sbiw	r24, 0x01	; 1
    3794:	98 ab       	std	Y+48, r25	; 0x30
    3796:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3798:	8f a5       	ldd	r24, Y+47	; 0x2f
    379a:	98 a9       	ldd	r25, Y+48	; 0x30
    379c:	00 97       	sbiw	r24, 0x00	; 0
    379e:	69 f7       	brne	.-38     	; 0x377a <SIM_SendSMS+0x362>
    37a0:	14 c0       	rjmp	.+40     	; 0x37ca <SIM_SendSMS+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a2:	69 a9       	ldd	r22, Y+49	; 0x31
    37a4:	7a a9       	ldd	r23, Y+50	; 0x32
    37a6:	8b a9       	ldd	r24, Y+51	; 0x33
    37a8:	9c a9       	ldd	r25, Y+52	; 0x34
    37aa:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	98 ab       	std	Y+48, r25	; 0x30
    37b4:	8f a7       	std	Y+47, r24	; 0x2f
    37b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    37b8:	98 a9       	ldd	r25, Y+48	; 0x30
    37ba:	9c a7       	std	Y+44, r25	; 0x2c
    37bc:	8b a7       	std	Y+43, r24	; 0x2b
    37be:	8b a5       	ldd	r24, Y+43	; 0x2b
    37c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    37c2:	01 97       	sbiw	r24, 0x01	; 1
    37c4:	f1 f7       	brne	.-4      	; 0x37c2 <SIM_SendSMS+0x3aa>
    37c6:	9c a7       	std	Y+44, r25	; 0x2c
    37c8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	SIM_voidSendCommand("\"\r");
    37ca:	80 e4       	ldi	r24, 0x40	; 64
    37cc:	91 e0       	ldi	r25, 0x01	; 1
    37ce:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
	UART_SendByteSynch(10);
    37d2:	8a e0       	ldi	r24, 0x0A	; 10
    37d4:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <UART_SendByteSynch>
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	a8 ec       	ldi	r26, 0xC8	; 200
    37de:	b2 e4       	ldi	r27, 0x42	; 66
    37e0:	8f a3       	std	Y+39, r24	; 0x27
    37e2:	98 a7       	std	Y+40, r25	; 0x28
    37e4:	a9 a7       	std	Y+41, r26	; 0x29
    37e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e8:	6f a1       	ldd	r22, Y+39	; 0x27
    37ea:	78 a5       	ldd	r23, Y+40	; 0x28
    37ec:	89 a5       	ldd	r24, Y+41	; 0x29
    37ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	4a e7       	ldi	r20, 0x7A	; 122
    37f6:	55 e4       	ldi	r21, 0x45	; 69
    37f8:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	8b a3       	std	Y+35, r24	; 0x23
    3802:	9c a3       	std	Y+36, r25	; 0x24
    3804:	ad a3       	std	Y+37, r26	; 0x25
    3806:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3808:	6b a1       	ldd	r22, Y+35	; 0x23
    380a:	7c a1       	ldd	r23, Y+36	; 0x24
    380c:	8d a1       	ldd	r24, Y+37	; 0x25
    380e:	9e a1       	ldd	r25, Y+38	; 0x26
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	40 e8       	ldi	r20, 0x80	; 128
    3816:	5f e3       	ldi	r21, 0x3F	; 63
    3818:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    381c:	88 23       	and	r24, r24
    381e:	2c f4       	brge	.+10     	; 0x382a <SIM_SendSMS+0x412>
		__ticks = 1;
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	9a a3       	std	Y+34, r25	; 0x22
    3826:	89 a3       	std	Y+33, r24	; 0x21
    3828:	3f c0       	rjmp	.+126    	; 0x38a8 <SIM_SendSMS+0x490>
	else if (__tmp > 65535)
    382a:	6b a1       	ldd	r22, Y+35	; 0x23
    382c:	7c a1       	ldd	r23, Y+36	; 0x24
    382e:	8d a1       	ldd	r24, Y+37	; 0x25
    3830:	9e a1       	ldd	r25, Y+38	; 0x26
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	3f ef       	ldi	r19, 0xFF	; 255
    3836:	4f e7       	ldi	r20, 0x7F	; 127
    3838:	57 e4       	ldi	r21, 0x47	; 71
    383a:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    383e:	18 16       	cp	r1, r24
    3840:	4c f5       	brge	.+82     	; 0x3894 <SIM_SendSMS+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3842:	6f a1       	ldd	r22, Y+39	; 0x27
    3844:	78 a5       	ldd	r23, Y+40	; 0x28
    3846:	89 a5       	ldd	r24, Y+41	; 0x29
    3848:	9a a5       	ldd	r25, Y+42	; 0x2a
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	40 e2       	ldi	r20, 0x20	; 32
    3850:	51 e4       	ldi	r21, 0x41	; 65
    3852:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	9a a3       	std	Y+34, r25	; 0x22
    3868:	89 a3       	std	Y+33, r24	; 0x21
    386a:	0f c0       	rjmp	.+30     	; 0x388a <SIM_SendSMS+0x472>
    386c:	80 e9       	ldi	r24, 0x90	; 144
    386e:	91 e0       	ldi	r25, 0x01	; 1
    3870:	98 a3       	std	Y+32, r25	; 0x20
    3872:	8f 8f       	std	Y+31, r24	; 0x1f
    3874:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3876:	98 a1       	ldd	r25, Y+32	; 0x20
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	f1 f7       	brne	.-4      	; 0x3878 <SIM_SendSMS+0x460>
    387c:	98 a3       	std	Y+32, r25	; 0x20
    387e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3880:	89 a1       	ldd	r24, Y+33	; 0x21
    3882:	9a a1       	ldd	r25, Y+34	; 0x22
    3884:	01 97       	sbiw	r24, 0x01	; 1
    3886:	9a a3       	std	Y+34, r25	; 0x22
    3888:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    388a:	89 a1       	ldd	r24, Y+33	; 0x21
    388c:	9a a1       	ldd	r25, Y+34	; 0x22
    388e:	00 97       	sbiw	r24, 0x00	; 0
    3890:	69 f7       	brne	.-38     	; 0x386c <SIM_SendSMS+0x454>
    3892:	14 c0       	rjmp	.+40     	; 0x38bc <SIM_SendSMS+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3894:	6b a1       	ldd	r22, Y+35	; 0x23
    3896:	7c a1       	ldd	r23, Y+36	; 0x24
    3898:	8d a1       	ldd	r24, Y+37	; 0x25
    389a:	9e a1       	ldd	r25, Y+38	; 0x26
    389c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	9a a3       	std	Y+34, r25	; 0x22
    38a6:	89 a3       	std	Y+33, r24	; 0x21
    38a8:	89 a1       	ldd	r24, Y+33	; 0x21
    38aa:	9a a1       	ldd	r25, Y+34	; 0x22
    38ac:	9e 8f       	std	Y+30, r25	; 0x1e
    38ae:	8d 8f       	std	Y+29, r24	; 0x1d
    38b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38b4:	01 97       	sbiw	r24, 0x01	; 1
    38b6:	f1 f7       	brne	.-4      	; 0x38b4 <SIM_SendSMS+0x49c>
    38b8:	9e 8f       	std	Y+30, r25	; 0x1e
    38ba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	SIM_voidSendCommand(Copy_u8SMS);
    38bc:	fe 01       	movw	r30, r28
    38be:	e9 5a       	subi	r30, 0xA9	; 169
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	80 81       	ld	r24, Z
    38c4:	91 81       	ldd	r25, Z+1	; 0x01
    38c6:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
	UART_SendByteSynch(10);
    38ca:	8a e0       	ldi	r24, 0x0A	; 10
    38cc:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <UART_SendByteSynch>
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	a8 ec       	ldi	r26, 0xC8	; 200
    38d6:	b2 e4       	ldi	r27, 0x42	; 66
    38d8:	89 8f       	std	Y+25, r24	; 0x19
    38da:	9a 8f       	std	Y+26, r25	; 0x1a
    38dc:	ab 8f       	std	Y+27, r26	; 0x1b
    38de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e0:	69 8d       	ldd	r22, Y+25	; 0x19
    38e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	4a e7       	ldi	r20, 0x7A	; 122
    38ee:	55 e4       	ldi	r21, 0x45	; 69
    38f0:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    38f4:	dc 01       	movw	r26, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	8d 8b       	std	Y+21, r24	; 0x15
    38fa:	9e 8b       	std	Y+22, r25	; 0x16
    38fc:	af 8b       	std	Y+23, r26	; 0x17
    38fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3900:	6d 89       	ldd	r22, Y+21	; 0x15
    3902:	7e 89       	ldd	r23, Y+22	; 0x16
    3904:	8f 89       	ldd	r24, Y+23	; 0x17
    3906:	98 8d       	ldd	r25, Y+24	; 0x18
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	40 e8       	ldi	r20, 0x80	; 128
    390e:	5f e3       	ldi	r21, 0x3F	; 63
    3910:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    3914:	88 23       	and	r24, r24
    3916:	2c f4       	brge	.+10     	; 0x3922 <SIM_SendSMS+0x50a>
		__ticks = 1;
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	9c 8b       	std	Y+20, r25	; 0x14
    391e:	8b 8b       	std	Y+19, r24	; 0x13
    3920:	3f c0       	rjmp	.+126    	; 0x39a0 <SIM_SendSMS+0x588>
	else if (__tmp > 65535)
    3922:	6d 89       	ldd	r22, Y+21	; 0x15
    3924:	7e 89       	ldd	r23, Y+22	; 0x16
    3926:	8f 89       	ldd	r24, Y+23	; 0x17
    3928:	98 8d       	ldd	r25, Y+24	; 0x18
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	3f ef       	ldi	r19, 0xFF	; 255
    392e:	4f e7       	ldi	r20, 0x7F	; 127
    3930:	57 e4       	ldi	r21, 0x47	; 71
    3932:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    3936:	18 16       	cp	r1, r24
    3938:	4c f5       	brge	.+82     	; 0x398c <SIM_SendSMS+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393a:	69 8d       	ldd	r22, Y+25	; 0x19
    393c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    393e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3940:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	40 e2       	ldi	r20, 0x20	; 32
    3948:	51 e4       	ldi	r21, 0x41	; 65
    394a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	bc 01       	movw	r22, r24
    3954:	cd 01       	movw	r24, r26
    3956:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    395a:	dc 01       	movw	r26, r24
    395c:	cb 01       	movw	r24, r22
    395e:	9c 8b       	std	Y+20, r25	; 0x14
    3960:	8b 8b       	std	Y+19, r24	; 0x13
    3962:	0f c0       	rjmp	.+30     	; 0x3982 <SIM_SendSMS+0x56a>
    3964:	80 e9       	ldi	r24, 0x90	; 144
    3966:	91 e0       	ldi	r25, 0x01	; 1
    3968:	9a 8b       	std	Y+18, r25	; 0x12
    396a:	89 8b       	std	Y+17, r24	; 0x11
    396c:	89 89       	ldd	r24, Y+17	; 0x11
    396e:	9a 89       	ldd	r25, Y+18	; 0x12
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	f1 f7       	brne	.-4      	; 0x3970 <SIM_SendSMS+0x558>
    3974:	9a 8b       	std	Y+18, r25	; 0x12
    3976:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3978:	8b 89       	ldd	r24, Y+19	; 0x13
    397a:	9c 89       	ldd	r25, Y+20	; 0x14
    397c:	01 97       	sbiw	r24, 0x01	; 1
    397e:	9c 8b       	std	Y+20, r25	; 0x14
    3980:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3982:	8b 89       	ldd	r24, Y+19	; 0x13
    3984:	9c 89       	ldd	r25, Y+20	; 0x14
    3986:	00 97       	sbiw	r24, 0x00	; 0
    3988:	69 f7       	brne	.-38     	; 0x3964 <SIM_SendSMS+0x54c>
    398a:	14 c0       	rjmp	.+40     	; 0x39b4 <SIM_SendSMS+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398c:	6d 89       	ldd	r22, Y+21	; 0x15
    398e:	7e 89       	ldd	r23, Y+22	; 0x16
    3990:	8f 89       	ldd	r24, Y+23	; 0x17
    3992:	98 8d       	ldd	r25, Y+24	; 0x18
    3994:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3998:	dc 01       	movw	r26, r24
    399a:	cb 01       	movw	r24, r22
    399c:	9c 8b       	std	Y+20, r25	; 0x14
    399e:	8b 8b       	std	Y+19, r24	; 0x13
    39a0:	8b 89       	ldd	r24, Y+19	; 0x13
    39a2:	9c 89       	ldd	r25, Y+20	; 0x14
    39a4:	98 8b       	std	Y+16, r25	; 0x10
    39a6:	8f 87       	std	Y+15, r24	; 0x0f
    39a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    39aa:	98 89       	ldd	r25, Y+16	; 0x10
    39ac:	01 97       	sbiw	r24, 0x01	; 1
    39ae:	f1 f7       	brne	.-4      	; 0x39ac <SIM_SendSMS+0x594>
    39b0:	98 8b       	std	Y+16, r25	; 0x10
    39b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	SIM_voidSendCommand("\r");
    39b4:	83 e4       	ldi	r24, 0x43	; 67
    39b6:	91 e0       	ldi	r25, 0x01	; 1
    39b8:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
	UART_SendByteSynch(10);
    39bc:	8a e0       	ldi	r24, 0x0A	; 10
    39be:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <UART_SendByteSynch>
    39c2:	80 e0       	ldi	r24, 0x00	; 0
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	a8 ec       	ldi	r26, 0xC8	; 200
    39c8:	b2 e4       	ldi	r27, 0x42	; 66
    39ca:	8b 87       	std	Y+11, r24	; 0x0b
    39cc:	9c 87       	std	Y+12, r25	; 0x0c
    39ce:	ad 87       	std	Y+13, r26	; 0x0d
    39d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    39d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    39d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    39d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	4a e7       	ldi	r20, 0x7A	; 122
    39e0:	55 e4       	ldi	r21, 0x45	; 69
    39e2:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    39e6:	dc 01       	movw	r26, r24
    39e8:	cb 01       	movw	r24, r22
    39ea:	8f 83       	std	Y+7, r24	; 0x07
    39ec:	98 87       	std	Y+8, r25	; 0x08
    39ee:	a9 87       	std	Y+9, r26	; 0x09
    39f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39f2:	6f 81       	ldd	r22, Y+7	; 0x07
    39f4:	78 85       	ldd	r23, Y+8	; 0x08
    39f6:	89 85       	ldd	r24, Y+9	; 0x09
    39f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	40 e8       	ldi	r20, 0x80	; 128
    3a00:	5f e3       	ldi	r21, 0x3F	; 63
    3a02:	0e 94 97 03 	call	0x72e	; 0x72e <__ltsf2>
    3a06:	88 23       	and	r24, r24
    3a08:	2c f4       	brge	.+10     	; 0x3a14 <SIM_SendSMS+0x5fc>
		__ticks = 1;
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	9e 83       	std	Y+6, r25	; 0x06
    3a10:	8d 83       	std	Y+5, r24	; 0x05
    3a12:	3f c0       	rjmp	.+126    	; 0x3a92 <SIM_SendSMS+0x67a>
	else if (__tmp > 65535)
    3a14:	6f 81       	ldd	r22, Y+7	; 0x07
    3a16:	78 85       	ldd	r23, Y+8	; 0x08
    3a18:	89 85       	ldd	r24, Y+9	; 0x09
    3a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	3f ef       	ldi	r19, 0xFF	; 255
    3a20:	4f e7       	ldi	r20, 0x7F	; 127
    3a22:	57 e4       	ldi	r21, 0x47	; 71
    3a24:	0e 94 37 03 	call	0x66e	; 0x66e <__gtsf2>
    3a28:	18 16       	cp	r1, r24
    3a2a:	4c f5       	brge	.+82     	; 0x3a7e <SIM_SendSMS+0x666>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	40 e2       	ldi	r20, 0x20	; 32
    3a3a:	51 e4       	ldi	r21, 0x41	; 65
    3a3c:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3a40:	dc 01       	movw	r26, r24
    3a42:	cb 01       	movw	r24, r22
    3a44:	bc 01       	movw	r22, r24
    3a46:	cd 01       	movw	r24, r26
    3a48:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	9e 83       	std	Y+6, r25	; 0x06
    3a52:	8d 83       	std	Y+5, r24	; 0x05
    3a54:	0f c0       	rjmp	.+30     	; 0x3a74 <SIM_SendSMS+0x65c>
    3a56:	80 e9       	ldi	r24, 0x90	; 144
    3a58:	91 e0       	ldi	r25, 0x01	; 1
    3a5a:	9c 83       	std	Y+4, r25	; 0x04
    3a5c:	8b 83       	std	Y+3, r24	; 0x03
    3a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a60:	9c 81       	ldd	r25, Y+4	; 0x04
    3a62:	01 97       	sbiw	r24, 0x01	; 1
    3a64:	f1 f7       	brne	.-4      	; 0x3a62 <SIM_SendSMS+0x64a>
    3a66:	9c 83       	std	Y+4, r25	; 0x04
    3a68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a6e:	01 97       	sbiw	r24, 0x01	; 1
    3a70:	9e 83       	std	Y+6, r25	; 0x06
    3a72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a74:	8d 81       	ldd	r24, Y+5	; 0x05
    3a76:	9e 81       	ldd	r25, Y+6	; 0x06
    3a78:	00 97       	sbiw	r24, 0x00	; 0
    3a7a:	69 f7       	brne	.-38     	; 0x3a56 <SIM_SendSMS+0x63e>
    3a7c:	14 c0       	rjmp	.+40     	; 0x3aa6 <SIM_SendSMS+0x68e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a80:	78 85       	ldd	r23, Y+8	; 0x08
    3a82:	89 85       	ldd	r24, Y+9	; 0x09
    3a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a86:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3a8a:	dc 01       	movw	r26, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	9e 83       	std	Y+6, r25	; 0x06
    3a90:	8d 83       	std	Y+5, r24	; 0x05
    3a92:	8d 81       	ldd	r24, Y+5	; 0x05
    3a94:	9e 81       	ldd	r25, Y+6	; 0x06
    3a96:	9a 83       	std	Y+2, r25	; 0x02
    3a98:	89 83       	std	Y+1, r24	; 0x01
    3a9a:	89 81       	ldd	r24, Y+1	; 0x01
    3a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a9e:	01 97       	sbiw	r24, 0x01	; 1
    3aa0:	f1 f7       	brne	.-4      	; 0x3a9e <SIM_SendSMS+0x686>
    3aa2:	9a 83       	std	Y+2, r25	; 0x02
    3aa4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

}
    3aa6:	c8 5a       	subi	r28, 0xA8	; 168
    3aa8:	df 4f       	sbci	r29, 0xFF	; 255
    3aaa:	0f b6       	in	r0, 0x3f	; 63
    3aac:	f8 94       	cli
    3aae:	de bf       	out	0x3e, r29	; 62
    3ab0:	0f be       	out	0x3f, r0	; 63
    3ab2:	cd bf       	out	0x3d, r28	; 61
    3ab4:	cf 91       	pop	r28
    3ab6:	df 91       	pop	r29
    3ab8:	1f 91       	pop	r17
    3aba:	0f 91       	pop	r16
    3abc:	08 95       	ret

00003abe <SIM_MakeCall>:

void SIM_MakeCall(u8 *Copy_u8PhoneNumber)
{
    3abe:	df 93       	push	r29
    3ac0:	cf 93       	push	r28
    3ac2:	00 d0       	rcall	.+0      	; 0x3ac4 <SIM_MakeCall+0x6>
    3ac4:	cd b7       	in	r28, 0x3d	; 61
    3ac6:	de b7       	in	r29, 0x3e	; 62
    3ac8:	9a 83       	std	Y+2, r25	; 0x02
    3aca:	89 83       	std	Y+1, r24	; 0x01
	SIM_voidSendCommand("ATD");
    3acc:	8c ea       	ldi	r24, 0xAC	; 172
    3ace:	91 e0       	ldi	r25, 0x01	; 1
    3ad0:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
	//_delay_ms(10);
	SIM_voidSendCommand(Copy_u8PhoneNumber);
    3ad4:	89 81       	ldd	r24, Y+1	; 0x01
    3ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad8:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
	//_delay_ms(10);
	SIM_voidSendCommand(";\r\n");
    3adc:	80 eb       	ldi	r24, 0xB0	; 176
    3ade:	91 e0       	ldi	r25, 0x01	; 1
    3ae0:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <SIM_voidSendCommand>
}
    3ae4:	0f 90       	pop	r0
    3ae6:	0f 90       	pop	r0
    3ae8:	cf 91       	pop	r28
    3aea:	df 91       	pop	r29
    3aec:	08 95       	ret

00003aee <LCD_Init>:
#include "TopWayLCD_Interface.h"
#include "avr/delay.h"


void LCD_Init()
{
    3aee:	df 93       	push	r29
    3af0:	cf 93       	push	r28
    3af2:	cd b7       	in	r28, 0x3d	; 61
    3af4:	de b7       	in	r29, 0x3e	; 62
	UART_voidInit();
    3af6:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <UART_voidInit>
}
    3afa:	cf 91       	pop	r28
    3afc:	df 91       	pop	r29
    3afe:	08 95       	ret

00003b00 <LCD_SendNum16>:

void LCD_SendNum16(u32 Copy_u32Address , u16 Copy_u16Num)
{
    3b00:	df 93       	push	r29
    3b02:	cf 93       	push	r28
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    3b08:	2c 97       	sbiw	r28, 0x0c	; 12
    3b0a:	0f b6       	in	r0, 0x3f	; 63
    3b0c:	f8 94       	cli
    3b0e:	de bf       	out	0x3e, r29	; 62
    3b10:	0f be       	out	0x3f, r0	; 63
    3b12:	cd bf       	out	0x3d, r28	; 61
    3b14:	6f 83       	std	Y+7, r22	; 0x07
    3b16:	78 87       	std	Y+8, r23	; 0x08
    3b18:	89 87       	std	Y+9, r24	; 0x09
    3b1a:	9a 87       	std	Y+10, r25	; 0x0a
    3b1c:	5c 87       	std	Y+12, r21	; 0x0c
    3b1e:	4b 87       	std	Y+11, r20	; 0x0b
	u8 add_B1 = (u8)Copy_u32Address;
    3b20:	8f 81       	ldd	r24, Y+7	; 0x07
    3b22:	8e 83       	std	Y+6, r24	; 0x06
	u8 add_B2 = (u8)(Copy_u32Address >> 8);
    3b24:	8f 81       	ldd	r24, Y+7	; 0x07
    3b26:	98 85       	ldd	r25, Y+8	; 0x08
    3b28:	a9 85       	ldd	r26, Y+9	; 0x09
    3b2a:	ba 85       	ldd	r27, Y+10	; 0x0a
    3b2c:	89 2f       	mov	r24, r25
    3b2e:	9a 2f       	mov	r25, r26
    3b30:	ab 2f       	mov	r26, r27
    3b32:	bb 27       	eor	r27, r27
    3b34:	8d 83       	std	Y+5, r24	; 0x05
	u8 add_B3 = (u8)(Copy_u32Address >> 16);
    3b36:	8f 81       	ldd	r24, Y+7	; 0x07
    3b38:	98 85       	ldd	r25, Y+8	; 0x08
    3b3a:	a9 85       	ldd	r26, Y+9	; 0x09
    3b3c:	ba 85       	ldd	r27, Y+10	; 0x0a
    3b3e:	cd 01       	movw	r24, r26
    3b40:	aa 27       	eor	r26, r26
    3b42:	bb 27       	eor	r27, r27
    3b44:	8c 83       	std	Y+4, r24	; 0x04
	u8 add_B4 = (u8)(Copy_u32Address >> 24);
    3b46:	8f 81       	ldd	r24, Y+7	; 0x07
    3b48:	98 85       	ldd	r25, Y+8	; 0x08
    3b4a:	a9 85       	ldd	r26, Y+9	; 0x09
    3b4c:	ba 85       	ldd	r27, Y+10	; 0x0a
    3b4e:	8b 2f       	mov	r24, r27
    3b50:	99 27       	eor	r25, r25
    3b52:	aa 27       	eor	r26, r26
    3b54:	bb 27       	eor	r27, r27
    3b56:	8b 83       	std	Y+3, r24	; 0x03

	u8 data_B1 = (u8)Copy_u16Num;
    3b58:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b5a:	8a 83       	std	Y+2, r24	; 0x02
	u8 data_B2 = (u8)(Copy_u16Num >> 8);
    3b5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b60:	89 2f       	mov	r24, r25
    3b62:	99 27       	eor	r25, r25
    3b64:	89 83       	std	Y+1, r24	; 0x01

	 UART_voidWriteData(0xaa);
    3b66:	8a ea       	ldi	r24, 0xAA	; 170
    3b68:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(0x3d);
    3b6c:	8d e3       	ldi	r24, 0x3D	; 61
    3b6e:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(add_B4);
    3b72:	8b 81       	ldd	r24, Y+3	; 0x03
    3b74:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(add_B3);
    3b78:	8c 81       	ldd	r24, Y+4	; 0x04
    3b7a:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(add_B2);
    3b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b80:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(add_B1);
    3b84:	8e 81       	ldd	r24, Y+6	; 0x06
    3b86:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(data_B2);
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(data_B1);
    3b90:	8a 81       	ldd	r24, Y+2	; 0x02
    3b92:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(0xcc);
    3b96:	8c ec       	ldi	r24, 0xCC	; 204
    3b98:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(0x33);
    3b9c:	83 e3       	ldi	r24, 0x33	; 51
    3b9e:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(0xc3);
    3ba2:	83 ec       	ldi	r24, 0xC3	; 195
    3ba4:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(0x3c);
    3ba8:	8c e3       	ldi	r24, 0x3C	; 60
    3baa:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
}
    3bae:	2c 96       	adiw	r28, 0x0c	; 12
    3bb0:	0f b6       	in	r0, 0x3f	; 63
    3bb2:	f8 94       	cli
    3bb4:	de bf       	out	0x3e, r29	; 62
    3bb6:	0f be       	out	0x3f, r0	; 63
    3bb8:	cd bf       	out	0x3d, r28	; 61
    3bba:	cf 91       	pop	r28
    3bbc:	df 91       	pop	r29
    3bbe:	08 95       	ret

00003bc0 <LCD_GetNum16>:

u16 LCD_GetNum16(u32 Copy_u32Address)
{
    3bc0:	df 93       	push	r29
    3bc2:	cf 93       	push	r28
    3bc4:	cd b7       	in	r28, 0x3d	; 61
    3bc6:	de b7       	in	r29, 0x3e	; 62
    3bc8:	2a 97       	sbiw	r28, 0x0a	; 10
    3bca:	0f b6       	in	r0, 0x3f	; 63
    3bcc:	f8 94       	cli
    3bce:	de bf       	out	0x3e, r29	; 62
    3bd0:	0f be       	out	0x3f, r0	; 63
    3bd2:	cd bf       	out	0x3d, r28	; 61
    3bd4:	6f 83       	std	Y+7, r22	; 0x07
    3bd6:	78 87       	std	Y+8, r23	; 0x08
    3bd8:	89 87       	std	Y+9, r24	; 0x09
    3bda:	9a 87       	std	Y+10, r25	; 0x0a
	u8 add_B1 = (u8)Copy_u32Address;
    3bdc:	8f 81       	ldd	r24, Y+7	; 0x07
    3bde:	8e 83       	std	Y+6, r24	; 0x06
	u8 add_B2 = (u8)(Copy_u32Address >> 8);
    3be0:	8f 81       	ldd	r24, Y+7	; 0x07
    3be2:	98 85       	ldd	r25, Y+8	; 0x08
    3be4:	a9 85       	ldd	r26, Y+9	; 0x09
    3be6:	ba 85       	ldd	r27, Y+10	; 0x0a
    3be8:	89 2f       	mov	r24, r25
    3bea:	9a 2f       	mov	r25, r26
    3bec:	ab 2f       	mov	r26, r27
    3bee:	bb 27       	eor	r27, r27
    3bf0:	8d 83       	std	Y+5, r24	; 0x05
	u8 add_B3 = (u8)(Copy_u32Address >> 16);
    3bf2:	8f 81       	ldd	r24, Y+7	; 0x07
    3bf4:	98 85       	ldd	r25, Y+8	; 0x08
    3bf6:	a9 85       	ldd	r26, Y+9	; 0x09
    3bf8:	ba 85       	ldd	r27, Y+10	; 0x0a
    3bfa:	cd 01       	movw	r24, r26
    3bfc:	aa 27       	eor	r26, r26
    3bfe:	bb 27       	eor	r27, r27
    3c00:	8c 83       	std	Y+4, r24	; 0x04
	u8 add_B4 = (u8)(Copy_u32Address >> 24);
    3c02:	8f 81       	ldd	r24, Y+7	; 0x07
    3c04:	98 85       	ldd	r25, Y+8	; 0x08
    3c06:	a9 85       	ldd	r26, Y+9	; 0x09
    3c08:	ba 85       	ldd	r27, Y+10	; 0x0a
    3c0a:	8b 2f       	mov	r24, r27
    3c0c:	99 27       	eor	r25, r25
    3c0e:	aa 27       	eor	r26, r26
    3c10:	bb 27       	eor	r27, r27
    3c12:	8b 83       	std	Y+3, r24	; 0x03

	u16 data = 0;
    3c14:	1a 82       	std	Y+2, r1	; 0x02
    3c16:	19 82       	std	Y+1, r1	; 0x01

	UART_voidWriteData(0xaa);
    3c18:	8a ea       	ldi	r24, 0xAA	; 170
    3c1a:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(0x3e);
    3c1e:	8e e3       	ldi	r24, 0x3E	; 62
    3c20:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(add_B4);
    3c24:	8b 81       	ldd	r24, Y+3	; 0x03
    3c26:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(add_B3);
    3c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c2c:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(add_B2);
    3c30:	8d 81       	ldd	r24, Y+5	; 0x05
    3c32:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(add_B1);
    3c36:	8e 81       	ldd	r24, Y+6	; 0x06
    3c38:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(0xcc);
    3c3c:	8c ec       	ldi	r24, 0xCC	; 204
    3c3e:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(0x33);
    3c42:	83 e3       	ldi	r24, 0x33	; 51
    3c44:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(0xc3);
    3c48:	83 ec       	ldi	r24, 0xC3	; 195
    3c4a:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(0x3c);
    3c4e:	8c e3       	ldi	r24, 0x3C	; 60
    3c50:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>

	while(UART_u8ReadData() != 0xaa){}
    3c54:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_u8ReadData>
    3c58:	8a 3a       	cpi	r24, 0xAA	; 170
    3c5a:	e1 f7       	brne	.-8      	; 0x3c54 <LCD_GetNum16+0x94>
	while(UART_u8ReadData() != 0x3e){}
    3c5c:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_u8ReadData>
    3c60:	8e 33       	cpi	r24, 0x3E	; 62
    3c62:	e1 f7       	brne	.-8      	; 0x3c5c <LCD_GetNum16+0x9c>

	data = UART_u8ReadData();
    3c64:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_u8ReadData>
    3c68:	88 2f       	mov	r24, r24
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	9a 83       	std	Y+2, r25	; 0x02
    3c6e:	89 83       	std	Y+1, r24	; 0x01
	data = data << 8;
    3c70:	89 81       	ldd	r24, Y+1	; 0x01
    3c72:	9a 81       	ldd	r25, Y+2	; 0x02
    3c74:	98 2f       	mov	r25, r24
    3c76:	88 27       	eor	r24, r24
    3c78:	9a 83       	std	Y+2, r25	; 0x02
    3c7a:	89 83       	std	Y+1, r24	; 0x01
	data = UART_u8ReadData();
    3c7c:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_u8ReadData>
    3c80:	88 2f       	mov	r24, r24
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	9a 83       	std	Y+2, r25	; 0x02
    3c86:	89 83       	std	Y+1, r24	; 0x01

	while(UART_u8ReadData()!=0xcc){}
    3c88:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_u8ReadData>
    3c8c:	8c 3c       	cpi	r24, 0xCC	; 204
    3c8e:	e1 f7       	brne	.-8      	; 0x3c88 <LCD_GetNum16+0xc8>
	while(UART_u8ReadData()!=0x33){}
    3c90:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_u8ReadData>
    3c94:	83 33       	cpi	r24, 0x33	; 51
    3c96:	e1 f7       	brne	.-8      	; 0x3c90 <LCD_GetNum16+0xd0>
	while(UART_u8ReadData()!=0xc3){}
    3c98:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_u8ReadData>
    3c9c:	83 3c       	cpi	r24, 0xC3	; 195
    3c9e:	e1 f7       	brne	.-8      	; 0x3c98 <LCD_GetNum16+0xd8>
	while(UART_u8ReadData()!=0x3c){}
    3ca0:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_u8ReadData>
    3ca4:	8c 33       	cpi	r24, 0x3C	; 60
    3ca6:	e1 f7       	brne	.-8      	; 0x3ca0 <LCD_GetNum16+0xe0>

	return data;
    3ca8:	89 81       	ldd	r24, Y+1	; 0x01
    3caa:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3cac:	2a 96       	adiw	r28, 0x0a	; 10
    3cae:	0f b6       	in	r0, 0x3f	; 63
    3cb0:	f8 94       	cli
    3cb2:	de bf       	out	0x3e, r29	; 62
    3cb4:	0f be       	out	0x3f, r0	; 63
    3cb6:	cd bf       	out	0x3d, r28	; 61
    3cb8:	cf 91       	pop	r28
    3cba:	df 91       	pop	r29
    3cbc:	08 95       	ret

00003cbe <LCD_SendString>:

void LCD_SendString(u32 Copy_u32Address , u8 *Copy_u16Str )
{
    3cbe:	df 93       	push	r29
    3cc0:	cf 93       	push	r28
    3cc2:	cd b7       	in	r28, 0x3d	; 61
    3cc4:	de b7       	in	r29, 0x3e	; 62
    3cc6:	2a 97       	sbiw	r28, 0x0a	; 10
    3cc8:	0f b6       	in	r0, 0x3f	; 63
    3cca:	f8 94       	cli
    3ccc:	de bf       	out	0x3e, r29	; 62
    3cce:	0f be       	out	0x3f, r0	; 63
    3cd0:	cd bf       	out	0x3d, r28	; 61
    3cd2:	6d 83       	std	Y+5, r22	; 0x05
    3cd4:	7e 83       	std	Y+6, r23	; 0x06
    3cd6:	8f 83       	std	Y+7, r24	; 0x07
    3cd8:	98 87       	std	Y+8, r25	; 0x08
    3cda:	5a 87       	std	Y+10, r21	; 0x0a
    3cdc:	49 87       	std	Y+9, r20	; 0x09
	u8 add_B1 = (u8)Copy_u32Address;
    3cde:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce0:	8c 83       	std	Y+4, r24	; 0x04
	u8 add_B2 = (u8)(Copy_u32Address >> 8);
    3ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce6:	af 81       	ldd	r26, Y+7	; 0x07
    3ce8:	b8 85       	ldd	r27, Y+8	; 0x08
    3cea:	89 2f       	mov	r24, r25
    3cec:	9a 2f       	mov	r25, r26
    3cee:	ab 2f       	mov	r26, r27
    3cf0:	bb 27       	eor	r27, r27
    3cf2:	8b 83       	std	Y+3, r24	; 0x03
	u8 add_B3 = (u8)(Copy_u32Address >> 16);
    3cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf8:	af 81       	ldd	r26, Y+7	; 0x07
    3cfa:	b8 85       	ldd	r27, Y+8	; 0x08
    3cfc:	cd 01       	movw	r24, r26
    3cfe:	aa 27       	eor	r26, r26
    3d00:	bb 27       	eor	r27, r27
    3d02:	8a 83       	std	Y+2, r24	; 0x02
	u8 add_B4 = (u8)(Copy_u32Address >> 24);
    3d04:	8d 81       	ldd	r24, Y+5	; 0x05
    3d06:	9e 81       	ldd	r25, Y+6	; 0x06
    3d08:	af 81       	ldd	r26, Y+7	; 0x07
    3d0a:	b8 85       	ldd	r27, Y+8	; 0x08
    3d0c:	8b 2f       	mov	r24, r27
    3d0e:	99 27       	eor	r25, r25
    3d10:	aa 27       	eor	r26, r26
    3d12:	bb 27       	eor	r27, r27
    3d14:	89 83       	std	Y+1, r24	; 0x01

	 UART_voidWriteData(0xaa);
    3d16:	8a ea       	ldi	r24, 0xAA	; 170
    3d18:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(0x42);
    3d1c:	82 e4       	ldi	r24, 0x42	; 66
    3d1e:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(add_B4);
    3d22:	89 81       	ldd	r24, Y+1	; 0x01
    3d24:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(add_B3);
    3d28:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2a:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(add_B2);
    3d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d30:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(add_B1);
    3d34:	8c 81       	ldd	r24, Y+4	; 0x04
    3d36:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteString(Copy_u16Str);
    3d3a:	89 85       	ldd	r24, Y+9	; 0x09
    3d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d3e:	0e 94 2b 20 	call	0x4056	; 0x4056 <UART_voidWriteString>
	 UART_voidWriteData(0xcc);
    3d42:	8c ec       	ldi	r24, 0xCC	; 204
    3d44:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(0x33);
    3d48:	83 e3       	ldi	r24, 0x33	; 51
    3d4a:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(0xc3);
    3d4e:	83 ec       	ldi	r24, 0xC3	; 195
    3d50:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	 UART_voidWriteData(0x3c);
    3d54:	8c e3       	ldi	r24, 0x3C	; 60
    3d56:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
}
    3d5a:	2a 96       	adiw	r28, 0x0a	; 10
    3d5c:	0f b6       	in	r0, 0x3f	; 63
    3d5e:	f8 94       	cli
    3d60:	de bf       	out	0x3e, r29	; 62
    3d62:	0f be       	out	0x3f, r0	; 63
    3d64:	cd bf       	out	0x3d, r28	; 61
    3d66:	cf 91       	pop	r28
    3d68:	df 91       	pop	r29
    3d6a:	08 95       	ret

00003d6c <LCD_GetString>:

void LCD_GetString(u32 Copy_u32Address , u8 *Ptr_ReturnStr)
{
    3d6c:	df 93       	push	r29
    3d6e:	cf 93       	push	r28
    3d70:	cd b7       	in	r28, 0x3d	; 61
    3d72:	de b7       	in	r29, 0x3e	; 62
    3d74:	2a 97       	sbiw	r28, 0x0a	; 10
    3d76:	0f b6       	in	r0, 0x3f	; 63
    3d78:	f8 94       	cli
    3d7a:	de bf       	out	0x3e, r29	; 62
    3d7c:	0f be       	out	0x3f, r0	; 63
    3d7e:	cd bf       	out	0x3d, r28	; 61
    3d80:	6d 83       	std	Y+5, r22	; 0x05
    3d82:	7e 83       	std	Y+6, r23	; 0x06
    3d84:	8f 83       	std	Y+7, r24	; 0x07
    3d86:	98 87       	std	Y+8, r25	; 0x08
    3d88:	5a 87       	std	Y+10, r21	; 0x0a
    3d8a:	49 87       	std	Y+9, r20	; 0x09
	u8 add_B1 = (u8)Copy_u32Address;
    3d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d8e:	8c 83       	std	Y+4, r24	; 0x04
	u8 add_B2 = (u8)(Copy_u32Address >> 8);
    3d90:	8d 81       	ldd	r24, Y+5	; 0x05
    3d92:	9e 81       	ldd	r25, Y+6	; 0x06
    3d94:	af 81       	ldd	r26, Y+7	; 0x07
    3d96:	b8 85       	ldd	r27, Y+8	; 0x08
    3d98:	89 2f       	mov	r24, r25
    3d9a:	9a 2f       	mov	r25, r26
    3d9c:	ab 2f       	mov	r26, r27
    3d9e:	bb 27       	eor	r27, r27
    3da0:	8b 83       	std	Y+3, r24	; 0x03
	u8 add_B3 = (u8)(Copy_u32Address >> 16);
    3da2:	8d 81       	ldd	r24, Y+5	; 0x05
    3da4:	9e 81       	ldd	r25, Y+6	; 0x06
    3da6:	af 81       	ldd	r26, Y+7	; 0x07
    3da8:	b8 85       	ldd	r27, Y+8	; 0x08
    3daa:	cd 01       	movw	r24, r26
    3dac:	aa 27       	eor	r26, r26
    3dae:	bb 27       	eor	r27, r27
    3db0:	8a 83       	std	Y+2, r24	; 0x02
	u8 add_B4 = (u8)(Copy_u32Address >> 24);
    3db2:	8d 81       	ldd	r24, Y+5	; 0x05
    3db4:	9e 81       	ldd	r25, Y+6	; 0x06
    3db6:	af 81       	ldd	r26, Y+7	; 0x07
    3db8:	b8 85       	ldd	r27, Y+8	; 0x08
    3dba:	8b 2f       	mov	r24, r27
    3dbc:	99 27       	eor	r25, r25
    3dbe:	aa 27       	eor	r26, r26
    3dc0:	bb 27       	eor	r27, r27
    3dc2:	89 83       	std	Y+1, r24	; 0x01

	UART_voidWriteData(0xaa);
    3dc4:	8a ea       	ldi	r24, 0xAA	; 170
    3dc6:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(0x43);
    3dca:	83 e4       	ldi	r24, 0x43	; 67
    3dcc:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(add_B4);
    3dd0:	89 81       	ldd	r24, Y+1	; 0x01
    3dd2:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(add_B3);
    3dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd8:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(add_B2);
    3ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dde:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(add_B1);
    3de2:	8c 81       	ldd	r24, Y+4	; 0x04
    3de4:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(0xcc);
    3de8:	8c ec       	ldi	r24, 0xCC	; 204
    3dea:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(0x33);
    3dee:	83 e3       	ldi	r24, 0x33	; 51
    3df0:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(0xc3);
    3df4:	83 ec       	ldi	r24, 0xC3	; 195
    3df6:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>
	UART_voidWriteData(0x3c);
    3dfa:	8c e3       	ldi	r24, 0x3C	; 60
    3dfc:	0e 94 00 20 	call	0x4000	; 0x4000 <UART_voidWriteData>

	while(UART_u8ReadData() != 0xaa){}
    3e00:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_u8ReadData>
    3e04:	8a 3a       	cpi	r24, 0xAA	; 170
    3e06:	e1 f7       	brne	.-8      	; 0x3e00 <LCD_GetString+0x94>
	while(UART_u8ReadData() != 0x43){}
    3e08:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_u8ReadData>
    3e0c:	83 34       	cpi	r24, 0x43	; 67
    3e0e:	e1 f7       	brne	.-8      	; 0x3e08 <LCD_GetString+0x9c>

	UART_voidReadString(Ptr_ReturnStr);
    3e10:	89 85       	ldd	r24, Y+9	; 0x09
    3e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e14:	0e 94 63 20 	call	0x40c6	; 0x40c6 <UART_voidReadString>

	while(UART_u8ReadData()!=0xcc){}
    3e18:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_u8ReadData>
    3e1c:	8c 3c       	cpi	r24, 0xCC	; 204
    3e1e:	e1 f7       	brne	.-8      	; 0x3e18 <LCD_GetString+0xac>
	while(UART_u8ReadData()!=0x33){}
    3e20:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_u8ReadData>
    3e24:	83 33       	cpi	r24, 0x33	; 51
    3e26:	e1 f7       	brne	.-8      	; 0x3e20 <LCD_GetString+0xb4>
	while(UART_u8ReadData()!=0xc3){}
    3e28:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_u8ReadData>
    3e2c:	83 3c       	cpi	r24, 0xC3	; 195
    3e2e:	e1 f7       	brne	.-8      	; 0x3e28 <LCD_GetString+0xbc>
	while(UART_u8ReadData()!=0x3c){}
    3e30:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_u8ReadData>
    3e34:	8c 33       	cpi	r24, 0x3C	; 60
    3e36:	e1 f7       	brne	.-8      	; 0x3e30 <LCD_GetString+0xc4>
}
    3e38:	2a 96       	adiw	r28, 0x0a	; 10
    3e3a:	0f b6       	in	r0, 0x3f	; 63
    3e3c:	f8 94       	cli
    3e3e:	de bf       	out	0x3e, r29	; 62
    3e40:	0f be       	out	0x3f, r0	; 63
    3e42:	cd bf       	out	0x3d, r28	; 61
    3e44:	cf 91       	pop	r28
    3e46:	df 91       	pop	r29
    3e48:	08 95       	ret

00003e4a <UART_Init>:
u8 * GlobalPtr_SendDataAsynch = NULL;

u8 * GlobalPtr_RecDataAsynch = NULL;

void UART_Init(void)
{
    3e4a:	df 93       	push	r29
    3e4c:	cf 93       	push	r28
    3e4e:	cd b7       	in	r28, 0x3d	; 61
    3e50:	de b7       	in	r29, 0x3e	; 62
	//select character size (8bit)
	SET_BIT(UCSRC0_REG,1);
    3e52:	a5 e9       	ldi	r26, 0x95	; 149
    3e54:	b0 e0       	ldi	r27, 0x00	; 0
    3e56:	e5 e9       	ldi	r30, 0x95	; 149
    3e58:	f0 e0       	ldi	r31, 0x00	; 0
    3e5a:	80 81       	ld	r24, Z
    3e5c:	82 60       	ori	r24, 0x02	; 2
    3e5e:	8c 93       	st	X, r24
	SET_BIT(UCSRC0_REG,2);
    3e60:	a5 e9       	ldi	r26, 0x95	; 149
    3e62:	b0 e0       	ldi	r27, 0x00	; 0
    3e64:	e5 e9       	ldi	r30, 0x95	; 149
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	80 81       	ld	r24, Z
    3e6a:	84 60       	ori	r24, 0x04	; 4
    3e6c:	8c 93       	st	X, r24
	//Set Baud Rate to 9600
	UBRRL0_REG = 103;
    3e6e:	e9 e2       	ldi	r30, 0x29	; 41
    3e70:	f0 e0       	ldi	r31, 0x00	; 0
    3e72:	87 e6       	ldi	r24, 0x67	; 103
    3e74:	80 83       	st	Z, r24

	//enable for Tx Circuit
	SET_BIT(UCSRB0_REG,3);
    3e76:	aa e2       	ldi	r26, 0x2A	; 42
    3e78:	b0 e0       	ldi	r27, 0x00	; 0
    3e7a:	ea e2       	ldi	r30, 0x2A	; 42
    3e7c:	f0 e0       	ldi	r31, 0x00	; 0
    3e7e:	80 81       	ld	r24, Z
    3e80:	88 60       	ori	r24, 0x08	; 8
    3e82:	8c 93       	st	X, r24
	//enable for Rx Circuit
	SET_BIT(UCSRB0_REG,4);
    3e84:	aa e2       	ldi	r26, 0x2A	; 42
    3e86:	b0 e0       	ldi	r27, 0x00	; 0
    3e88:	ea e2       	ldi	r30, 0x2A	; 42
    3e8a:	f0 e0       	ldi	r31, 0x00	; 0
    3e8c:	80 81       	ld	r24, Z
    3e8e:	80 61       	ori	r24, 0x10	; 16
    3e90:	8c 93       	st	X, r24
}
    3e92:	cf 91       	pop	r28
    3e94:	df 91       	pop	r29
    3e96:	08 95       	ret

00003e98 <UART_SendByteSynch>:

void UART_SendByteSynch(u8 Data)
{
    3e98:	df 93       	push	r29
    3e9a:	cf 93       	push	r28
    3e9c:	0f 92       	push	r0
    3e9e:	cd b7       	in	r28, 0x3d	; 61
    3ea0:	de b7       	in	r29, 0x3e	; 62
    3ea2:	89 83       	std	Y+1, r24	; 0x01
	//wait untile UDR is Empty
	while(GET_BIT(UCSRA0_REG,5) == 0);
    3ea4:	eb e2       	ldi	r30, 0x2B	; 43
    3ea6:	f0 e0       	ldi	r31, 0x00	; 0
    3ea8:	80 81       	ld	r24, Z
    3eaa:	82 95       	swap	r24
    3eac:	86 95       	lsr	r24
    3eae:	87 70       	andi	r24, 0x07	; 7
    3eb0:	88 2f       	mov	r24, r24
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	81 70       	andi	r24, 0x01	; 1
    3eb6:	90 70       	andi	r25, 0x00	; 0
    3eb8:	00 97       	sbiw	r24, 0x00	; 0
    3eba:	a1 f3       	breq	.-24     	; 0x3ea4 <UART_SendByteSynch+0xc>
	//put data in UDR
	UDR0_REG = Data;
    3ebc:	ec e2       	ldi	r30, 0x2C	; 44
    3ebe:	f0 e0       	ldi	r31, 0x00	; 0
    3ec0:	89 81       	ldd	r24, Y+1	; 0x01
    3ec2:	80 83       	st	Z, r24
	//wait until transmitting is complete
	while(GET_BIT(UCSRA0_REG,6) == 0);
    3ec4:	eb e2       	ldi	r30, 0x2B	; 43
    3ec6:	f0 e0       	ldi	r31, 0x00	; 0
    3ec8:	80 81       	ld	r24, Z
    3eca:	82 95       	swap	r24
    3ecc:	86 95       	lsr	r24
    3ece:	86 95       	lsr	r24
    3ed0:	83 70       	andi	r24, 0x03	; 3
    3ed2:	88 2f       	mov	r24, r24
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	81 70       	andi	r24, 0x01	; 1
    3ed8:	90 70       	andi	r25, 0x00	; 0
    3eda:	00 97       	sbiw	r24, 0x00	; 0
    3edc:	99 f3       	breq	.-26     	; 0x3ec4 <UART_SendByteSynch+0x2c>
}
    3ede:	0f 90       	pop	r0
    3ee0:	cf 91       	pop	r28
    3ee2:	df 91       	pop	r29
    3ee4:	08 95       	ret

00003ee6 <UART_SendByteASynch>:

void UART_SendByteASynch(u8 * Data)
{
    3ee6:	df 93       	push	r29
    3ee8:	cf 93       	push	r28
    3eea:	00 d0       	rcall	.+0      	; 0x3eec <UART_SendByteASynch+0x6>
    3eec:	cd b7       	in	r28, 0x3d	; 61
    3eee:	de b7       	in	r29, 0x3e	; 62
    3ef0:	9a 83       	std	Y+2, r25	; 0x02
    3ef2:	89 83       	std	Y+1, r24	; 0x01
	GlobalPtr_SendDataAsynch = Data;
    3ef4:	89 81       	ldd	r24, Y+1	; 0x01
    3ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef8:	90 93 fe 04 	sts	0x04FE, r25
    3efc:	80 93 fd 04 	sts	0x04FD, r24
}
    3f00:	0f 90       	pop	r0
    3f02:	0f 90       	pop	r0
    3f04:	cf 91       	pop	r28
    3f06:	df 91       	pop	r29
    3f08:	08 95       	ret

00003f0a <UART_ReceiveByteSynch>:

u8 UART_ReceiveByteSynch()
{
    3f0a:	df 93       	push	r29
    3f0c:	cf 93       	push	r28
    3f0e:	cd b7       	in	r28, 0x3d	; 61
    3f10:	de b7       	in	r29, 0x3e	; 62
	//wait until receive is complete
	while(GET_BIT(UCSRA0_REG,7) == 0);
    3f12:	eb e2       	ldi	r30, 0x2B	; 43
    3f14:	f0 e0       	ldi	r31, 0x00	; 0
    3f16:	80 81       	ld	r24, Z
    3f18:	88 23       	and	r24, r24
    3f1a:	dc f7       	brge	.-10     	; 0x3f12 <UART_ReceiveByteSynch+0x8>

	//return Data
	return UDR0_REG;
    3f1c:	ec e2       	ldi	r30, 0x2C	; 44
    3f1e:	f0 e0       	ldi	r31, 0x00	; 0
    3f20:	80 81       	ld	r24, Z
}
    3f22:	cf 91       	pop	r28
    3f24:	df 91       	pop	r29
    3f26:	08 95       	ret

00003f28 <UART_ReceiveByteASynch>:

void UART_ReceiveByteASynch(u8 * Data)
{
    3f28:	df 93       	push	r29
    3f2a:	cf 93       	push	r28
    3f2c:	00 d0       	rcall	.+0      	; 0x3f2e <UART_ReceiveByteASynch+0x6>
    3f2e:	cd b7       	in	r28, 0x3d	; 61
    3f30:	de b7       	in	r29, 0x3e	; 62
    3f32:	9a 83       	std	Y+2, r25	; 0x02
    3f34:	89 83       	std	Y+1, r24	; 0x01
	Data = GlobalPtr_RecDataAsynch;
    3f36:	80 91 ff 04 	lds	r24, 0x04FF
    3f3a:	90 91 00 05 	lds	r25, 0x0500
    3f3e:	9a 83       	std	Y+2, r25	; 0x02
    3f40:	89 83       	std	Y+1, r24	; 0x01
}
    3f42:	0f 90       	pop	r0
    3f44:	0f 90       	pop	r0
    3f46:	cf 91       	pop	r28
    3f48:	df 91       	pop	r29
    3f4a:	08 95       	ret

00003f4c <UART_SendStringSync>:

void UART_SendStringSync(u8 const* Copy_pu8Data )
{
    3f4c:	df 93       	push	r29
    3f4e:	cf 93       	push	r28
    3f50:	00 d0       	rcall	.+0      	; 0x3f52 <UART_SendStringSync+0x6>
    3f52:	cd b7       	in	r28, 0x3d	; 61
    3f54:	de b7       	in	r29, 0x3e	; 62
    3f56:	9a 83       	std	Y+2, r25	; 0x02
    3f58:	89 83       	std	Y+1, r24	; 0x01
    3f5a:	24 c0       	rjmp	.+72     	; 0x3fa4 <UART_SendStringSync+0x58>
	while( *Copy_pu8Data != '\0')
	{
		while(GET_BIT(UCSRA0_REG,5) == 0);
    3f5c:	eb e2       	ldi	r30, 0x2B	; 43
    3f5e:	f0 e0       	ldi	r31, 0x00	; 0
    3f60:	80 81       	ld	r24, Z
    3f62:	82 95       	swap	r24
    3f64:	86 95       	lsr	r24
    3f66:	87 70       	andi	r24, 0x07	; 7
    3f68:	88 2f       	mov	r24, r24
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	81 70       	andi	r24, 0x01	; 1
    3f6e:	90 70       	andi	r25, 0x00	; 0
    3f70:	00 97       	sbiw	r24, 0x00	; 0
    3f72:	a1 f3       	breq	.-24     	; 0x3f5c <UART_SendStringSync+0x10>

		UDR0_REG = *Copy_pu8Data ;
    3f74:	ec e2       	ldi	r30, 0x2C	; 44
    3f76:	f0 e0       	ldi	r31, 0x00	; 0
    3f78:	a9 81       	ldd	r26, Y+1	; 0x01
    3f7a:	ba 81       	ldd	r27, Y+2	; 0x02
    3f7c:	8c 91       	ld	r24, X
    3f7e:	80 83       	st	Z, r24

		while(GET_BIT(UCSRA0_REG,6) == 0);
    3f80:	eb e2       	ldi	r30, 0x2B	; 43
    3f82:	f0 e0       	ldi	r31, 0x00	; 0
    3f84:	80 81       	ld	r24, Z
    3f86:	82 95       	swap	r24
    3f88:	86 95       	lsr	r24
    3f8a:	86 95       	lsr	r24
    3f8c:	83 70       	andi	r24, 0x03	; 3
    3f8e:	88 2f       	mov	r24, r24
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	81 70       	andi	r24, 0x01	; 1
    3f94:	90 70       	andi	r25, 0x00	; 0
    3f96:	00 97       	sbiw	r24, 0x00	; 0
    3f98:	99 f3       	breq	.-26     	; 0x3f80 <UART_SendStringSync+0x34>

		Copy_pu8Data++ ;
    3f9a:	89 81       	ldd	r24, Y+1	; 0x01
    3f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f9e:	01 96       	adiw	r24, 0x01	; 1
    3fa0:	9a 83       	std	Y+2, r25	; 0x02
    3fa2:	89 83       	std	Y+1, r24	; 0x01
	Data = GlobalPtr_RecDataAsynch;
}

void UART_SendStringSync(u8 const* Copy_pu8Data )
{
	while( *Copy_pu8Data != '\0')
    3fa4:	e9 81       	ldd	r30, Y+1	; 0x01
    3fa6:	fa 81       	ldd	r31, Y+2	; 0x02
    3fa8:	80 81       	ld	r24, Z
    3faa:	88 23       	and	r24, r24
    3fac:	b9 f6       	brne	.-82     	; 0x3f5c <UART_SendStringSync+0x10>

		while(GET_BIT(UCSRA0_REG,6) == 0);

		Copy_pu8Data++ ;
	}
}
    3fae:	0f 90       	pop	r0
    3fb0:	0f 90       	pop	r0
    3fb2:	cf 91       	pop	r28
    3fb4:	df 91       	pop	r29
    3fb6:	08 95       	ret

00003fb8 <UART_voidInit>:

void UART_voidInit()
{
    3fb8:	df 93       	push	r29
    3fba:	cf 93       	push	r28
    3fbc:	cd b7       	in	r28, 0x3d	; 61
    3fbe:	de b7       	in	r29, 0x3e	; 62
	/*Select character size it is 2 in mode*/
	CLR_BIT(UCSRB , UCSRB_UCSZ2);
    3fc0:	aa e9       	ldi	r26, 0x9A	; 154
    3fc2:	b0 e0       	ldi	r27, 0x00	; 0
    3fc4:	ea e9       	ldi	r30, 0x9A	; 154
    3fc6:	f0 e0       	ldi	r31, 0x00	; 0
    3fc8:	80 81       	ld	r24, Z
    3fca:	8b 7f       	andi	r24, 0xFB	; 251
    3fcc:	8c 93       	st	X, r24
	/*Select UCSRC register - Asynchronous mode -no parity - 1 stop bit - 8 bit character - no polarity */
	UCSRC = 0b00000110;
    3fce:	ed e9       	ldi	r30, 0x9D	; 157
    3fd0:	f0 e0       	ldi	r31, 0x00	; 0
    3fd2:	86 e0       	ldi	r24, 0x06	; 6
    3fd4:	80 83       	st	Z, r24
	/*Set the baudRate 115.2K bps*/
	UBBRL = 8;
    3fd6:	e9 e9       	ldi	r30, 0x99	; 153
    3fd8:	f0 e0       	ldi	r31, 0x00	; 0
    3fda:	88 e0       	ldi	r24, 0x08	; 8
    3fdc:	80 83       	st	Z, r24
	/*Enable the RX and TX */
	SET_BIT(UCSRB , UCSRB_RXEN);
    3fde:	aa e9       	ldi	r26, 0x9A	; 154
    3fe0:	b0 e0       	ldi	r27, 0x00	; 0
    3fe2:	ea e9       	ldi	r30, 0x9A	; 154
    3fe4:	f0 e0       	ldi	r31, 0x00	; 0
    3fe6:	80 81       	ld	r24, Z
    3fe8:	80 61       	ori	r24, 0x10	; 16
    3fea:	8c 93       	st	X, r24
	SET_BIT(UCSRB , UCSRB_TXEN);
    3fec:	aa e9       	ldi	r26, 0x9A	; 154
    3fee:	b0 e0       	ldi	r27, 0x00	; 0
    3ff0:	ea e9       	ldi	r30, 0x9A	; 154
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	80 81       	ld	r24, Z
    3ff6:	88 60       	ori	r24, 0x08	; 8
    3ff8:	8c 93       	st	X, r24
}
    3ffa:	cf 91       	pop	r28
    3ffc:	df 91       	pop	r29
    3ffe:	08 95       	ret

00004000 <UART_voidWriteData>:
void UART_voidWriteData(u8 Copy_u8Data)
{
    4000:	df 93       	push	r29
    4002:	cf 93       	push	r28
    4004:	0f 92       	push	r0
    4006:	cd b7       	in	r28, 0x3d	; 61
    4008:	de b7       	in	r29, 0x3e	; 62
    400a:	89 83       	std	Y+1, r24	; 0x01
	/*wait until the transmit buffer empty and ready*/
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0);
    400c:	eb e9       	ldi	r30, 0x9B	; 155
    400e:	f0 e0       	ldi	r31, 0x00	; 0
    4010:	80 81       	ld	r24, Z
    4012:	82 95       	swap	r24
    4014:	86 95       	lsr	r24
    4016:	87 70       	andi	r24, 0x07	; 7
    4018:	88 2f       	mov	r24, r24
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	81 70       	andi	r24, 0x01	; 1
    401e:	90 70       	andi	r25, 0x00	; 0
    4020:	00 97       	sbiw	r24, 0x00	; 0
    4022:	a1 f3       	breq	.-24     	; 0x400c <UART_voidWriteData+0xc>
	UDR = Copy_u8Data;
    4024:	ec e9       	ldi	r30, 0x9C	; 156
    4026:	f0 e0       	ldi	r31, 0x00	; 0
    4028:	89 81       	ldd	r24, Y+1	; 0x01
    402a:	80 83       	st	Z, r24
}
    402c:	0f 90       	pop	r0
    402e:	cf 91       	pop	r28
    4030:	df 91       	pop	r29
    4032:	08 95       	ret

00004034 <UART_u8ReadData>:
u8 UART_u8ReadData()
{
    4034:	df 93       	push	r29
    4036:	cf 93       	push	r28
    4038:	0f 92       	push	r0
    403a:	cd b7       	in	r28, 0x3d	; 61
    403c:	de b7       	in	r29, 0x3e	; 62
	u8 data;

	while(GET_BIT(UCSRA,UCSRA_RXC) ==0);
    403e:	eb e9       	ldi	r30, 0x9B	; 155
    4040:	f0 e0       	ldi	r31, 0x00	; 0
    4042:	80 81       	ld	r24, Z
    4044:	88 23       	and	r24, r24
    4046:	dc f7       	brge	.-10     	; 0x403e <UART_u8ReadData+0xa>

	return UDR;
    4048:	ec e9       	ldi	r30, 0x9C	; 156
    404a:	f0 e0       	ldi	r31, 0x00	; 0
    404c:	80 81       	ld	r24, Z
}
    404e:	0f 90       	pop	r0
    4050:	cf 91       	pop	r28
    4052:	df 91       	pop	r29
    4054:	08 95       	ret

00004056 <UART_voidWriteString>:

void UART_voidWriteString(u8 *Copy_u8Data)
{
    4056:	df 93       	push	r29
    4058:	cf 93       	push	r28
    405a:	00 d0       	rcall	.+0      	; 0x405c <UART_voidWriteString+0x6>
    405c:	cd b7       	in	r28, 0x3d	; 61
    405e:	de b7       	in	r29, 0x3e	; 62
    4060:	9a 83       	std	Y+2, r25	; 0x02
    4062:	89 83       	std	Y+1, r24	; 0x01
    4064:	17 c0       	rjmp	.+46     	; 0x4094 <UART_voidWriteString+0x3e>
	while( *Copy_u8Data != '\0')
	{
		while(GET_BIT(UCSRA,UCSRA_UDRE) == 0);
    4066:	eb e9       	ldi	r30, 0x9B	; 155
    4068:	f0 e0       	ldi	r31, 0x00	; 0
    406a:	80 81       	ld	r24, Z
    406c:	82 95       	swap	r24
    406e:	86 95       	lsr	r24
    4070:	87 70       	andi	r24, 0x07	; 7
    4072:	88 2f       	mov	r24, r24
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	81 70       	andi	r24, 0x01	; 1
    4078:	90 70       	andi	r25, 0x00	; 0
    407a:	00 97       	sbiw	r24, 0x00	; 0
    407c:	a1 f3       	breq	.-24     	; 0x4066 <UART_voidWriteString+0x10>

		UDR = *Copy_u8Data;
    407e:	ac e9       	ldi	r26, 0x9C	; 156
    4080:	b0 e0       	ldi	r27, 0x00	; 0
    4082:	e9 81       	ldd	r30, Y+1	; 0x01
    4084:	fa 81       	ldd	r31, Y+2	; 0x02
    4086:	80 81       	ld	r24, Z
    4088:	8c 93       	st	X, r24

		Copy_u8Data++;
    408a:	89 81       	ldd	r24, Y+1	; 0x01
    408c:	9a 81       	ldd	r25, Y+2	; 0x02
    408e:	01 96       	adiw	r24, 0x01	; 1
    4090:	9a 83       	std	Y+2, r25	; 0x02
    4092:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_voidWriteString(u8 *Copy_u8Data)
{
	while( *Copy_u8Data != '\0')
    4094:	e9 81       	ldd	r30, Y+1	; 0x01
    4096:	fa 81       	ldd	r31, Y+2	; 0x02
    4098:	80 81       	ld	r24, Z
    409a:	88 23       	and	r24, r24
    409c:	21 f7       	brne	.-56     	; 0x4066 <UART_voidWriteString+0x10>

		UDR = *Copy_u8Data;

		Copy_u8Data++;
	}
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0);
    409e:	eb e9       	ldi	r30, 0x9B	; 155
    40a0:	f0 e0       	ldi	r31, 0x00	; 0
    40a2:	80 81       	ld	r24, Z
    40a4:	82 95       	swap	r24
    40a6:	86 95       	lsr	r24
    40a8:	87 70       	andi	r24, 0x07	; 7
    40aa:	88 2f       	mov	r24, r24
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	81 70       	andi	r24, 0x01	; 1
    40b0:	90 70       	andi	r25, 0x00	; 0
    40b2:	00 97       	sbiw	r24, 0x00	; 0
    40b4:	a1 f3       	breq	.-24     	; 0x409e <UART_voidWriteString+0x48>

	UDR = 0x00;
    40b6:	ec e9       	ldi	r30, 0x9C	; 156
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	10 82       	st	Z, r1

}
    40bc:	0f 90       	pop	r0
    40be:	0f 90       	pop	r0
    40c0:	cf 91       	pop	r28
    40c2:	df 91       	pop	r29
    40c4:	08 95       	ret

000040c6 <UART_voidReadString>:

void UART_voidReadString(u8 *Ptr_ReturnStr)
{
    40c6:	df 93       	push	r29
    40c8:	cf 93       	push	r28
    40ca:	00 d0       	rcall	.+0      	; 0x40cc <UART_voidReadString+0x6>
    40cc:	cd b7       	in	r28, 0x3d	; 61
    40ce:	de b7       	in	r29, 0x3e	; 62
    40d0:	9a 83       	std	Y+2, r25	; 0x02
    40d2:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UCSRA_RXC) ==0);
    40d4:	eb e9       	ldi	r30, 0x9B	; 155
    40d6:	f0 e0       	ldi	r31, 0x00	; 0
    40d8:	80 81       	ld	r24, Z
    40da:	88 23       	and	r24, r24
    40dc:	dc f7       	brge	.-10     	; 0x40d4 <UART_voidReadString+0xe>
	*Ptr_ReturnStr = UDR;
    40de:	ec e9       	ldi	r30, 0x9C	; 156
    40e0:	f0 e0       	ldi	r31, 0x00	; 0
    40e2:	80 81       	ld	r24, Z
    40e4:	e9 81       	ldd	r30, Y+1	; 0x01
    40e6:	fa 81       	ldd	r31, Y+2	; 0x02
    40e8:	80 83       	st	Z, r24
    40ea:	10 c0       	rjmp	.+32     	; 0x410c <UART_voidReadString+0x46>

	while(*Ptr_ReturnStr != '\0')
	{
		while(GET_BIT(UCSRA,UCSRA_RXC) ==0);
    40ec:	eb e9       	ldi	r30, 0x9B	; 155
    40ee:	f0 e0       	ldi	r31, 0x00	; 0
    40f0:	80 81       	ld	r24, Z
    40f2:	88 23       	and	r24, r24
    40f4:	dc f7       	brge	.-10     	; 0x40ec <UART_voidReadString+0x26>
		*(++Ptr_ReturnStr) = UDR;
    40f6:	89 81       	ldd	r24, Y+1	; 0x01
    40f8:	9a 81       	ldd	r25, Y+2	; 0x02
    40fa:	01 96       	adiw	r24, 0x01	; 1
    40fc:	9a 83       	std	Y+2, r25	; 0x02
    40fe:	89 83       	std	Y+1, r24	; 0x01
    4100:	ec e9       	ldi	r30, 0x9C	; 156
    4102:	f0 e0       	ldi	r31, 0x00	; 0
    4104:	80 81       	ld	r24, Z
    4106:	e9 81       	ldd	r30, Y+1	; 0x01
    4108:	fa 81       	ldd	r31, Y+2	; 0x02
    410a:	80 83       	st	Z, r24
void UART_voidReadString(u8 *Ptr_ReturnStr)
{
	while(GET_BIT(UCSRA,UCSRA_RXC) ==0);
	*Ptr_ReturnStr = UDR;

	while(*Ptr_ReturnStr != '\0')
    410c:	e9 81       	ldd	r30, Y+1	; 0x01
    410e:	fa 81       	ldd	r31, Y+2	; 0x02
    4110:	80 81       	ld	r24, Z
    4112:	88 23       	and	r24, r24
    4114:	59 f7       	brne	.-42     	; 0x40ec <UART_voidReadString+0x26>
	{
		while(GET_BIT(UCSRA,UCSRA_RXC) ==0);
		*(++Ptr_ReturnStr) = UDR;
	}
}
    4116:	0f 90       	pop	r0
    4118:	0f 90       	pop	r0
    411a:	cf 91       	pop	r28
    411c:	df 91       	pop	r29
    411e:	08 95       	ret

00004120 <UART_voidDisable>:

void UART_voidDisable()
{
    4120:	df 93       	push	r29
    4122:	cf 93       	push	r28
    4124:	cd b7       	in	r28, 0x3d	; 61
    4126:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,4);
    4128:	aa e9       	ldi	r26, 0x9A	; 154
    412a:	b0 e0       	ldi	r27, 0x00	; 0
    412c:	ea e9       	ldi	r30, 0x9A	; 154
    412e:	f0 e0       	ldi	r31, 0x00	; 0
    4130:	80 81       	ld	r24, Z
    4132:	8f 7e       	andi	r24, 0xEF	; 239
    4134:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,3);
    4136:	aa e9       	ldi	r26, 0x9A	; 154
    4138:	b0 e0       	ldi	r27, 0x00	; 0
    413a:	ea e9       	ldi	r30, 0x9A	; 154
    413c:	f0 e0       	ldi	r31, 0x00	; 0
    413e:	80 81       	ld	r24, Z
    4140:	87 7f       	andi	r24, 0xF7	; 247
    4142:	8c 93       	st	X, r24
}
    4144:	cf 91       	pop	r28
    4146:	df 91       	pop	r29
    4148:	08 95       	ret

0000414a <main>:
#include "avr/delay.h"
#include "ADC_Interface.h"
#include "ADC_Config.h"
#include "LM35_Interface.h"
int main(void)
{
    414a:	0f 93       	push	r16
    414c:	1f 93       	push	r17
    414e:	df 93       	push	r29
    4150:	cf 93       	push	r28
    4152:	cd b7       	in	r28, 0x3d	; 61
    4154:	de b7       	in	r29, 0x3e	; 62
    4156:	cd 56       	subi	r28, 0x6D	; 109
    4158:	d0 40       	sbci	r29, 0x00	; 0
    415a:	0f b6       	in	r0, 0x3f	; 63
    415c:	f8 94       	cli
    415e:	de bf       	out	0x3e, r29	; 62
    4160:	0f be       	out	0x3f, r0	; 63
    4162:	cd bf       	out	0x3d, r28	; 61
	 UART_Init();
    4164:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <UART_Init>
	 LCD_Init();
    4168:	0e 94 77 1d 	call	0x3aee	; 0x3aee <LCD_Init>
	 ADC_VidINIT();
    416c:	0e 94 89 06 	call	0xd12	; 0xd12 <ADC_VidINIT>
	 u8 Num_size = 0;
    4170:	19 8e       	std	Y+25, r1	; 0x19
	 u8 *valid = "Valid Number";
    4172:	84 eb       	ldi	r24, 0xB4	; 180
    4174:	91 e0       	ldi	r25, 0x01	; 1
    4176:	98 8f       	std	Y+24, r25	; 0x18
    4178:	8f 8b       	std	Y+23, r24	; 0x17
	 u8 *Invalid = "InValid Number";
    417a:	81 ec       	ldi	r24, 0xC1	; 193
    417c:	91 e0       	ldi	r25, 0x01	; 1
    417e:	9e 8b       	std	Y+22, r25	; 0x16
    4180:	8d 8b       	std	Y+21, r24	; 0x15
	 u8 *ptr = "";
    4182:	80 ed       	ldi	r24, 0xD0	; 208
    4184:	91 e0       	ldi	r25, 0x01	; 1
    4186:	9c 8b       	std	Y+20, r25	; 0x14
    4188:	8b 8b       	std	Y+19, r24	; 0x13
	 u8 valid_phone = 0;
    418a:	1a 8a       	std	Y+18, r1	; 0x12
	 u8* data = "";
    418c:	80 ed       	ldi	r24, 0xD0	; 208
    418e:	91 e0       	ldi	r25, 0x01	; 1
    4190:	99 8b       	std	Y+17, r25	; 0x11
    4192:	88 8b       	std	Y+16, r24	; 0x10
	 u8 list;
	 u8* calling_Array[20] = {"01063482890","01077777777","01000000000"};
    4194:	88 e2       	ldi	r24, 0x28	; 40
    4196:	fe 01       	movw	r30, r28
    4198:	7a 96       	adiw	r30, 0x1a	; 26
    419a:	df 01       	movw	r26, r30
    419c:	98 2f       	mov	r25, r24
    419e:	1d 92       	st	X+, r1
    41a0:	9a 95       	dec	r25
    41a2:	e9 f7       	brne	.-6      	; 0x419e <main+0x54>
    41a4:	81 ed       	ldi	r24, 0xD1	; 209
    41a6:	91 e0       	ldi	r25, 0x01	; 1
    41a8:	9b 8f       	std	Y+27, r25	; 0x1b
    41aa:	8a 8f       	std	Y+26, r24	; 0x1a
    41ac:	8d ed       	ldi	r24, 0xDD	; 221
    41ae:	91 e0       	ldi	r25, 0x01	; 1
    41b0:	9d 8f       	std	Y+29, r25	; 0x1d
    41b2:	8c 8f       	std	Y+28, r24	; 0x1c
    41b4:	89 ee       	ldi	r24, 0xE9	; 233
    41b6:	91 e0       	ldi	r25, 0x01	; 1
    41b8:	9f 8f       	std	Y+31, r25	; 0x1f
    41ba:	8e 8f       	std	Y+30, r24	; 0x1e
	 u8* sms_Array[20];
	 static u8 calling_size = 0;
	 u8 sms_size = 0;
    41bc:	1e 86       	std	Y+14, r1	; 0x0e
	 u8* p = "";
    41be:	80 ed       	ldi	r24, 0xD0	; 208
    41c0:	91 e0       	ldi	r25, 0x01	; 1
    41c2:	9d 87       	std	Y+13, r25	; 0x0d
    41c4:	8c 87       	std	Y+12, r24	; 0x0c
	 u8* pp = "";
    41c6:	80 ed       	ldi	r24, 0xD0	; 208
    41c8:	91 e0       	ldi	r25, 0x01	; 1
    41ca:	9b 87       	std	Y+11, r25	; 0x0b
    41cc:	8a 87       	std	Y+10, r24	; 0x0a
	 u16 ADC_Result1=0;
    41ce:	19 86       	std	Y+9, r1	; 0x09
    41d0:	18 86       	std	Y+8, r1	; 0x08
	 u16 ADC_Result2=0;
    41d2:	1f 82       	std	Y+7, r1	; 0x07
    41d4:	1e 82       	std	Y+6, r1	; 0x06
	 u8* clear = " ";
    41d6:	85 ef       	ldi	r24, 0xF5	; 245
    41d8:	91 e0       	ldi	r25, 0x01	; 1
    41da:	9d 83       	std	Y+5, r25	; 0x05
    41dc:	8c 83       	std	Y+4, r24	; 0x04

	 /*Creating phone list*/
	List L;
	CreateList(&L);
    41de:	ce 01       	movw	r24, r28
    41e0:	86 59       	subi	r24, 0x96	; 150
    41e2:	9f 4f       	sbci	r25, 0xFF	; 255
    41e4:	0e 94 32 12 	call	0x2464	; 0x2464 <CreateList>
	//_delay_ms(500);

	for(u8 i =0; i < (27*2); i++)
    41e8:	1b 82       	std	Y+3, r1	; 0x03
    41ea:	17 c0       	rjmp	.+46     	; 0x421a <main+0xd0>
	{
		LCD_SendString(CList_address + (128*i) ,clear);
    41ec:	8b 81       	ldd	r24, Y+3	; 0x03
    41ee:	88 2f       	mov	r24, r24
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	03 96       	adiw	r24, 0x03	; 3
    41f4:	96 95       	lsr	r25
    41f6:	98 2f       	mov	r25, r24
    41f8:	88 27       	eor	r24, r24
    41fa:	97 95       	ror	r25
    41fc:	87 95       	ror	r24
    41fe:	aa 27       	eor	r26, r26
    4200:	97 fd       	sbrc	r25, 7
    4202:	a0 95       	com	r26
    4204:	ba 2f       	mov	r27, r26
    4206:	2c 81       	ldd	r18, Y+4	; 0x04
    4208:	3d 81       	ldd	r19, Y+5	; 0x05
    420a:	bc 01       	movw	r22, r24
    420c:	cd 01       	movw	r24, r26
    420e:	a9 01       	movw	r20, r18
    4210:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <LCD_SendString>
	 /*Creating phone list*/
	List L;
	CreateList(&L);
	//_delay_ms(500);

	for(u8 i =0; i < (27*2); i++)
    4214:	8b 81       	ldd	r24, Y+3	; 0x03
    4216:	8f 5f       	subi	r24, 0xFF	; 255
    4218:	8b 83       	std	Y+3, r24	; 0x03
    421a:	8b 81       	ldd	r24, Y+3	; 0x03
    421c:	86 33       	cpi	r24, 0x36	; 54
    421e:	30 f3       	brcs	.-52     	; 0x41ec <main+0xa2>
	{
		LCD_SendString(CList_address + (128*i) ,clear);
	}
	ReadListFromEEPROM(&L);
    4220:	ce 01       	movw	r24, r28
    4222:	86 59       	subi	r24, 0x96	; 150
    4224:	9f 4f       	sbci	r25, 0xFF	; 255
    4226:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <ReadListFromEEPROM>
	 while(1)
	 {
		 Num_size=0;
    422a:	19 8e       	std	Y+25, r1	; 0x19
		 /*Just for test */
		for(u8 i=0; i<=200; i++)
    422c:	1a 82       	std	Y+2, r1	; 0x02
    422e:	37 c0       	rjmp	.+110    	; 0x429e <main+0x154>
		{
			LCD_SendNum16(In,i);
    4230:	8a 81       	ldd	r24, Y+2	; 0x02
    4232:	28 2f       	mov	r18, r24
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	60 e0       	ldi	r22, 0x00	; 0
    4238:	70 e0       	ldi	r23, 0x00	; 0
    423a:	88 e0       	ldi	r24, 0x08	; 8
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	a9 01       	movw	r20, r18
    4240:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <LCD_SendNum16>
			LCD_SendNum16(Out,200-i);
    4244:	8a 81       	ldd	r24, Y+2	; 0x02
    4246:	28 2f       	mov	r18, r24
    4248:	30 e0       	ldi	r19, 0x00	; 0
    424a:	88 ec       	ldi	r24, 0xC8	; 200
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	82 1b       	sub	r24, r18
    4250:	93 0b       	sbc	r25, r19
    4252:	9c 01       	movw	r18, r24
    4254:	62 e0       	ldi	r22, 0x02	; 2
    4256:	70 e0       	ldi	r23, 0x00	; 0
    4258:	88 e0       	ldi	r24, 0x08	; 8
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	a9 01       	movw	r20, r18
    425e:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <LCD_SendNum16>
			LCD_SendNum16(In_Num,i-50);
    4262:	8a 81       	ldd	r24, Y+2	; 0x02
    4264:	88 2f       	mov	r24, r24
    4266:	90 e0       	ldi	r25, 0x00	; 0
    4268:	c2 97       	sbiw	r24, 0x32	; 50
    426a:	9c 01       	movw	r18, r24
    426c:	6e e0       	ldi	r22, 0x0E	; 14
    426e:	70 e0       	ldi	r23, 0x00	; 0
    4270:	88 e0       	ldi	r24, 0x08	; 8
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	a9 01       	movw	r20, r18
    4276:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <LCD_SendNum16>
			LCD_SendNum16(Out_Num,(200-i)-50);
    427a:	8a 81       	ldd	r24, Y+2	; 0x02
    427c:	28 2f       	mov	r18, r24
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	86 e9       	ldi	r24, 0x96	; 150
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	82 1b       	sub	r24, r18
    4286:	93 0b       	sbc	r25, r19
    4288:	9c 01       	movw	r18, r24
    428a:	60 e1       	ldi	r22, 0x10	; 16
    428c:	70 e0       	ldi	r23, 0x00	; 0
    428e:	88 e0       	ldi	r24, 0x08	; 8
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	a9 01       	movw	r20, r18
    4294:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <LCD_SendNum16>
	ReadListFromEEPROM(&L);
	 while(1)
	 {
		 Num_size=0;
		 /*Just for test */
		for(u8 i=0; i<=200; i++)
    4298:	8a 81       	ldd	r24, Y+2	; 0x02
    429a:	8f 5f       	subi	r24, 0xFF	; 255
    429c:	8a 83       	std	Y+2, r24	; 0x02
    429e:	8a 81       	ldd	r24, Y+2	; 0x02
    42a0:	89 3c       	cpi	r24, 0xC9	; 201
    42a2:	30 f2       	brcs	.-116    	; 0x4230 <main+0xe6>
//		LCD_SendNum16(In,ADC_Result1+50);
//		LCD_SendNum16(Out,ADC_Result1+50);
//		LCD_SendNum16(In_Num,ADC_Result1);
//		LCD_SendNum16(Out_Num,ADC_Result2);

		data = "";
    42a4:	80 ed       	ldi	r24, 0xD0	; 208
    42a6:	91 e0       	ldi	r25, 0x01	; 1
    42a8:	99 8b       	std	Y+17, r25	; 0x11
    42aa:	88 8b       	std	Y+16, r24	; 0x10
		LCD_GetString(0x00000000,data);
    42ac:	28 89       	ldd	r18, Y+16	; 0x10
    42ae:	39 89       	ldd	r19, Y+17	; 0x11
    42b0:	60 e0       	ldi	r22, 0x00	; 0
    42b2:	70 e0       	ldi	r23, 0x00	; 0
    42b4:	80 e0       	ldi	r24, 0x00	; 0
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	a9 01       	movw	r20, r18
    42ba:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_GetString>
		ptr = data;
    42be:	88 89       	ldd	r24, Y+16	; 0x10
    42c0:	99 89       	ldd	r25, Y+17	; 0x11
    42c2:	9c 8b       	std	Y+20, r25	; 0x14
    42c4:	8b 8b       	std	Y+19, r24	; 0x13

		/*Phone Number Validation*/
		if(data[0] == '0' && data[1] == '1')
    42c6:	e8 89       	ldd	r30, Y+16	; 0x10
    42c8:	f9 89       	ldd	r31, Y+17	; 0x11
    42ca:	80 81       	ld	r24, Z
    42cc:	80 33       	cpi	r24, 0x30	; 48
    42ce:	b1 f5       	brne	.+108    	; 0x433c <main+0x1f2>
    42d0:	88 89       	ldd	r24, Y+16	; 0x10
    42d2:	99 89       	ldd	r25, Y+17	; 0x11
    42d4:	fc 01       	movw	r30, r24
    42d6:	31 96       	adiw	r30, 0x01	; 1
    42d8:	80 81       	ld	r24, Z
    42da:	81 33       	cpi	r24, 0x31	; 49
    42dc:	79 f5       	brne	.+94     	; 0x433c <main+0x1f2>
    42de:	08 c0       	rjmp	.+16     	; 0x42f0 <main+0x1a6>
		{
			while(*data != '\0')
			{
				Num_size++;
    42e0:	89 8d       	ldd	r24, Y+25	; 0x19
    42e2:	8f 5f       	subi	r24, 0xFF	; 255
    42e4:	89 8f       	std	Y+25, r24	; 0x19
				data++;
    42e6:	88 89       	ldd	r24, Y+16	; 0x10
    42e8:	99 89       	ldd	r25, Y+17	; 0x11
    42ea:	01 96       	adiw	r24, 0x01	; 1
    42ec:	99 8b       	std	Y+17, r25	; 0x11
    42ee:	88 8b       	std	Y+16, r24	; 0x10
		ptr = data;

		/*Phone Number Validation*/
		if(data[0] == '0' && data[1] == '1')
		{
			while(*data != '\0')
    42f0:	e8 89       	ldd	r30, Y+16	; 0x10
    42f2:	f9 89       	ldd	r31, Y+17	; 0x11
    42f4:	80 81       	ld	r24, Z
    42f6:	88 23       	and	r24, r24
    42f8:	99 f7       	brne	.-26     	; 0x42e0 <main+0x196>
			{
				Num_size++;
				data++;
			}
			if(Num_size == 11)
    42fa:	89 8d       	ldd	r24, Y+25	; 0x19
    42fc:	8b 30       	cpi	r24, 0x0B	; 11
    42fe:	61 f4       	brne	.+24     	; 0x4318 <main+0x1ce>
			{
				//LCD_SendNum16(0x00080004,Num_size);
				LCD_SendString(Validation,valid);
    4300:	2f 89       	ldd	r18, Y+23	; 0x17
    4302:	38 8d       	ldd	r19, Y+24	; 0x18
    4304:	60 e0       	ldi	r22, 0x00	; 0
    4306:	71 e0       	ldi	r23, 0x01	; 1
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	a9 01       	movw	r20, r18
    430e:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <LCD_SendString>
				valid_phone = 1;
    4312:	81 e0       	ldi	r24, 0x01	; 1
    4314:	8a 8b       	std	Y+18, r24	; 0x12
    4316:	23 c0       	rjmp	.+70     	; 0x435e <main+0x214>
			}
			else
			{
				LCD_SendString(Validation,Invalid);
    4318:	2d 89       	ldd	r18, Y+21	; 0x15
    431a:	3e 89       	ldd	r19, Y+22	; 0x16
    431c:	60 e0       	ldi	r22, 0x00	; 0
    431e:	71 e0       	ldi	r23, 0x01	; 1
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	a9 01       	movw	r20, r18
    4326:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <LCD_SendString>
				LCD_SendNum16(Add,0);
    432a:	6a e0       	ldi	r22, 0x0A	; 10
    432c:	70 e0       	ldi	r23, 0x00	; 0
    432e:	88 e0       	ldi	r24, 0x08	; 8
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	40 e0       	ldi	r20, 0x00	; 0
    4334:	50 e0       	ldi	r21, 0x00	; 0
    4336:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <LCD_SendNum16>
    433a:	11 c0       	rjmp	.+34     	; 0x435e <main+0x214>
			}
		}
		else
		{
			LCD_SendString(Validation,Invalid);
    433c:	2d 89       	ldd	r18, Y+21	; 0x15
    433e:	3e 89       	ldd	r19, Y+22	; 0x16
    4340:	60 e0       	ldi	r22, 0x00	; 0
    4342:	71 e0       	ldi	r23, 0x01	; 1
    4344:	80 e0       	ldi	r24, 0x00	; 0
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	a9 01       	movw	r20, r18
    434a:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <LCD_SendString>
			LCD_SendNum16(Add,0);
    434e:	6a e0       	ldi	r22, 0x0A	; 10
    4350:	70 e0       	ldi	r23, 0x00	; 0
    4352:	88 e0       	ldi	r24, 0x08	; 8
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	40 e0       	ldi	r20, 0x00	; 0
    4358:	50 e0       	ldi	r21, 0x00	; 0
    435a:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <LCD_SendNum16>
		}

		/*Checking if user press ADD button and insert the number to its correct list*/
		if(valid_phone && LCD_GetNum16(Add))
    435e:	8a 89       	ldd	r24, Y+18	; 0x12
    4360:	88 23       	and	r24, r24
    4362:	09 f4       	brne	.+2      	; 0x4366 <main+0x21c>
    4364:	66 c0       	rjmp	.+204    	; 0x4432 <main+0x2e8>
    4366:	6a e0       	ldi	r22, 0x0A	; 10
    4368:	70 e0       	ldi	r23, 0x00	; 0
    436a:	88 e0       	ldi	r24, 0x08	; 8
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <LCD_GetNum16>
    4372:	00 97       	sbiw	r24, 0x00	; 0
    4374:	09 f4       	brne	.+2      	; 0x4378 <main+0x22e>
    4376:	5d c0       	rjmp	.+186    	; 0x4432 <main+0x2e8>
		{
			list = LCD_GetNum16(L_type);
    4378:	68 e0       	ldi	r22, 0x08	; 8
    437a:	70 e0       	ldi	r23, 0x00	; 0
    437c:	88 e0       	ldi	r24, 0x08	; 8
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <LCD_GetNum16>
    4384:	8f 87       	std	Y+15, r24	; 0x0f
			if(list == Calling_list)
    4386:	8f 85       	ldd	r24, Y+15	; 0x0f
    4388:	81 30       	cpi	r24, 0x01	; 1
    438a:	e9 f4       	brne	.+58     	; 0x43c6 <main+0x27c>
			{
				LCD_SendString(Phone,ptr);
    438c:	2b 89       	ldd	r18, Y+19	; 0x13
    438e:	3c 89       	ldd	r19, Y+20	; 0x14
    4390:	60 e8       	ldi	r22, 0x80	; 128
    4392:	70 e0       	ldi	r23, 0x00	; 0
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	a9 01       	movw	r20, r18
    439a:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <LCD_SendString>
				LCD_SendNum16(0x0008000C,list);//just for test
    439e:	8f 85       	ldd	r24, Y+15	; 0x0f
    43a0:	28 2f       	mov	r18, r24
    43a2:	30 e0       	ldi	r19, 0x00	; 0
    43a4:	6c e0       	ldi	r22, 0x0C	; 12
    43a6:	70 e0       	ldi	r23, 0x00	; 0
    43a8:	88 e0       	ldi	r24, 0x08	; 8
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	a9 01       	movw	r20, r18
    43ae:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <LCD_SendNum16>
				AddNodeAtLast(&L,ptr,list);
    43b2:	ce 01       	movw	r24, r28
    43b4:	86 59       	subi	r24, 0x96	; 150
    43b6:	9f 4f       	sbci	r25, 0xFF	; 255
    43b8:	2b 89       	ldd	r18, Y+19	; 0x13
    43ba:	3c 89       	ldd	r19, Y+20	; 0x14
    43bc:	b9 01       	movw	r22, r18
    43be:	4f 85       	ldd	r20, Y+15	; 0x0f
    43c0:	0e 94 46 12 	call	0x248c	; 0x248c <AddNodeAtLast>
    43c4:	1f c0       	rjmp	.+62     	; 0x4404 <main+0x2ba>

			}else if(list == SMS_list)
    43c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    43c8:	82 30       	cpi	r24, 0x02	; 2
    43ca:	e1 f4       	brne	.+56     	; 0x4404 <main+0x2ba>
			{
				LCD_SendString(Phone,ptr);
    43cc:	2b 89       	ldd	r18, Y+19	; 0x13
    43ce:	3c 89       	ldd	r19, Y+20	; 0x14
    43d0:	60 e8       	ldi	r22, 0x80	; 128
    43d2:	70 e0       	ldi	r23, 0x00	; 0
    43d4:	80 e0       	ldi	r24, 0x00	; 0
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	a9 01       	movw	r20, r18
    43da:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <LCD_SendString>
				LCD_SendNum16(0x0008000C,list);//just for test
    43de:	8f 85       	ldd	r24, Y+15	; 0x0f
    43e0:	28 2f       	mov	r18, r24
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	6c e0       	ldi	r22, 0x0C	; 12
    43e6:	70 e0       	ldi	r23, 0x00	; 0
    43e8:	88 e0       	ldi	r24, 0x08	; 8
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	a9 01       	movw	r20, r18
    43ee:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <LCD_SendNum16>
				AddNodeAtLast(&L,ptr,list);
    43f2:	ce 01       	movw	r24, r28
    43f4:	86 59       	subi	r24, 0x96	; 150
    43f6:	9f 4f       	sbci	r25, 0xFF	; 255
    43f8:	2b 89       	ldd	r18, Y+19	; 0x13
    43fa:	3c 89       	ldd	r19, Y+20	; 0x14
    43fc:	b9 01       	movw	r22, r18
    43fe:	4f 85       	ldd	r20, Y+15	; 0x0f
    4400:	0e 94 46 12 	call	0x248c	; 0x248c <AddNodeAtLast>
			}

			LCD_SendNum16(Add,0);
    4404:	6a e0       	ldi	r22, 0x0A	; 10
    4406:	70 e0       	ldi	r23, 0x00	; 0
    4408:	88 e0       	ldi	r24, 0x08	; 8
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	40 e0       	ldi	r20, 0x00	; 0
    440e:	50 e0       	ldi	r21, 0x00	; 0
    4410:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <LCD_SendNum16>
			LCD_SendNum16(Clear_BUFF,1);
    4414:	64 e0       	ldi	r22, 0x04	; 4
    4416:	70 e0       	ldi	r23, 0x00	; 0
    4418:	88 e0       	ldi	r24, 0x08	; 8
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	41 e0       	ldi	r20, 0x01	; 1
    441e:	50 e0       	ldi	r21, 0x00	; 0
    4420:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <LCD_SendNum16>
			valid_phone = 0;
    4424:	1a 8a       	std	Y+18, r1	; 0x12
			StoreListToEEPROM(&L);
    4426:	ce 01       	movw	r24, r28
    4428:	86 59       	subi	r24, 0x96	; 150
    442a:	9f 4f       	sbci	r25, 0xFF	; 255
    442c:	0e 94 41 15 	call	0x2a82	; 0x2a82 <StoreListToEEPROM>
    4430:	50 c0       	rjmp	.+160    	; 0x44d2 <main+0x388>
		}
		else if(valid_phone && LCD_GetNum16(Remove)) /*Checking if user want to remove specific number and remove it*/
    4432:	8a 89       	ldd	r24, Y+18	; 0x12
    4434:	88 23       	and	r24, r24
    4436:	09 f4       	brne	.+2      	; 0x443a <main+0x2f0>
    4438:	4c c0       	rjmp	.+152    	; 0x44d2 <main+0x388>
    443a:	62 e1       	ldi	r22, 0x12	; 18
    443c:	70 e0       	ldi	r23, 0x00	; 0
    443e:	88 e0       	ldi	r24, 0x08	; 8
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <LCD_GetNum16>
    4446:	00 97       	sbiw	r24, 0x00	; 0
    4448:	09 f4       	brne	.+2      	; 0x444c <main+0x302>
    444a:	43 c0       	rjmp	.+134    	; 0x44d2 <main+0x388>
		{
			Delete(ptr,&L);
    444c:	8b 89       	ldd	r24, Y+19	; 0x13
    444e:	9c 89       	ldd	r25, Y+20	; 0x14
    4450:	9e 01       	movw	r18, r28
    4452:	26 59       	subi	r18, 0x96	; 150
    4454:	3f 4f       	sbci	r19, 0xFF	; 255
    4456:	b9 01       	movw	r22, r18
    4458:	0e 94 42 13 	call	0x2684	; 0x2684 <Delete>
			LCD_SendNum16(Remove,0);
    445c:	62 e1       	ldi	r22, 0x12	; 18
    445e:	70 e0       	ldi	r23, 0x00	; 0
    4460:	88 e0       	ldi	r24, 0x08	; 8
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	40 e0       	ldi	r20, 0x00	; 0
    4466:	50 e0       	ldi	r21, 0x00	; 0
    4468:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <LCD_SendNum16>
			LCD_SendNum16(Clear_BUFF,1);
    446c:	64 e0       	ldi	r22, 0x04	; 4
    446e:	70 e0       	ldi	r23, 0x00	; 0
    4470:	88 e0       	ldi	r24, 0x08	; 8
    4472:	90 e0       	ldi	r25, 0x00	; 0
    4474:	41 e0       	ldi	r20, 0x01	; 1
    4476:	50 e0       	ldi	r21, 0x00	; 0
    4478:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <LCD_SendNum16>
			valid_phone = 0;
    447c:	1a 8a       	std	Y+18, r1	; 0x12
			StoreListToEEPROM(&L);
    447e:	ce 01       	movw	r24, r28
    4480:	86 59       	subi	r24, 0x96	; 150
    4482:	9f 4f       	sbci	r25, 0xFF	; 255
    4484:	0e 94 41 15 	call	0x2a82	; 0x2a82 <StoreListToEEPROM>

			LCD_SendString(CList_address ,clear);
    4488:	2c 81       	ldd	r18, Y+4	; 0x04
    448a:	3d 81       	ldd	r19, Y+5	; 0x05
    448c:	60 e8       	ldi	r22, 0x80	; 128
    448e:	71 e0       	ldi	r23, 0x01	; 1
    4490:	80 e0       	ldi	r24, 0x00	; 0
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	a9 01       	movw	r20, r18
    4496:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <LCD_SendString>
			for(u8 i =0; i < (27*2); i++)
    449a:	19 82       	std	Y+1, r1	; 0x01
    449c:	17 c0       	rjmp	.+46     	; 0x44cc <main+0x382>
			{
				LCD_SendString(CList_address + (128*i) ,clear);
    449e:	89 81       	ldd	r24, Y+1	; 0x01
    44a0:	88 2f       	mov	r24, r24
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	03 96       	adiw	r24, 0x03	; 3
    44a6:	96 95       	lsr	r25
    44a8:	98 2f       	mov	r25, r24
    44aa:	88 27       	eor	r24, r24
    44ac:	97 95       	ror	r25
    44ae:	87 95       	ror	r24
    44b0:	aa 27       	eor	r26, r26
    44b2:	97 fd       	sbrc	r25, 7
    44b4:	a0 95       	com	r26
    44b6:	ba 2f       	mov	r27, r26
    44b8:	2c 81       	ldd	r18, Y+4	; 0x04
    44ba:	3d 81       	ldd	r19, Y+5	; 0x05
    44bc:	bc 01       	movw	r22, r24
    44be:	cd 01       	movw	r24, r26
    44c0:	a9 01       	movw	r20, r18
    44c2:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <LCD_SendString>
			LCD_SendNum16(Clear_BUFF,1);
			valid_phone = 0;
			StoreListToEEPROM(&L);

			LCD_SendString(CList_address ,clear);
			for(u8 i =0; i < (27*2); i++)
    44c6:	89 81       	ldd	r24, Y+1	; 0x01
    44c8:	8f 5f       	subi	r24, 0xFF	; 255
    44ca:	89 83       	std	Y+1, r24	; 0x01
    44cc:	89 81       	ldd	r24, Y+1	; 0x01
    44ce:	86 33       	cpi	r24, 0x36	; 54
    44d0:	30 f3       	brcs	.-52     	; 0x449e <main+0x354>
			{
				LCD_SendString(CList_address + (128*i) ,clear);
			}
		}

		PrintList(&L,CList_address , SList_address);
    44d2:	ce 01       	movw	r24, r28
    44d4:	86 59       	subi	r24, 0x96	; 150
    44d6:	9f 4f       	sbci	r25, 0xFF	; 255
    44d8:	40 e8       	ldi	r20, 0x80	; 128
    44da:	51 e0       	ldi	r21, 0x01	; 1
    44dc:	60 e0       	ldi	r22, 0x00	; 0
    44de:	70 e0       	ldi	r23, 0x00	; 0
    44e0:	00 e0       	ldi	r16, 0x00	; 0
    44e2:	1f e0       	ldi	r17, 0x0F	; 15
    44e4:	20 e0       	ldi	r18, 0x00	; 0
    44e6:	30 e0       	ldi	r19, 0x00	; 0
    44e8:	0e 94 b8 12 	call	0x2570	; 0x2570 <PrintList>
    44ec:	9e ce       	rjmp	.-708    	; 0x422a <main+0xe0>

000044ee <__mulsi3>:
    44ee:	62 9f       	mul	r22, r18
    44f0:	d0 01       	movw	r26, r0
    44f2:	73 9f       	mul	r23, r19
    44f4:	f0 01       	movw	r30, r0
    44f6:	82 9f       	mul	r24, r18
    44f8:	e0 0d       	add	r30, r0
    44fa:	f1 1d       	adc	r31, r1
    44fc:	64 9f       	mul	r22, r20
    44fe:	e0 0d       	add	r30, r0
    4500:	f1 1d       	adc	r31, r1
    4502:	92 9f       	mul	r25, r18
    4504:	f0 0d       	add	r31, r0
    4506:	83 9f       	mul	r24, r19
    4508:	f0 0d       	add	r31, r0
    450a:	74 9f       	mul	r23, r20
    450c:	f0 0d       	add	r31, r0
    450e:	65 9f       	mul	r22, r21
    4510:	f0 0d       	add	r31, r0
    4512:	99 27       	eor	r25, r25
    4514:	72 9f       	mul	r23, r18
    4516:	b0 0d       	add	r27, r0
    4518:	e1 1d       	adc	r30, r1
    451a:	f9 1f       	adc	r31, r25
    451c:	63 9f       	mul	r22, r19
    451e:	b0 0d       	add	r27, r0
    4520:	e1 1d       	adc	r30, r1
    4522:	f9 1f       	adc	r31, r25
    4524:	bd 01       	movw	r22, r26
    4526:	cf 01       	movw	r24, r30
    4528:	11 24       	eor	r1, r1
    452a:	08 95       	ret

0000452c <__udivmodsi4>:
    452c:	a1 e2       	ldi	r26, 0x21	; 33
    452e:	1a 2e       	mov	r1, r26
    4530:	aa 1b       	sub	r26, r26
    4532:	bb 1b       	sub	r27, r27
    4534:	fd 01       	movw	r30, r26
    4536:	0d c0       	rjmp	.+26     	; 0x4552 <__udivmodsi4_ep>

00004538 <__udivmodsi4_loop>:
    4538:	aa 1f       	adc	r26, r26
    453a:	bb 1f       	adc	r27, r27
    453c:	ee 1f       	adc	r30, r30
    453e:	ff 1f       	adc	r31, r31
    4540:	a2 17       	cp	r26, r18
    4542:	b3 07       	cpc	r27, r19
    4544:	e4 07       	cpc	r30, r20
    4546:	f5 07       	cpc	r31, r21
    4548:	20 f0       	brcs	.+8      	; 0x4552 <__udivmodsi4_ep>
    454a:	a2 1b       	sub	r26, r18
    454c:	b3 0b       	sbc	r27, r19
    454e:	e4 0b       	sbc	r30, r20
    4550:	f5 0b       	sbc	r31, r21

00004552 <__udivmodsi4_ep>:
    4552:	66 1f       	adc	r22, r22
    4554:	77 1f       	adc	r23, r23
    4556:	88 1f       	adc	r24, r24
    4558:	99 1f       	adc	r25, r25
    455a:	1a 94       	dec	r1
    455c:	69 f7       	brne	.-38     	; 0x4538 <__udivmodsi4_loop>
    455e:	60 95       	com	r22
    4560:	70 95       	com	r23
    4562:	80 95       	com	r24
    4564:	90 95       	com	r25
    4566:	9b 01       	movw	r18, r22
    4568:	ac 01       	movw	r20, r24
    456a:	bd 01       	movw	r22, r26
    456c:	cf 01       	movw	r24, r30
    456e:	08 95       	ret

00004570 <__prologue_saves__>:
    4570:	2f 92       	push	r2
    4572:	3f 92       	push	r3
    4574:	4f 92       	push	r4
    4576:	5f 92       	push	r5
    4578:	6f 92       	push	r6
    457a:	7f 92       	push	r7
    457c:	8f 92       	push	r8
    457e:	9f 92       	push	r9
    4580:	af 92       	push	r10
    4582:	bf 92       	push	r11
    4584:	cf 92       	push	r12
    4586:	df 92       	push	r13
    4588:	ef 92       	push	r14
    458a:	ff 92       	push	r15
    458c:	0f 93       	push	r16
    458e:	1f 93       	push	r17
    4590:	cf 93       	push	r28
    4592:	df 93       	push	r29
    4594:	cd b7       	in	r28, 0x3d	; 61
    4596:	de b7       	in	r29, 0x3e	; 62
    4598:	ca 1b       	sub	r28, r26
    459a:	db 0b       	sbc	r29, r27
    459c:	0f b6       	in	r0, 0x3f	; 63
    459e:	f8 94       	cli
    45a0:	de bf       	out	0x3e, r29	; 62
    45a2:	0f be       	out	0x3f, r0	; 63
    45a4:	cd bf       	out	0x3d, r28	; 61
    45a6:	09 94       	ijmp

000045a8 <__epilogue_restores__>:
    45a8:	2a 88       	ldd	r2, Y+18	; 0x12
    45aa:	39 88       	ldd	r3, Y+17	; 0x11
    45ac:	48 88       	ldd	r4, Y+16	; 0x10
    45ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    45b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    45b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    45b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    45b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    45b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    45ba:	b9 84       	ldd	r11, Y+9	; 0x09
    45bc:	c8 84       	ldd	r12, Y+8	; 0x08
    45be:	df 80       	ldd	r13, Y+7	; 0x07
    45c0:	ee 80       	ldd	r14, Y+6	; 0x06
    45c2:	fd 80       	ldd	r15, Y+5	; 0x05
    45c4:	0c 81       	ldd	r16, Y+4	; 0x04
    45c6:	1b 81       	ldd	r17, Y+3	; 0x03
    45c8:	aa 81       	ldd	r26, Y+2	; 0x02
    45ca:	b9 81       	ldd	r27, Y+1	; 0x01
    45cc:	ce 0f       	add	r28, r30
    45ce:	d1 1d       	adc	r29, r1
    45d0:	0f b6       	in	r0, 0x3f	; 63
    45d2:	f8 94       	cli
    45d4:	de bf       	out	0x3e, r29	; 62
    45d6:	0f be       	out	0x3f, r0	; 63
    45d8:	cd bf       	out	0x3d, r28	; 61
    45da:	ed 01       	movw	r28, r26
    45dc:	08 95       	ret

000045de <malloc>:
    45de:	cf 93       	push	r28
    45e0:	df 93       	push	r29
    45e2:	bc 01       	movw	r22, r24
    45e4:	82 30       	cpi	r24, 0x02	; 2
    45e6:	91 05       	cpc	r25, r1
    45e8:	10 f4       	brcc	.+4      	; 0x45ee <malloc+0x10>
    45ea:	62 e0       	ldi	r22, 0x02	; 2
    45ec:	70 e0       	ldi	r23, 0x00	; 0
    45ee:	a0 91 06 05 	lds	r26, 0x0506
    45f2:	b0 91 07 05 	lds	r27, 0x0507
    45f6:	ed 01       	movw	r28, r26
    45f8:	e0 e0       	ldi	r30, 0x00	; 0
    45fa:	f0 e0       	ldi	r31, 0x00	; 0
    45fc:	40 e0       	ldi	r20, 0x00	; 0
    45fe:	50 e0       	ldi	r21, 0x00	; 0
    4600:	21 c0       	rjmp	.+66     	; 0x4644 <malloc+0x66>
    4602:	88 81       	ld	r24, Y
    4604:	99 81       	ldd	r25, Y+1	; 0x01
    4606:	86 17       	cp	r24, r22
    4608:	97 07       	cpc	r25, r23
    460a:	69 f4       	brne	.+26     	; 0x4626 <malloc+0x48>
    460c:	8a 81       	ldd	r24, Y+2	; 0x02
    460e:	9b 81       	ldd	r25, Y+3	; 0x03
    4610:	30 97       	sbiw	r30, 0x00	; 0
    4612:	19 f0       	breq	.+6      	; 0x461a <malloc+0x3c>
    4614:	93 83       	std	Z+3, r25	; 0x03
    4616:	82 83       	std	Z+2, r24	; 0x02
    4618:	04 c0       	rjmp	.+8      	; 0x4622 <malloc+0x44>
    461a:	90 93 07 05 	sts	0x0507, r25
    461e:	80 93 06 05 	sts	0x0506, r24
    4622:	fe 01       	movw	r30, r28
    4624:	34 c0       	rjmp	.+104    	; 0x468e <malloc+0xb0>
    4626:	68 17       	cp	r22, r24
    4628:	79 07       	cpc	r23, r25
    462a:	38 f4       	brcc	.+14     	; 0x463a <malloc+0x5c>
    462c:	41 15       	cp	r20, r1
    462e:	51 05       	cpc	r21, r1
    4630:	19 f0       	breq	.+6      	; 0x4638 <malloc+0x5a>
    4632:	84 17       	cp	r24, r20
    4634:	95 07       	cpc	r25, r21
    4636:	08 f4       	brcc	.+2      	; 0x463a <malloc+0x5c>
    4638:	ac 01       	movw	r20, r24
    463a:	fe 01       	movw	r30, r28
    463c:	8a 81       	ldd	r24, Y+2	; 0x02
    463e:	9b 81       	ldd	r25, Y+3	; 0x03
    4640:	9c 01       	movw	r18, r24
    4642:	e9 01       	movw	r28, r18
    4644:	20 97       	sbiw	r28, 0x00	; 0
    4646:	e9 f6       	brne	.-70     	; 0x4602 <malloc+0x24>
    4648:	41 15       	cp	r20, r1
    464a:	51 05       	cpc	r21, r1
    464c:	a9 f1       	breq	.+106    	; 0x46b8 <malloc+0xda>
    464e:	ca 01       	movw	r24, r20
    4650:	86 1b       	sub	r24, r22
    4652:	97 0b       	sbc	r25, r23
    4654:	04 97       	sbiw	r24, 0x04	; 4
    4656:	08 f4       	brcc	.+2      	; 0x465a <malloc+0x7c>
    4658:	ba 01       	movw	r22, r20
    465a:	e0 e0       	ldi	r30, 0x00	; 0
    465c:	f0 e0       	ldi	r31, 0x00	; 0
    465e:	2a c0       	rjmp	.+84     	; 0x46b4 <malloc+0xd6>
    4660:	8d 91       	ld	r24, X+
    4662:	9c 91       	ld	r25, X
    4664:	11 97       	sbiw	r26, 0x01	; 1
    4666:	84 17       	cp	r24, r20
    4668:	95 07       	cpc	r25, r21
    466a:	f9 f4       	brne	.+62     	; 0x46aa <malloc+0xcc>
    466c:	64 17       	cp	r22, r20
    466e:	75 07       	cpc	r23, r21
    4670:	81 f4       	brne	.+32     	; 0x4692 <malloc+0xb4>
    4672:	12 96       	adiw	r26, 0x02	; 2
    4674:	8d 91       	ld	r24, X+
    4676:	9c 91       	ld	r25, X
    4678:	13 97       	sbiw	r26, 0x03	; 3
    467a:	30 97       	sbiw	r30, 0x00	; 0
    467c:	19 f0       	breq	.+6      	; 0x4684 <malloc+0xa6>
    467e:	93 83       	std	Z+3, r25	; 0x03
    4680:	82 83       	std	Z+2, r24	; 0x02
    4682:	04 c0       	rjmp	.+8      	; 0x468c <malloc+0xae>
    4684:	90 93 07 05 	sts	0x0507, r25
    4688:	80 93 06 05 	sts	0x0506, r24
    468c:	fd 01       	movw	r30, r26
    468e:	32 96       	adiw	r30, 0x02	; 2
    4690:	4f c0       	rjmp	.+158    	; 0x4730 <malloc+0x152>
    4692:	ca 01       	movw	r24, r20
    4694:	86 1b       	sub	r24, r22
    4696:	97 0b       	sbc	r25, r23
    4698:	fd 01       	movw	r30, r26
    469a:	e8 0f       	add	r30, r24
    469c:	f9 1f       	adc	r31, r25
    469e:	61 93       	st	Z+, r22
    46a0:	71 93       	st	Z+, r23
    46a2:	02 97       	sbiw	r24, 0x02	; 2
    46a4:	8d 93       	st	X+, r24
    46a6:	9c 93       	st	X, r25
    46a8:	43 c0       	rjmp	.+134    	; 0x4730 <malloc+0x152>
    46aa:	fd 01       	movw	r30, r26
    46ac:	82 81       	ldd	r24, Z+2	; 0x02
    46ae:	93 81       	ldd	r25, Z+3	; 0x03
    46b0:	9c 01       	movw	r18, r24
    46b2:	d9 01       	movw	r26, r18
    46b4:	10 97       	sbiw	r26, 0x00	; 0
    46b6:	a1 f6       	brne	.-88     	; 0x4660 <malloc+0x82>
    46b8:	80 91 04 05 	lds	r24, 0x0504
    46bc:	90 91 05 05 	lds	r25, 0x0505
    46c0:	89 2b       	or	r24, r25
    46c2:	41 f4       	brne	.+16     	; 0x46d4 <malloc+0xf6>
    46c4:	80 91 01 03 	lds	r24, 0x0301
    46c8:	90 91 02 03 	lds	r25, 0x0302
    46cc:	90 93 05 05 	sts	0x0505, r25
    46d0:	80 93 04 05 	sts	0x0504, r24
    46d4:	40 91 03 03 	lds	r20, 0x0303
    46d8:	50 91 04 03 	lds	r21, 0x0304
    46dc:	41 15       	cp	r20, r1
    46de:	51 05       	cpc	r21, r1
    46e0:	41 f4       	brne	.+16     	; 0x46f2 <malloc+0x114>
    46e2:	4d b7       	in	r20, 0x3d	; 61
    46e4:	5e b7       	in	r21, 0x3e	; 62
    46e6:	80 91 ff 02 	lds	r24, 0x02FF
    46ea:	90 91 00 03 	lds	r25, 0x0300
    46ee:	48 1b       	sub	r20, r24
    46f0:	59 0b       	sbc	r21, r25
    46f2:	20 91 04 05 	lds	r18, 0x0504
    46f6:	30 91 05 05 	lds	r19, 0x0505
    46fa:	24 17       	cp	r18, r20
    46fc:	35 07       	cpc	r19, r21
    46fe:	b0 f4       	brcc	.+44     	; 0x472c <malloc+0x14e>
    4700:	ca 01       	movw	r24, r20
    4702:	82 1b       	sub	r24, r18
    4704:	93 0b       	sbc	r25, r19
    4706:	86 17       	cp	r24, r22
    4708:	97 07       	cpc	r25, r23
    470a:	80 f0       	brcs	.+32     	; 0x472c <malloc+0x14e>
    470c:	ab 01       	movw	r20, r22
    470e:	4e 5f       	subi	r20, 0xFE	; 254
    4710:	5f 4f       	sbci	r21, 0xFF	; 255
    4712:	84 17       	cp	r24, r20
    4714:	95 07       	cpc	r25, r21
    4716:	50 f0       	brcs	.+20     	; 0x472c <malloc+0x14e>
    4718:	42 0f       	add	r20, r18
    471a:	53 1f       	adc	r21, r19
    471c:	50 93 05 05 	sts	0x0505, r21
    4720:	40 93 04 05 	sts	0x0504, r20
    4724:	f9 01       	movw	r30, r18
    4726:	61 93       	st	Z+, r22
    4728:	71 93       	st	Z+, r23
    472a:	02 c0       	rjmp	.+4      	; 0x4730 <malloc+0x152>
    472c:	e0 e0       	ldi	r30, 0x00	; 0
    472e:	f0 e0       	ldi	r31, 0x00	; 0
    4730:	cf 01       	movw	r24, r30
    4732:	df 91       	pop	r29
    4734:	cf 91       	pop	r28
    4736:	08 95       	ret

00004738 <free>:
    4738:	cf 93       	push	r28
    473a:	df 93       	push	r29
    473c:	00 97       	sbiw	r24, 0x00	; 0
    473e:	09 f4       	brne	.+2      	; 0x4742 <free+0xa>
    4740:	50 c0       	rjmp	.+160    	; 0x47e2 <free+0xaa>
    4742:	ec 01       	movw	r28, r24
    4744:	22 97       	sbiw	r28, 0x02	; 2
    4746:	1b 82       	std	Y+3, r1	; 0x03
    4748:	1a 82       	std	Y+2, r1	; 0x02
    474a:	a0 91 06 05 	lds	r26, 0x0506
    474e:	b0 91 07 05 	lds	r27, 0x0507
    4752:	10 97       	sbiw	r26, 0x00	; 0
    4754:	09 f1       	breq	.+66     	; 0x4798 <free+0x60>
    4756:	40 e0       	ldi	r20, 0x00	; 0
    4758:	50 e0       	ldi	r21, 0x00	; 0
    475a:	ac 17       	cp	r26, r28
    475c:	bd 07       	cpc	r27, r29
    475e:	08 f1       	brcs	.+66     	; 0x47a2 <free+0x6a>
    4760:	bb 83       	std	Y+3, r27	; 0x03
    4762:	aa 83       	std	Y+2, r26	; 0x02
    4764:	fe 01       	movw	r30, r28
    4766:	21 91       	ld	r18, Z+
    4768:	31 91       	ld	r19, Z+
    476a:	e2 0f       	add	r30, r18
    476c:	f3 1f       	adc	r31, r19
    476e:	ae 17       	cp	r26, r30
    4770:	bf 07       	cpc	r27, r31
    4772:	79 f4       	brne	.+30     	; 0x4792 <free+0x5a>
    4774:	8d 91       	ld	r24, X+
    4776:	9c 91       	ld	r25, X
    4778:	11 97       	sbiw	r26, 0x01	; 1
    477a:	28 0f       	add	r18, r24
    477c:	39 1f       	adc	r19, r25
    477e:	2e 5f       	subi	r18, 0xFE	; 254
    4780:	3f 4f       	sbci	r19, 0xFF	; 255
    4782:	39 83       	std	Y+1, r19	; 0x01
    4784:	28 83       	st	Y, r18
    4786:	12 96       	adiw	r26, 0x02	; 2
    4788:	8d 91       	ld	r24, X+
    478a:	9c 91       	ld	r25, X
    478c:	13 97       	sbiw	r26, 0x03	; 3
    478e:	9b 83       	std	Y+3, r25	; 0x03
    4790:	8a 83       	std	Y+2, r24	; 0x02
    4792:	41 15       	cp	r20, r1
    4794:	51 05       	cpc	r21, r1
    4796:	71 f4       	brne	.+28     	; 0x47b4 <free+0x7c>
    4798:	d0 93 07 05 	sts	0x0507, r29
    479c:	c0 93 06 05 	sts	0x0506, r28
    47a0:	20 c0       	rjmp	.+64     	; 0x47e2 <free+0xaa>
    47a2:	12 96       	adiw	r26, 0x02	; 2
    47a4:	8d 91       	ld	r24, X+
    47a6:	9c 91       	ld	r25, X
    47a8:	13 97       	sbiw	r26, 0x03	; 3
    47aa:	ad 01       	movw	r20, r26
    47ac:	00 97       	sbiw	r24, 0x00	; 0
    47ae:	11 f0       	breq	.+4      	; 0x47b4 <free+0x7c>
    47b0:	dc 01       	movw	r26, r24
    47b2:	d3 cf       	rjmp	.-90     	; 0x475a <free+0x22>
    47b4:	fa 01       	movw	r30, r20
    47b6:	d3 83       	std	Z+3, r29	; 0x03
    47b8:	c2 83       	std	Z+2, r28	; 0x02
    47ba:	21 91       	ld	r18, Z+
    47bc:	31 91       	ld	r19, Z+
    47be:	e2 0f       	add	r30, r18
    47c0:	f3 1f       	adc	r31, r19
    47c2:	ce 17       	cp	r28, r30
    47c4:	df 07       	cpc	r29, r31
    47c6:	69 f4       	brne	.+26     	; 0x47e2 <free+0xaa>
    47c8:	88 81       	ld	r24, Y
    47ca:	99 81       	ldd	r25, Y+1	; 0x01
    47cc:	28 0f       	add	r18, r24
    47ce:	39 1f       	adc	r19, r25
    47d0:	2e 5f       	subi	r18, 0xFE	; 254
    47d2:	3f 4f       	sbci	r19, 0xFF	; 255
    47d4:	fa 01       	movw	r30, r20
    47d6:	31 83       	std	Z+1, r19	; 0x01
    47d8:	20 83       	st	Z, r18
    47da:	8a 81       	ldd	r24, Y+2	; 0x02
    47dc:	9b 81       	ldd	r25, Y+3	; 0x03
    47de:	93 83       	std	Z+3, r25	; 0x03
    47e0:	82 83       	std	Z+2, r24	; 0x02
    47e2:	df 91       	pop	r29
    47e4:	cf 91       	pop	r28
    47e6:	08 95       	ret

000047e8 <memset>:
    47e8:	dc 01       	movw	r26, r24
    47ea:	01 c0       	rjmp	.+2      	; 0x47ee <memset+0x6>
    47ec:	6d 93       	st	X+, r22
    47ee:	41 50       	subi	r20, 0x01	; 1
    47f0:	50 40       	sbci	r21, 0x00	; 0
    47f2:	e0 f7       	brcc	.-8      	; 0x47ec <memset+0x4>
    47f4:	08 95       	ret

000047f6 <strstr>:
    47f6:	fb 01       	movw	r30, r22
    47f8:	51 91       	ld	r21, Z+
    47fa:	55 23       	and	r21, r21
    47fc:	a9 f0       	breq	.+42     	; 0x4828 <strstr+0x32>
    47fe:	bf 01       	movw	r22, r30
    4800:	dc 01       	movw	r26, r24
    4802:	4d 91       	ld	r20, X+
    4804:	45 17       	cp	r20, r21
    4806:	41 11       	cpse	r20, r1
    4808:	e1 f7       	brne	.-8      	; 0x4802 <strstr+0xc>
    480a:	59 f4       	brne	.+22     	; 0x4822 <strstr+0x2c>
    480c:	cd 01       	movw	r24, r26
    480e:	01 90       	ld	r0, Z+
    4810:	00 20       	and	r0, r0
    4812:	49 f0       	breq	.+18     	; 0x4826 <strstr+0x30>
    4814:	4d 91       	ld	r20, X+
    4816:	40 15       	cp	r20, r0
    4818:	41 11       	cpse	r20, r1
    481a:	c9 f3       	breq	.-14     	; 0x480e <strstr+0x18>
    481c:	fb 01       	movw	r30, r22
    481e:	41 11       	cpse	r20, r1
    4820:	ef cf       	rjmp	.-34     	; 0x4800 <strstr+0xa>
    4822:	81 e0       	ldi	r24, 0x01	; 1
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	01 97       	sbiw	r24, 0x01	; 1
    4828:	08 95       	ret

0000482a <__eerd_block_m128>:
    482a:	dc 01       	movw	r26, r24
    482c:	cb 01       	movw	r24, r22

0000482e <__eerd_blraw_m128>:
    482e:	fc 01       	movw	r30, r24
    4830:	e1 99       	sbic	0x1c, 1	; 28
    4832:	fe cf       	rjmp	.-4      	; 0x4830 <__eerd_blraw_m128+0x2>
    4834:	06 c0       	rjmp	.+12     	; 0x4842 <__eerd_blraw_m128+0x14>
    4836:	ff bb       	out	0x1f, r31	; 31
    4838:	ee bb       	out	0x1e, r30	; 30
    483a:	e0 9a       	sbi	0x1c, 0	; 28
    483c:	31 96       	adiw	r30, 0x01	; 1
    483e:	0d b2       	in	r0, 0x1d	; 29
    4840:	0d 92       	st	X+, r0
    4842:	41 50       	subi	r20, 0x01	; 1
    4844:	50 40       	sbci	r21, 0x00	; 0
    4846:	b8 f7       	brcc	.-18     	; 0x4836 <__eerd_blraw_m128+0x8>
    4848:	08 95       	ret

0000484a <__eerd_byte_m128>:
    484a:	e1 99       	sbic	0x1c, 1	; 28
    484c:	fe cf       	rjmp	.-4      	; 0x484a <__eerd_byte_m128>
    484e:	9f bb       	out	0x1f, r25	; 31
    4850:	8e bb       	out	0x1e, r24	; 30
    4852:	e0 9a       	sbi	0x1c, 0	; 28
    4854:	99 27       	eor	r25, r25
    4856:	8d b3       	in	r24, 0x1d	; 29
    4858:	08 95       	ret

0000485a <__eewr_block_m128>:
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	03 c0       	rjmp	.+6      	; 0x4866 <__eewr_block_m128+0xc>
    4860:	2d 91       	ld	r18, X+
    4862:	0e 94 38 24 	call	0x4870	; 0x4870 <__eewr_r18_m128>
    4866:	41 50       	subi	r20, 0x01	; 1
    4868:	50 40       	sbci	r21, 0x00	; 0
    486a:	d0 f7       	brcc	.-12     	; 0x4860 <__eewr_block_m128+0x6>
    486c:	08 95       	ret

0000486e <__eewr_byte_m128>:
    486e:	26 2f       	mov	r18, r22

00004870 <__eewr_r18_m128>:
    4870:	e1 99       	sbic	0x1c, 1	; 28
    4872:	fe cf       	rjmp	.-4      	; 0x4870 <__eewr_r18_m128>
    4874:	9f bb       	out	0x1f, r25	; 31
    4876:	8e bb       	out	0x1e, r24	; 30
    4878:	2d bb       	out	0x1d, r18	; 29
    487a:	0f b6       	in	r0, 0x3f	; 63
    487c:	f8 94       	cli
    487e:	e2 9a       	sbi	0x1c, 2	; 28
    4880:	e1 9a       	sbi	0x1c, 1	; 28
    4882:	0f be       	out	0x3f, r0	; 63
    4884:	01 96       	adiw	r24, 0x01	; 1
    4886:	08 95       	ret

00004888 <_exit>:
    4888:	f8 94       	cli

0000488a <__stop_program>:
    488a:	ff cf       	rjmp	.-2      	; 0x488a <__stop_program>
